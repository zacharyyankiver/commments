import { PopoverProps } from '@contentful/f36-popover';
import React from 'react';
import { PropsWithHTMLElement, CommonProps, ExpandProps, PolymorphicProps, PolymorphicComponent } from '@contentful/f36-core';
import { CaptionProps } from '@contentful/f36-typography';

interface MenuProps extends Omit<PopoverProps, 'autoFocus' | 'id' | 'closeOnBlur'> {
    /**
     * By default, the Menu is uncontrolled (manage it's expanded state by itself)
     * But you can make it controlled by providing boolean (true/false)
     */
    isOpen?: boolean;
    /**
     * If `true`, the Menu will be initially opened.
     */
    defaultIsOpen?: boolean;
    /**
     * Callback fired when the Menu opens
     */
    onOpen?: () => void;
    /**
     * Callback fired when the Menu closes
     */
    onClose?: () => void;
    /**
     * If `true`, the Menu will close when a menu item is
     * clicked
     *
     * Note: This prop will be propagated to all submenus,
     * unless you will override it with props on submenu itself
     *
     * @default true
     */
    closeOnSelect?: boolean;
    /**
     * If true, the menu will close when you blur out it by clicking outside
     *
     * Note: This prop will be propagated to all submenus,
     * unless you will override it with props on submenu itself
     *
     * @default true
     */
    closeOnBlur?: boolean;
    /**
     * If true, the menu will close when you hit the Esc key
     *
     * Note: This prop will be propagated to all submenus,
     * unless you will override it with props on submenu itself
     *
     * @default true
     */
    closeOnEsc?: boolean;
}
declare function Menu$1(props: MenuProps): JSX.Element;

interface MenuListInternalProps extends CommonProps {
    children?: React.ReactNode;
}
declare type MenuListProps = PropsWithHTMLElement<MenuListInternalProps, 'div'>;
declare const MenuList: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>>, never>, keyof MenuListInternalProps> & MenuListInternalProps & React.RefAttributes<HTMLDivElement>>;

declare type MenuListHeaderProps = PropsWithHTMLElement<CommonProps, 'div'>;
declare const MenuListHeader: React.FC<ExpandProps<MenuListHeaderProps>>;

declare type MenuListFooterProps = PropsWithHTMLElement<CommonProps, 'div'>;
declare const MenuListFooter: React.FC<ExpandProps<MenuListFooterProps>>;

declare const MENU_ITEM_DEFAULT_TAG = "button";
interface MenuItemInternalProps extends CommonProps {
    children?: React.ReactNode;
    as?: 'a' | 'button';
    /**
     * Marks item as active
     */
    isActive?: boolean;
    /**
     * Marks item as disabled
     */
    isDisabled?: boolean;
    /**
     * Sets focus on item
     */
    isInitiallyFocused?: boolean;
    /**
     * Expects any of the icon components. Renders the icon aligned to the start
     */
    icon?: React.ReactElement;
}
declare type MenuItemProps<E extends React.ElementType = typeof MENU_ITEM_DEFAULT_TAG> = PolymorphicProps<MenuItemInternalProps, E>;
declare const MenuItem: PolymorphicComponent<ExpandProps<MenuItemInternalProps>, typeof MENU_ITEM_DEFAULT_TAG>;

interface MenuTriggerProps {
    children: React.ReactNode;
}
declare const MenuTrigger: (props: ExpandProps<MenuTriggerProps>) => JSX.Element;

declare type MenuDividerProps = PropsWithHTMLElement<CommonProps, 'hr'>;
declare const MenuDivider: (props: ExpandProps<MenuDividerProps>) => JSX.Element;

declare type MenuSectionTitleProps = CaptionProps;
declare const MenuSectionTitle: (props: ExpandProps<MenuSectionTitleProps>) => JSX.Element;

declare type SubmenuProps = Omit<MenuProps, 'offset' | 'usePortal' | 'isOpen' | 'defaultIsOpen'>;
declare const Submenu: (props: SubmenuProps) => JSX.Element;

declare type SubmenuTriggerProps = Omit<MenuItemProps<'button'>, 'isInitiallyFocused' | 'as'>;
declare const SubmenuTrigger: React.ForwardRefExoticComponent<SubmenuTriggerProps & React.RefAttributes<HTMLButtonElement>>;

declare type CompoundMenu = typeof Menu$1 & {
    List: typeof MenuList;
    ListHeader: typeof MenuListHeader;
    ListFooter: typeof MenuListFooter;
    Item: typeof MenuItem;
    Trigger: typeof MenuTrigger;
    Divider: typeof MenuDivider;
    SectionTitle: typeof MenuSectionTitle;
    Submenu: typeof Submenu;
    SubmenuTrigger: typeof SubmenuTrigger;
};
declare const Menu: CompoundMenu;

export { Menu, MenuDivider, MenuDividerProps, MenuItem, MenuItemProps, MenuList, MenuListProps, MenuProps, MenuSectionTitle, MenuSectionTitleProps, MenuTrigger, MenuTriggerProps, Submenu, SubmenuProps, SubmenuTrigger, SubmenuTriggerProps };
