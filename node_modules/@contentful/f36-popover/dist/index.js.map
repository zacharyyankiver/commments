{"version":3,"sources":["../src/Popover.tsx","../src/PopoverContext.ts","../src/PopoverContent/PopoverContent.tsx","../src/PopoverContent/PopoverContent.styles.ts","../src/PopoverTrigger/PopoverTrigger.tsx","../src/CompoundPopover.tsx"],"names":["React","useMemo","useState","useEffect","useCallback","useRef","useId","mergeRefs","PopoverContext","usePopoverContext","context","PopoverContextProvider","usePopper","Popover","props","children","isOpen","placement","isFullWidth","isAutoalignmentEnabled","usePortal","closeOnBlur","closeOnEsc","onClose","autoFocus","id","offset","renderOnlyWhenOpen","triggerElement","setTriggerElement","popoverElement","setPopoverElement","popperAttributes","update","popperStyles","__spreadProps","__spreadValues","sameWidth","__async","popoverGeneratedId","popoverId","closeAndFocusTrigger","isMouseDown","contextValue","_props","_ref","event","_a","activeElement","relatedTarget","targetIsPopover","targetIsTrigger","state","reference","cx","Portal","css","tokens","getPopoverContentStyles","_PopoverContent","ref","className","testId","role","otherProps","__objRest","getPopoverProps","styles","content","PopoverContent","PopoverTrigger","child","getTriggerProps"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from 'react';\nimport { useId, mergeRefs, type ExpandProps } from '@contentful/f36-core';\nimport type { Placement, Modifier } from '@popperjs/core';\nimport { PopoverContextProvider, PopoverContextType } from './PopoverContext';\nimport { usePopper } from 'react-popper';\n\nexport interface PopoverProps {\n  children: React.ReactNode;\n\n  /**\n   * Boolean to determine if the Popover should be the same width as\n   * the trigger element\n   *\n   * @default false\n   */\n  isFullWidth?: boolean;\n\n  /**\n   * Boolean to control whether or not the Popover is open\n   *\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void;\n\n  /**\n   * Determines the preferred position of the Popover. This position is not\n   * guaranteed, as the Popover might be moved to fit the viewport\n   *\n   * @default bottom-start\n   */\n  placement?: Placement;\n\n  /**\n   * Boolean to control if popover is allowed to change its placement automatically\n   * based on available space in the viewport.\n   *\n   * For example:\n   * If you set placement prop to bottom, but there isn't enough space to position the popover in that direction,\n   * it will change the popper placement to top. As soon as enough space is detected, the placement will be reverted to the defined one.\n   *\n   * If you want the popover to strictly follow the placement prop you should set this prop to false.\n   *\n   * @default true\n   */\n  isAutoalignmentEnabled?: boolean;\n\n  /**\n   * Boolean to control whether or not to render the Popover in a React Portal.\n   * Rendering content inside a Portal allows the Popover to escape the bounds\n   * of its parent while still being positioned correctly. Using a Portal is\n   * necessary if an ancestor of the Popover hides overflow.\n   *\n   * @default true\n   */\n  usePortal?: boolean;\n\n  /**\n   * If true, the popover will close when you blur out it by clicking outside or tabbing out\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean;\n\n  /**\n   * If true, the popover will close when you hit the Esc key\n   *\n   * @default true\n   */\n  closeOnEsc?: boolean;\n\n  /**\n   * If true, the popover will be focused after opening\n   *\n   * @default true\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Popover id. Will be used as an `id` attribute on popover\n   * and as `aria-controls` attribute on trigger\n   *\n   * @default true\n   */\n  id?: string;\n\n  /**\n   * The `X-axis` and `Y-axis` offset to position popper element\n   * from its trigger element. `[X, Y]`\n   *\n   * @default [1, 4]\n   */\n  offset?: [number, number];\n\n  /**\n   * Defines if popover should be rendered in the DOM only when it's open\n   * or all the time (after the component has been mounted)\n   *\n   * @default true\n   */\n  renderOnlyWhenOpen?: boolean;\n}\n\nexport function Popover(props: ExpandProps<PopoverProps>) {\n  const {\n    children,\n    isOpen,\n    placement = 'bottom-start',\n    isFullWidth = false,\n    isAutoalignmentEnabled = true,\n    usePortal = true,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    onClose,\n    autoFocus = true,\n    id,\n    offset = [1, 4],\n    renderOnlyWhenOpen = true,\n  } = props;\n\n  const [triggerElement, setTriggerElement] = useState<HTMLElement | null>(\n    null,\n  );\n  const [popoverElement, setPopoverElement] = useState<HTMLElement | null>(\n    null,\n  );\n\n  const {\n    attributes: popperAttributes,\n    update,\n    styles: popperStyles,\n  } = usePopper(triggerElement, popoverElement, {\n    placement,\n    modifiers: [\n      {\n        name: 'offset',\n        options: {\n          offset,\n        },\n      },\n      {\n        ...sameWidth,\n        enabled: isFullWidth,\n      },\n      {\n        name: 'preventOverflow',\n        enabled: isAutoalignmentEnabled,\n        options: {\n          mainAxis: true,\n        },\n      },\n      {\n        name: 'flip',\n        enabled: isAutoalignmentEnabled,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (isOpen && autoFocus && popoverElement) {\n      popoverElement.focus({ preventScroll: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, popoverElement]);\n\n  useEffect(() => {\n    const updatePosition = async () => {\n      if (isOpen && update) {\n        await update();\n      }\n    };\n    updatePosition();\n  }, [isOpen, update]);\n\n  const popoverGeneratedId = useId(undefined, 'popover-content');\n  const popoverId = id || popoverGeneratedId;\n\n  const closeAndFocusTrigger = useCallback(() => {\n    onClose?.();\n\n    // setTimeout trick to make it work with focus-lock\n    setTimeout(() => triggerElement?.focus({ preventScroll: true }), 0);\n  }, [onClose, triggerElement]);\n\n  // Safari has an issue with the relatedTarget that we use on the onBlur for getPopoverProps,\n  // which was causing the popover to close and reopen when clicking on the trigger.\n  // We will use the isMouseDown to prevent triggering blur in the cases where the user clicks on the trigger.\n  const isMouseDown = useRef<Boolean>(false);\n\n  const contextValue: PopoverContextType = useMemo(\n    () => ({\n      isOpen: Boolean(isOpen),\n      usePortal,\n      renderOnlyWhenOpen,\n      getTriggerProps: (_props = {}, _ref = null) => ({\n        onMouseDown: (event) => {\n          isMouseDown.current = true;\n          _props.onMouseDown?.(event);\n        },\n        onMouseUp: (event) => {\n          isMouseDown.current = false;\n          _props.onMouseUp?.(event);\n        },\n        ref: mergeRefs(setTriggerElement, _ref),\n        ['aria-expanded']: Boolean(isOpen),\n        ['aria-controls']: popoverId,\n      }),\n      getPopoverProps: (_props = {}, _ref = null) => ({\n        ...popperAttributes.popper,\n        style: {\n          ...(_props.style || {}),\n          ...popperStyles.popper,\n        },\n        ref: mergeRefs(setPopoverElement, _ref),\n        id: popoverId,\n        onBlur: (event: React.FocusEvent<HTMLDivElement>) => {\n          if (_props.onBlur) {\n            _props.onBlur(event);\n          }\n\n          if (!closeOnBlur) {\n            return;\n          }\n\n          const activeElement = document.activeElement;\n          const relatedTarget = event.relatedTarget || activeElement;\n\n          const targetIsPopover =\n            popoverElement === relatedTarget ||\n            popoverElement?.contains(relatedTarget);\n          const targetIsTrigger =\n            triggerElement === relatedTarget ||\n            triggerElement?.contains(relatedTarget) ||\n            isMouseDown.current;\n\n          if (targetIsPopover || targetIsTrigger) {\n            return;\n          }\n\n          onClose?.();\n        },\n        onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => {\n          if (_props.onKeyDown) {\n            _props.onKeyDown(event);\n          }\n\n          if (closeOnEsc && event.key === 'Escape') {\n            closeAndFocusTrigger();\n          }\n        },\n      }),\n    }),\n    [\n      isOpen,\n      renderOnlyWhenOpen,\n      popperAttributes,\n      popperStyles,\n      usePortal,\n      popoverId,\n      closeOnEsc,\n      closeOnBlur,\n      popoverElement,\n      triggerElement,\n      closeAndFocusTrigger,\n      onClose,\n    ],\n  );\n\n  return (\n    <PopoverContextProvider value={contextValue}>\n      {children}\n    </PopoverContextProvider>\n  );\n}\n\n/**\n * Sets the popover width to the size of the trigger element.\n */\nconst sameWidth: Modifier<'sameWidth', any> = {\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles'],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      const reference = state.elements.reference as HTMLElement;\n      state.elements.popper.style.width = `${reference.offsetWidth}px`;\n    },\n};\n","import React, { HTMLProps } from 'react';\n\nexport type PopoverContextType = {\n  isOpen: boolean;\n  usePortal: boolean;\n  renderOnlyWhenOpen: boolean;\n  getPopoverProps: (\n    _props: HTMLProps<HTMLDivElement>,\n    _ref: React.Ref<HTMLDivElement>,\n  ) => HTMLProps<HTMLDivElement>;\n  getTriggerProps: (\n    _props: HTMLProps<HTMLElement>,\n    _ref: React.Ref<HTMLElement>,\n  ) => HTMLProps<HTMLElement>;\n};\n\nconst PopoverContext = React.createContext<PopoverContextType | undefined>(\n  undefined,\n);\n\nexport const usePopoverContext = () => {\n  const context = React.useContext(PopoverContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'usePopoverContext must be used within a PopoverContextProvider',\n    );\n  }\n\n  return context;\n};\n\nexport const PopoverContextProvider = PopoverContext.Provider;\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { usePopoverContext } from '../PopoverContext';\nimport { Portal } from '@contentful/f36-utils';\nimport { getPopoverContentStyles } from './PopoverContent.styles';\n\ninterface PopoverContentInternalProps extends CommonProps {\n  children?: React.ReactNode;\n}\n\nexport type PopoverContentProps = PropsWithHTMLElement<\n  PopoverContentInternalProps,\n  'div'\n>;\n\nconst _PopoverContent = (props: ExpandProps<PopoverContentProps>, ref) => {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-popover-content',\n    role = 'dialog',\n    ...otherProps\n  } = props;\n  const { isOpen, renderOnlyWhenOpen, getPopoverProps, usePortal } =\n    usePopoverContext();\n\n  const styles = getPopoverContentStyles(isOpen);\n\n  const content = (\n    <div\n      {...otherProps}\n      {...getPopoverProps(otherProps, ref)}\n      className={cx(styles.container, className)}\n      data-test-id={testId}\n      tabIndex={-1}\n      role={role}\n      // specific attribute to mark that this element is absolute positioned\n      // for internal contentful apps usage\n      data-position-absolute\n    >\n      {children}\n    </div>\n  );\n\n  if (renderOnlyWhenOpen && !isOpen) {\n    return null;\n  }\n\n  return usePortal ? <Portal>{content}</Portal> : content;\n};\n\nexport const PopoverContent = React.forwardRef(_PopoverContent);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getPopoverContentStyles = (isOpen: boolean) => ({\n  container: css({\n    display: isOpen ? 'initial' : 'none',\n    background: tokens.colorWhite,\n    border: 0,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.boxShadowDefault,\n    zIndex: tokens.zIndexDropdown,\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n      outline: 'none',\n    },\n    '&:focus:not(:focus-visible)': {\n      boxShadow: tokens.boxShadowDefault,\n    },\n  }),\n});\n","import React from 'react';\nimport { usePopoverContext } from '../PopoverContext';\n\nexport interface PopoverTriggerProps {\n  children: React.ReactNode;\n}\n\n/**\n * PopoverTrigger opens the popover. It must be an interactive element.\n */\nexport const PopoverTrigger = (props: PopoverTriggerProps) => {\n  const child = React.Children.only(props.children) as any;\n  const { getTriggerProps } = usePopoverContext();\n\n  return React.cloneElement(child, {\n    ...getTriggerProps(child.props, child.ref),\n    'aria-haspopup': child.props['aria-haspopup'] ?? 'dialog',\n  });\n};\n","import { Popover as OriginalPopover } from './Popover';\nimport { PopoverContent } from './PopoverContent/PopoverContent';\nimport { PopoverTrigger } from './PopoverTrigger/PopoverTrigger';\n\ntype CompoundPopover = typeof OriginalPopover & {\n  Content: typeof PopoverContent;\n  Trigger: typeof PopoverTrigger;\n};\n\nexport const Popover = OriginalPopover as CompoundPopover;\nPopover.Content = PopoverContent;\nPopover.Trigger = PopoverTrigger;\n"]}