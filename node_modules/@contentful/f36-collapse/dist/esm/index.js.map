{"version":3,"sources":["../../src/Collapse.tsx","../../src/Collapse.styles.ts"],"names":["React","useEffect","useLayoutEffect","useRef","Box","tokens","css","cx","getCollapseStyles","className","Collapse","_a","_b","children","isExpanded","testId","otherProps","__objRest","panelEl","styles","isMounted","getPanelContentHeight","current","handleTransitionEnd","fromHeight","toHeight","__spreadProps","__spreadValues"],"mappings":"+kBAAA,OAAOA,GAAS,aAAAC,EAAW,mBAAAC,EAAiB,UAAAC,MAAc,QAC1D,OACE,OAAAC,MAGK,uBACP,OAAOC,MAAY,yBCNnB,OAAS,OAAAC,EAAK,MAAAC,MAAU,UAEjB,IAAMC,EAAoB,CAAC,CAAE,UAAAC,CAAU,KACrC,CACL,gBAAiBF,EACfD,EAAI,CACF,UAAW,aACX,SAAU,QACZ,CAAC,EACDG,CACF,CACF,GDeK,IAAMC,EAAYC,GAMJ,CANI,IAAAC,EAAAD,EACvB,UAAAE,EACA,UAAAJ,EACA,WAAAK,EAAa,GACb,OAAAC,EAAS,aA9BX,EA0ByBH,EAKpBI,EAAAC,EALoBL,EAKpB,CAJH,WACA,YACA,aACA,WAGA,IAAMM,EAAUf,EAAuB,IAAI,EACrCgB,EAASX,EAAkB,CAAE,UAAAC,CAAU,CAAC,EACxCW,EAAYjB,EAAO,EAAK,EAExBkB,EAAwB,IAAM,CAClC,GAAM,CAAE,QAAAC,CAAQ,EAAIJ,EAEpB,OAAKI,EAME,GAAGA,EAAQ,YAAY,KAHrB,KAIX,EAEMC,EAAsB,IAAM,CAChC,GAAM,CAAE,QAAAD,CAAQ,EAAIJ,EAChBJ,EACFQ,GAAA,MAAAA,EAAS,MAAM,YAAY,SAAU,SAErCA,GAAA,MAAAA,EAAS,MAAM,eAAe,kBAC9BA,GAAA,MAAAA,EAAS,MAAM,YAAY,UAAW,QAE1C,EAEA,OAAApB,EAAgB,IAAM,CACpB,GAAM,CAAE,QAAAoB,CAAQ,EAAIJ,EAEhBE,EAAU,SAGZE,GAAA,MAAAA,EAAS,MAAM,YACb,aACA,UAAUjB,EAAO,yBAAyB,IAAIA,EAAO,uBAAuB,aAAaA,EAAO,yBAAyB,IAAIA,EAAO,uBAAuB,IAG7J,sBAAsB,UAAY,CAC5BS,GAEFQ,GAAA,MAAAA,EAAS,MAAM,YAAY,UAAW,SACtCA,GAAA,MAAAA,EAAS,MAAM,eAAe,mBAG9BA,GAAA,MAAAA,EAAS,MAAM,YAAY,iBAAkB,QAG/C,IAAME,EAAaV,EAAa,MAAQO,EAAsB,EACxDI,EAAWX,EAAaO,EAAsB,EAAI,MACxDC,GAAA,MAAAA,EAAS,MAAM,YAAY,SAAUE,GAErC,sBAAsB,UAAY,CAChCF,GAAA,MAAAA,EAAS,MAAM,YAAY,SAAUG,EACvC,CAAC,CACH,CAAC,IAGDF,EAAoB,EACpBH,EAAU,QAAU,GAExB,EAAG,CAACN,CAAU,CAAC,EAEfb,EAAU,IAAM,CACd,GAAM,CAAE,QAAAqB,CAAQ,EAAIJ,EAEpB,OAAAI,GAAA,MAAAA,EAAS,iBAAiB,gBAAiBC,GACpC,IAAM,CACXD,GAAA,MAAAA,EAAS,oBAAoB,gBAAiBC,EAChD,CACF,EAAG,CAACT,CAAU,CAAC,EAGbd,EAAA,cAACI,EAAAsB,EAAAC,EAAA,GACKX,GADL,CAEC,OAAQD,EACR,KAAK,SACL,cAAa,CAACD,EACd,UAAWK,EAAO,gBAClB,IAAKD,IAEJL,CACH,CAEJ","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\nimport { getCollapseStyles } from './Collapse.styles';\n\ninterface CollapseInternalProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * string for additional classNames\n   */\n  className?: string;\n}\n\nexport type CollapseProps = PropsWithHTMLElement<CollapseInternalProps, 'div'>;\n\nexport const Collapse = ({\n  children,\n  className,\n  isExpanded = false,\n  testId = 'cf-collapse',\n  ...otherProps\n}: CollapseProps) => {\n  const panelEl = useRef<HTMLDivElement>(null);\n  const styles = getCollapseStyles({ className });\n  const isMounted = useRef(false);\n\n  const getPanelContentHeight = () => {\n    const { current } = panelEl;\n\n    if (!current) {\n      // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    }\n\n    return `${current.scrollHeight}px`;\n  };\n\n  const handleTransitionEnd = () => {\n    const { current } = panelEl;\n    if (isExpanded) {\n      current?.style.setProperty('height', 'auto');\n    } else {\n      current?.style.removeProperty('pointer-events');\n      current?.style.setProperty('display', 'none');\n    }\n  };\n\n  useLayoutEffect(() => {\n    const { current } = panelEl;\n    // We only want to call requestAnimationFrame after the initial render when the component is mounted\n    if (isMounted.current) {\n      // We set the transition property after the first render\n      // to avoid animating the initial render\n      current?.style.setProperty(\n        'transition',\n        `height ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}, padding ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      );\n\n      requestAnimationFrame(function () {\n        if (isExpanded) {\n          // Overwrite none display to see expanding transition\n          current?.style.setProperty('display', 'block');\n          current?.style.removeProperty('pointer-events');\n        } else {\n          // Don't allow interaction while collapsing\n          current?.style.setProperty('pointer-events', 'none');\n        }\n        // Calculate panel height after removing none display\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current?.style.setProperty('height', fromHeight);\n\n        requestAnimationFrame(function () {\n          current?.style.setProperty('height', toHeight);\n        });\n      });\n    } else {\n      // We call the handleTransitionEnd on mount to set the correct initial styles\n      handleTransitionEnd();\n      isMounted.current = true;\n    }\n  }, [isExpanded]);\n\n  useEffect(() => {\n    const { current } = panelEl;\n\n    current?.addEventListener('transitionend', handleTransitionEnd);\n    return () => {\n      current?.removeEventListener('transitionend', handleTransitionEnd);\n    };\n  }, [isExpanded]);\n\n  return (\n    <Box\n      {...otherProps}\n      testId={testId}\n      role=\"region\"\n      aria-hidden={!isExpanded}\n      className={styles.collapseWrapper}\n      ref={panelEl}\n    >\n      {children}\n    </Box>\n  );\n};\n","import { css, cx } from 'emotion';\n\nexport const getCollapseStyles = ({ className }: { className?: string }) => {\n  return {\n    collapseWrapper: cx(\n      css({\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n      }),\n      className,\n    ),\n  };\n};\n"]}