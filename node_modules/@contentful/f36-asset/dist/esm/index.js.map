{"version":3,"sources":["../../src/Asset.tsx","../../src/AssetIcon/AssetIcon.tsx","../../src/AssetIcon/AssetIcon.styles.ts","../../src/Asset.styles.ts","../../src/types.ts"],"names":["React","cx","Box","Flex","Text","ArchiveIcon","AudioIcon","CodeIllustrationIcon","ImageIcon","MarkupIcon","PdfIcon","PlaintextIcon","RichtextIcon","PresentationIcon","SpreadsheetIcon","VideoIcon","tokens","css","getAssetIconStyles","AssetIcon","_a","_b","type","className","testId","otherProps","__objRest","styles","props","__spreadProps","__spreadValues","getAssetStyles","_Asset","ref","src","status","title","showPreview","Asset","types","isAssetType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  Flex,\n  type EntityStatus,\n  type PickUnion,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\n\nimport { AssetIcon } from './AssetIcon/AssetIcon';\nimport { getAssetStyles } from './Asset.styles';\nimport type { AssetType } from './types';\n\nexport type AssetStatus = PickUnion<\n  EntityStatus,\n  'archived' | 'changed' | 'deleted' | 'draft' | 'published'\n>;\n\nexport interface AssetProps extends CommonProps {\n  /**\n   * A `src` attribute to use for image assets\n   */\n  src?: string;\n  /**\n   * The publish status of the asset\n   */\n  status?: AssetStatus;\n  /**\n   * The title of the asset\n   */\n  title?: string;\n  /**\n   * The type of asset being represented\n   */\n  type?: AssetType;\n}\n\nfunction _Asset(\n  {\n    className,\n    src,\n    status,\n    testId = 'cf-ui-asset',\n    title,\n    type = 'image',\n    ...otherProps\n  }: AssetProps,\n  ref: React.Ref<any>,\n) {\n  const styles = getAssetStyles();\n  const isImage = src && src !== '' && type === 'image';\n\n  // Do not show image previews when publish status is archived\n  const showPreview = isImage && status !== 'archived';\n\n  return (\n    <Box\n      className={cx(styles.root, className)}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showPreview ? (\n        <>\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            className={styles.height100}\n          >\n            <img className={styles.image} src={src} alt={title} />\n          </Flex>\n          {title && (\n            <div className={styles.titleContainer}>\n              <Text\n                className={styles.title}\n                fontColor=\"colorWhite\"\n                margin=\"spacingS\"\n                isTruncated\n              >\n                {title}\n              </Text>\n            </div>\n          )}\n        </>\n      ) : (\n        <Flex\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          paddingLeft=\"spacingS\"\n          paddingRight=\"spacingS\"\n          className={styles.height100}\n        >\n          <Flex\n            marginBottom=\"spacingM\"\n            marginTop=\"spacingM\"\n            justifyContent=\"center\"\n          >\n            <AssetIcon type={type} />\n          </Flex>\n          <Text isTruncated marginBottom=\"spacingM\" fontColor=\"gray600\">\n            {title}\n          </Text>\n        </Flex>\n      )}\n    </Box>\n  );\n}\n\n_Asset.displayName = 'Asset';\n\nexport const Asset = React.forwardRef(_Asset);\n","import React from 'react';\nimport {\n  ArchiveIcon,\n  AudioIcon,\n  CodeIllustrationIcon,\n  ImageIcon,\n  MarkupIcon,\n  PdfIcon,\n  PlaintextIcon,\n  RichtextIcon,\n  PresentationIcon,\n  SpreadsheetIcon,\n  VideoIcon,\n} from '@contentful/f36-icons';\nimport type { GeneratedIconProps } from '@contentful/f36-icon';\nimport type { AssetType } from '../types';\n\nimport { cx } from 'emotion';\nimport { getAssetIconStyles } from './AssetIcon.styles';\n\nexport interface AssetIconProps\n  extends Omit<GeneratedIconProps, 'illustration' | 'ref'> {\n  type?: AssetType;\n}\n\n/**\n * Renders only the Illustration that would represent this asset's type\n */\nexport const AssetIcon = ({\n  type = 'archive',\n  className,\n  testId = 'cf-ui-asset-icon',\n  ...otherProps\n}: AssetIconProps) => {\n  const styles = getAssetIconStyles();\n  const props = {\n    ...otherProps,\n    testId,\n    className: cx(styles.root, className),\n  };\n\n  switch (type) {\n    case 'audio':\n      return <AudioIcon {...props} />;\n    case 'code':\n      return <CodeIllustrationIcon {...props} />;\n    case 'image':\n      return <ImageIcon {...props} />;\n    case 'markup':\n      return <MarkupIcon {...props} />;\n    case 'pdf':\n      return <PdfIcon {...props} />;\n    case 'plaintext':\n      return <PlaintextIcon {...props} />;\n    case 'presentation':\n      return <PresentationIcon {...props} />;\n    case 'richtext':\n      return <RichtextIcon {...props} />;\n    case 'spreadsheet':\n      return <SpreadsheetIcon {...props} />;\n    case 'video':\n      return <VideoIcon {...props} />;\n    case 'archive':\n    default:\n      return <ArchiveIcon {...props} />;\n  }\n};\n\nAssetIcon.displayName = 'AssetIcon';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getAssetIconStyles() {\n  return {\n    root: css({\n      display: 'inline-block',\n      width: '39px',\n      height: '39px',\n      'g, path': {\n        fill: tokens.gray600,\n      },\n    }),\n  };\n}\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getAssetStyles() {\n  return {\n    root: css({\n      position: 'relative',\n      width: '100%',\n    }),\n    height100: css({\n      height: '100%',\n    }),\n    image: css({\n      width: 'auto',\n      maxWidth: '100%',\n      maxHeight: '100%',\n    }),\n    titleContainer: css({\n      opacity: 0,\n      transition: `opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      left: 0,\n      height: '100%',\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'flex-end',\n      boxSizing: 'border-box',\n      background: `linear-gradient(0deg, ${tokens.gray900} 0%, transparent calc(1rem * (100 / ${tokens.fontBaseDefault})), transparent 100% )`,\n      ':hover': { opacity: 1 },\n    }),\n    title: css({\n      bottom: 0,\n      left: 0,\n      right: 0,\n      position: 'absolute',\n    }),\n  };\n}\n","export const types = {\n  archive: 'archive',\n  audio: 'audio',\n  code: 'code',\n  image: 'image',\n  markup: 'markup',\n  pdf: 'pdf',\n  plaintext: 'plaintext',\n  presentation: 'presentation',\n  richtext: 'richtext',\n  spreadsheet: 'spreadsheet',\n  video: 'video',\n};\n\nexport function isAssetType(type: string): type is AssetType {\n  return Object.keys(types).includes(type);\n}\n\nexport type AssetType = keyof typeof types;\n"]}