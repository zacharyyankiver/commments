{"version":3,"sources":["../../src/Accordion.tsx","../../src/Accordion.styles.ts","../../src/AccordionItem/AccordionItem.tsx","../../src/AccordionHeader/AccordionHeader.tsx","../../src/AccordionHeader/AccordionHeader.styles.ts","../../src/AccordionPanel/AccordionPanel.tsx","../../src/AccordionPanel/AccordionPanel.styles.ts","../../src/AccordionItem/AccordionItem.styles.ts","../../src/CompoundAccordion.tsx"],"names":["React","Box","css","cx","tokens","getAccordionStyles","className","_Accordion","_a","ref","_b","align","children","testId","otherProps","__objRest","styles","__spreadProps","__spreadValues","child","Accordion","useId","useControllableState","Subheading","ChevronDownTrimmedIcon","getHeaderStyles","getIconStyles","isExpanded","getAccordionHeaderStyles","props","AccordionHeader","onClick","ariaId","element","rest","Collapse","getAccordionPanelStyles","AccordionPanel","getAccordionItemStyles","_AccordionItem","title","titleElement","onExpand","onCollapse","id","isOpen","handleOpen","handleClose","handleOnClick","AccordionItem"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, type CommonProps, type ExpandProps } from '@contentful/f36-core';\n\nimport { getAccordionStyles } from './Accordion.styles';\n\nexport interface AccordionProps extends CommonProps {\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   * @default end\n   */\n  align?: 'start' | 'end';\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n}\n\nconst _Accordion = (\n  {\n    align = 'end',\n    children,\n    className,\n    testId = 'cf-ui-accordion',\n    ...otherProps\n  }: ExpandProps<AccordionProps>,\n  ref: React.Ref<HTMLUListElement>,\n) => {\n  const styles = getAccordionStyles({ className });\n  return (\n    <Box\n      as=\"ul\"\n      className={styles.accordion}\n      testId={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child, {\n            align,\n          });\n        }\n        return child;\n      })}\n    </Box>\n  );\n};\n\nexport const Accordion = React.forwardRef(_Accordion);\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionStyles = ({ className }: { className?: string }) => ({\n  accordion: cx(\n    css({\n      boxSizing: 'border-box',\n      padding: '0',\n      margin: '0',\n      listStyle: 'none',\n      '&:first-child': {\n        borderTop: `1px solid ${tokens.gray300}`,\n      },\n    }),\n    className,\n  ),\n});\n","import React from 'react';\nimport type { HeadingElement } from '@contentful/f36-typography';\nimport {\n  useId,\n  Box,\n  useControllableState,\n  type CommonProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { AccordionHeader } from '../AccordionHeader/AccordionHeader';\nimport { AccordionPanel } from '../AccordionPanel/AccordionPanel';\nimport { getAccordionItemStyles } from './AccordionItem.styles';\n\nexport interface AccordionItemProps extends CommonProps {\n  /**\n   * The accordion title\n   */\n  title?: React.ReactNode;\n  /**\n   * The heading element that will be used by the AccordionHeader\n   */\n  titleElement?: HeadingElement;\n  /**\n   * The children of the AccordionItem are in fact the content of the accordion\n   */\n  children?: React.ReactNode;\n  /**\n   * A function to be called when the accordion item is opened\n   */\n  onExpand?: () => void;\n  /**\n   * A function to be called when the accordion item is closed\n   */\n  onCollapse?: () => void;\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   */\n  align?: 'start' | 'end';\n\n  /**\n   * By default, the AccordionItem is uncontrolled (manage it's expanded state by itself)\n   * But you can make it controlled by providing boolean\n   */\n  isExpanded?: boolean;\n}\n\nconst _AccordionItem = (\n  {\n    title = 'Accordion Title',\n    titleElement = 'h2',\n    testId = 'cf-ui-accordion-item',\n    onExpand,\n    onCollapse,\n    children,\n    align = 'end',\n    className,\n    isExpanded,\n    ...otherProps\n  }: ExpandProps<AccordionItemProps>,\n  ref: React.Ref<HTMLLIElement>,\n) => {\n  const styles = getAccordionItemStyles({ className });\n  const id = useId();\n  const { isOpen, handleOpen, handleClose } = useControllableState({\n    isOpen: isExpanded,\n    onOpen: onExpand,\n    onClose: onCollapse,\n  });\n\n  const handleOnClick = () => {\n    if (isOpen) {\n      handleClose();\n    } else {\n      handleOpen();\n    }\n  };\n\n  return (\n    <Box\n      as=\"li\"\n      className={styles.accordionItem}\n      testId={`${testId}-${id}`}\n      {...otherProps}\n      ref={ref}\n    >\n      <AccordionHeader\n        onClick={handleOnClick}\n        isExpanded={isOpen}\n        element={titleElement}\n        ariaId={id}\n        align={align}\n      >\n        {title}\n      </AccordionHeader>\n\n      <AccordionPanel ariaId={id} isExpanded={isOpen}>\n        {children}\n      </AccordionPanel>\n    </Box>\n  );\n};\n\nexport const AccordionItem = React.forwardRef(_AccordionItem);\n","import React from 'react';\nimport { Subheading, type HeadingElement } from '@contentful/f36-typography';\nimport { ChevronDownTrimmedIcon } from '@contentful/f36-icons';\nimport type { CommonProps } from '@contentful/f36-core';\n\nimport { getAccordionHeaderStyles } from './AccordionHeader.styles';\n\nexport interface AccordionHeaderProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * The function that will be called once the user clicks on the accordion title\n   */\n  onClick: VoidFunction;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * An unique id that is necessary for the aria roles and properties\n   */\n  ariaId: string;\n  /**\n   * The heading element that will be used by the Subheading component\n   */\n  element?: HeadingElement;\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   */\n  align?: 'start' | 'end';\n}\n\nexport const AccordionHeader = ({\n  children,\n  onClick,\n  isExpanded = false,\n  ariaId,\n  element = 'h2',\n  align = 'end',\n  testId = 'cf-ui-accordion-header',\n  ...rest\n}: AccordionHeaderProps) => {\n  const styles = getAccordionHeaderStyles({ align, isExpanded });\n\n  return (\n    <Subheading {...rest} testId={testId} marginBottom=\"none\" as={element}>\n      <button\n        type=\"button\"\n        aria-expanded={isExpanded}\n        aria-controls={`accordion-panel--${ariaId}`}\n        id={`accordion--${ariaId}`}\n        className={styles.accordionHeader}\n        onClick={onClick}\n      >\n        <ChevronDownTrimmedIcon\n          className={styles.accordionHeaderIcon}\n          variant=\"secondary\"\n        />\n        {children}\n      </button>\n    </Subheading>\n  );\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\ntype StyleProps = {\n  align: 'start' | 'end';\n  isExpanded: boolean;\n};\n\nconst getHeaderStyles = ({ align }: StyleProps) =>\n  cx(\n    css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      border: '0',\n      margin: 0, // remove the default button margin in Safari.\n      padding: tokens.spacingM,\n      backgroundColor: 'transparent',\n      fontFamily: tokens.fontStackPrimary,\n      fontSize: tokens.fontSizeL,\n      fontWeight: tokens.fontWeightDemiBold,\n      lineHeight: tokens.lineHeightL,\n      color: tokens.gray800,\n      width: '100%',\n      minWidth: '9px',\n      cursor: 'pointer',\n      transition: `background-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        box-shadow ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n      '&:focus': {\n        backgroundColor: tokens.gray100,\n        borderRadius: tokens.borderRadiusMedium,\n        boxShadow: tokens.glowPrimary,\n        outline: 'none',\n      },\n      '&:focus:not(:focus-visible)': {\n        backgroundColor: 'transparent',\n        borderRadius: 'unset',\n        boxShadow: 'unset',\n      },\n      '&:focus-visible': {\n        backgroundColor: tokens.gray100,\n        borderRadius: tokens.borderRadiusMedium,\n        boxShadow: tokens.glowPrimary,\n      },\n      '&:hover, &:focus:hover, &:focus-visible:hover': {\n        backgroundColor: tokens.gray100,\n      },\n    }),\n    align === 'end' &&\n      css({\n        flexDirection: 'row-reverse',\n        justifyContent: 'space-between',\n      }),\n  );\n\nconst getIconStyles = ({ align, isExpanded }: StyleProps) =>\n  cx(\n    css({\n      transform: 'rotate(0deg)',\n      transition: `transform ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    }),\n    align === 'end' && css({ marginLeft: tokens.spacingM }),\n    align === 'start' && css({ marginRight: tokens.spacingM }),\n    isExpanded &&\n      css({\n        transform: 'rotate(180deg)',\n      }),\n  );\n\nexport const getAccordionHeaderStyles = (props: StyleProps) => ({\n  accordionHeader: getHeaderStyles(props),\n  accordionHeaderIcon: getIconStyles(props),\n});\n","import React, { FC } from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Collapse } from '@contentful/f36-collapse';\n\nimport { getAccordionPanelStyles } from './AccordionPanel.styles';\n\nexport interface AccordionPanelProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * An unique id that is necessary for the aria roles and properties\n   */\n  ariaId: string;\n}\n\nexport const AccordionPanel: FC<ExpandProps<AccordionPanelProps>> = ({\n  children,\n  isExpanded = false,\n  ariaId,\n  testId = 'cf-ui-accordion-panel',\n  ...otherProps\n}: AccordionPanelProps) => {\n  const styles = getAccordionPanelStyles();\n\n  return (\n    <Collapse\n      data-test-id={testId}\n      aria-labelledby={`accordion--${ariaId}`}\n      isExpanded={isExpanded}\n      {...otherProps}\n    >\n      <div className={styles.accordionPanelContent}>{children}</div>\n    </Collapse>\n  );\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionPanelStyles = () => {\n  return {\n    accordionPanelContent: css({\n      width: '100%',\n      padding: `${tokens.spacingXs} ${tokens.spacingM} ${tokens.spacingM}`,\n    }),\n  };\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionItemStyles = ({\n  className,\n}: {\n  className?: string;\n}) => ({\n  accordionItem: cx(\n    css({\n      padding: '0',\n      margin: '0',\n      borderBottom: `1px solid ${tokens.colorElementMid}`,\n      '&:first-child': {\n        borderTop: `1px solid ${tokens.colorElementMid}`,\n      },\n    }),\n    className,\n  ),\n});\n","import { Accordion as OriginalAccordion } from './Accordion';\nimport { AccordionItem } from './AccordionItem/AccordionItem';\n\ntype CompoundAccordion = typeof OriginalAccordion & {\n  Item: typeof AccordionItem;\n};\n\nexport const Accordion = OriginalAccordion as CompoundAccordion;\nAccordion.Item = AccordionItem;\n"]}