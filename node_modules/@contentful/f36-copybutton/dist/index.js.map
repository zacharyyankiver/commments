{"version":3,"sources":["../src/CopyButton.tsx","../src/CopyButton.styles.ts"],"names":["React","useCallback","useState","CopyIcon","Tooltip","Button","css","getCopyButtonStyles","size","buttonSize","cx","_CopyButton","_a","ref","_b","className","isDisabled","isLoading","label","onBlur","onCopy","testId","tooltipCopiedText","tooltipProps","tooltipText","value","otherProps","__objRest","styles","copied","setCopied","handleClick","__async","error","input","result","handleBlur","event","__spreadProps","__spreadValues","CopyButton"],"mappings":"4xBAAA,OAAOA,GACL,eAAAC,EACA,YAAAC,MAGK,QACP,OAAS,YAAAC,MAAgB,wBAEzB,OAAS,WAAAC,MAAkC,0BAC3C,OAAS,UAAAC,MAAgC,yBCTzC,OAAS,OAAAC,MAAW,UAGb,IAAMC,EAAsB,CAAC,CAClC,KAAAC,CACF,IAAqC,CACnC,IAAMC,EAAaD,IAAS,QAAU,OAAS,OAE/C,MAAO,CACL,OAAQF,EAAI,CACV,OAAQG,EACR,SAAU,OACV,MAAOA,CACT,CAAC,CACH,CACF,EDJA,OAAS,MAAAC,MAAU,UA6CnB,SAASC,EACPC,EAeAC,EACA,CAhBA,IAAAC,EAAAF,EACE,WAAAG,EACA,WAAAC,EAAa,GACb,UAAAC,EAAY,GACZ,MAAAC,EACA,OAAAC,EACA,OAAAC,EACA,KAAAZ,EAAO,SACP,OAAAa,EAAS,oBACT,kBAAAC,EAAoB,4BACpB,aAAAC,EACA,YAAAC,EAAc,oBACd,MAAAC,CArEJ,EAyDEX,EAaKY,EAAAC,EAbLb,EAaK,CAZH,YACA,aACA,YACA,QACA,SACA,SACA,OACA,SACA,oBACA,eACA,cACA,UAKF,IAAMc,EAASrB,EAAoB,CAAE,KAAAC,CAAK,CAAC,EACrC,CAACqB,EAAQC,CAAS,EAAI5B,EAAS,EAAK,EAEpC6B,EAAc9B,EAElB,IAAY+B,EAAA,sBACZ,GAAI,CACF,MAAM,OAAO,UAAU,UAAU,UAAUP,CAAK,CAClD,OAASQ,EAAO,CAGd,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,MAAM,QAAU,OACtB,SAAS,KAAK,YAAYA,CAAK,EAC/BA,EAAM,MAAQT,EACdS,EAAM,MAAM,EACZA,EAAM,OAAO,EACb,IAAMC,EAAS,SAAS,YAAY,MAAM,EAG1C,GAAIA,IAAW,eACb,MAAM,IAAI,MAAM,uBAAwB,CAAE,MAAOA,CAAO,CAAC,EAE3DD,EAAM,OAAO,EAEb,MACF,CAEAd,GAAA,MAAAA,EAASK,GACTK,EAAU,EAAI,CAChB,GAAG,CAACV,EAAQK,CAAK,CAAC,EAEZW,EAAoDC,GAAU,CAC9DR,GACFC,EAAU,EAAK,EAGjBX,GAAA,MAAAA,EAASkB,EACX,EAEA,OACErC,EAAA,cAACI,EAAAkC,EAAAC,EAAA,CACC,QAASV,EAASP,EAAoBE,GAClCD,GAFL,CAGC,WAAYP,IAEZhB,EAAA,cAACK,EAAAiC,EAAAC,EAAA,CACC,aAAYV,EAASP,EAAoBJ,GAAA,KAAAA,EAASM,EAClD,YAAU,YACV,UAAWd,EAAGkB,EAAO,OAAQb,CAAS,EACtC,WAAYE,GAAaD,EACzB,UAAWC,EACX,OAAQmB,EACR,OAAQf,EACR,UACErB,EAAA,cAACG,EAAA,CACC,QAAQ,QACR,KAAMK,IAAS,QAAU,OAAS,QACpC,EAEF,QAAQ,aACJkB,GAfL,CAgBC,QAASK,EACT,IAAKlB,GACP,CACF,CAEJ,CAEAF,EAAY,YAAc,aAEnB,IAAM6B,EAAaxC,EAAM,WAAWW,CAAW","sourcesContent":["import React, {\n  useCallback,\n  useState,\n  type MouseEventHandler,\n  type FocusEventHandler,\n} from 'react';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport type { ExpandProps } from '@contentful/f36-core';\nimport { Tooltip, type TooltipProps } from '@contentful/f36-tooltip';\nimport { Button, type ButtonProps } from '@contentful/f36-button';\nimport { getCopyButtonStyles } from './CopyButton.styles';\nimport { cx } from 'emotion';\n\nexport type CopyButtonProps = Omit<\n  ButtonProps,\n  'endIcon' | 'onCopy' | 'onClick' | 'isDisabled' | 'size' | 'value'\n> & {\n  /**\n   * Function that gets called when the button is clicked\n   */\n  onCopy?: (string) => void;\n  /**\n   * Text to be shown when the button is clicked\n   * @default Copied!\n   */\n  tooltipCopiedText?: string;\n  /**\n   * Text to be shown when button is hovered or focused\n   * @default Copy to clipboard\n   */\n  tooltipText?: string;\n  /**\n   * Props that are passed to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content' | 'children'>;\n  /**\n   * Label to be used on aria-label for the button\n   * @default Copy to clipboard\n   */\n  label?: string;\n  /**\n   * Allows to disable the copy button, when true the tooltip would not be shown\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Allows setting size of the copy button to small\n   * @default medium\n   */\n  size?: 'small' | 'medium';\n  /**\n   * Value that will be copied to clipboard when the button is clicked\n   */\n  value: string;\n};\n\nfunction _CopyButton(\n  {\n    className,\n    isDisabled = false,\n    isLoading = false,\n    label,\n    onBlur,\n    onCopy,\n    size = 'medium',\n    testId = 'cf-ui-copy-button',\n    tooltipCopiedText = 'Value copied to clipboard',\n    tooltipProps,\n    tooltipText = 'Copy to clipboard',\n    value,\n    ...otherProps\n  }: ExpandProps<CopyButtonProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const styles = getCopyButtonStyles({ size });\n  const [copied, setCopied] = useState(false);\n\n  const handleClick = useCallback<\n    MouseEventHandler<HTMLButtonElement>\n  >(async () => {\n    try {\n      await window.navigator.clipboard.writeText(value);\n    } catch (error) {\n      // Chrome requires specific permissions on iframes using the async clipboard\n      // API. We can't control that so we fall back to this\n      const input = document.createElement('input');\n      input.style.display = 'none';\n      document.body.appendChild(input);\n      input.value = value;\n      input.focus();\n      input.select();\n      const result = document.execCommand('copy');\n\n      // @ts-expect-error -- The return type of `execCommand` can also be string\n      if (result === 'unsuccessful') {\n        throw new Error('Unable to copy value', { cause: result });\n      }\n      input.remove();\n\n      return;\n    }\n\n    onCopy?.(value);\n    setCopied(true);\n  }, [onCopy, value]);\n\n  const handleBlur: FocusEventHandler<HTMLButtonElement> = (event) => {\n    if (copied) {\n      setCopied(false);\n    }\n\n    onBlur?.(event);\n  };\n\n  return (\n    <Tooltip\n      content={copied ? tooltipCopiedText : tooltipText}\n      {...tooltipProps}\n      isDisabled={isDisabled}\n    >\n      <Button\n        aria-label={copied ? tooltipCopiedText : label ?? tooltipText}\n        aria-live=\"assertive\"\n        className={cx(styles.button, className)}\n        isDisabled={isLoading || isDisabled}\n        isLoading={isLoading}\n        onBlur={handleBlur}\n        testId={testId}\n        startIcon={\n          <CopyIcon\n            variant=\"muted\"\n            size={size === 'small' ? 'tiny' : 'small'}\n          />\n        }\n        variant=\"secondary\"\n        {...otherProps}\n        onClick={handleClick}\n        ref={ref}\n      />\n    </Tooltip>\n  );\n}\n\n_CopyButton.displayName = 'CopyButton';\n\nexport const CopyButton = React.forwardRef(_CopyButton);\n","import { css } from 'emotion';\nimport { CopyButtonProps } from './CopyButton';\n\nexport const getCopyButtonStyles = ({\n  size,\n}: Pick<CopyButtonProps, 'size'>) => {\n  const buttonSize = size === 'small' ? '32px' : '40px';\n\n  return {\n    button: css({\n      height: buttonSize,\n      minWidth: 'auto',\n      width: buttonSize,\n    }),\n  };\n};\n"]}