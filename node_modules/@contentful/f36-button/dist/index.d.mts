import React$1, { ReactNode } from 'react';
import { CommonProps, PolymorphicProps, PolymorphicComponent, ExpandProps } from '@contentful/f36-core';
import { SpacingTokens } from '@contentful/f36-tokens';
import { WithEnhancedContent, TooltipInternalProps } from '@contentful/f36-tooltip';

declare type ButtonGroupVariants = 'spaced' | 'merged' | 'collapsed';
declare type ButtonGroupSpacing = SpacingTokens;
interface BaseButtonGroupProps extends CommonProps {
    /**
     * Determines how the Button Group will display the buttons
     * @default merged
     * Note that `collapsed` is a synonym of `merged`
     */
    variant?: ButtonGroupVariants;
    /**
     * Determines if the divider should be rendered between merged buttons
     * @default false
     */
    withDivider?: boolean;
    /**
     * Sets the spacing of the buttons if variant is separate.
     * @default spacingS
     */
    spacing?: ButtonGroupSpacing;
    children: ReactNode;
}
interface SpacedButtonGroupProps extends BaseButtonGroupProps {
    variant: 'spaced';
    withDivider?: never;
}
interface MergedButtonGroupProps extends BaseButtonGroupProps {
    variant?: 'merged';
    spacing?: never;
}
/**
 * @deprecated should be removed in v5
 */
interface CollapsedButtonGroupProps extends BaseButtonGroupProps {
    variant?: 'collapsed';
    spacing?: never;
}
declare type ButtonGroupProps = SpacedButtonGroupProps | MergedButtonGroupProps | CollapsedButtonGroupProps;

declare const ButtonGroup: React$1.ForwardRefExoticComponent<ButtonGroupProps & React$1.RefAttributes<HTMLDivElement>>;

declare type ButtonSize = 'small' | 'medium' | 'large';
declare type ButtonVariant = 'negative' | 'positive' | 'primary' | 'secondary' | 'transparent';
interface ButtonInternalProps extends CommonProps {
    children?: React.ReactNode;
    /**
     * Determines style variation of Button component
     * @default secondary
     */
    variant?: ButtonVariant;
    /**
     * Determines size variation of Button component
     * @default medium
     */
    size?: ButtonSize;
    /**
     * Applies active styles
     * @default false
     */
    isActive?: boolean;
    /**
     * Disabled interaction and applies disabled styles
     * @default false
     */
    isDisabled?: boolean;
    /**
     * Expects any of the icon components. Renders the icon aligned to the start
     */
    startIcon?: React.ReactElement;
    /**
     * Expects any of the icon components. Renders the icon aligned to the end
     */
    endIcon?: React.ReactElement;
    /**
     * Adds loading indicator icon and disables interactions
     */
    isLoading?: boolean;
    /**
     * Forces button to take 100% of the container
     */
    isFullWidth?: boolean;
    /**
     * The element used for the root node.
     * @default button
     */
    as?: 'a' | 'button';
}

interface ToggleButtonProps extends CommonProps {
    /**
     * Applies active styles
     * @default false
     */
    isActive?: boolean;
    /**
     * Disabled interaction and applies disabled styles
     * @default false
     */
    isDisabled?: boolean;
    /**
     * Expects any of the icon components
     */
    icon?: React$1.ReactElement;
    /**
     * Function triggered when the toggle button is clicked.
     */
    onToggle: () => void;
    /**
     * Determines size variation of Button component
     * @default medium
     */
    size?: ButtonSize;
    /**
     * Aria label is required when using icon only
     */
    'aria-label'?: string;
    children?: React$1.ReactNode;
}
declare const ToggleButton: React$1.ForwardRefExoticComponent<ToggleButtonProps & React$1.RefAttributes<unknown>>;

declare const BUTTON_DEFAULT_TAG = "button";
declare type ButtonProps<E extends React$1.ElementType = typeof BUTTON_DEFAULT_TAG> = PolymorphicProps<ButtonInternalProps, E, 'disabled'>;
/**
 * @description: Buttons communicate the action that will occur when the user clicks it
 */
declare const Button: PolymorphicComponent<ExpandProps<ButtonInternalProps>, typeof BUTTON_DEFAULT_TAG, 'disabled'>;

declare type WithTooltipOrNot = {
    /**
     * Wrap the IconButton with a Tooltip to provide users with additional context about its purpose when they hover over it
     */
    withTooltip?: boolean;
    /**
     * The tooltip properties to be passed to the Tooltip component wrapping the IconButton
     */
    tooltipProps?: CommonProps & WithEnhancedContent & Omit<TooltipInternalProps, 'children'>;
} | {
    withTooltip?: false;
    tooltipProps?: never;
};
interface IconButtonInternalProps extends Omit<ButtonInternalProps, 'startIcon' | 'endIcon' | 'children' | 'size'> {
    /**
     * Expects any of the icon components
     */
    icon: React$1.ReactElement;
    /**
     * Aria label is required when using icon only
     */
    'aria-label': string;
    /**
     * @deprecated Use <Button /> component instead
     */
    children?: ButtonInternalProps['children'];
    /**
     * Determines size variation of IconButton component
     * Note: 'large' is deprecated
     * */
    size?: ButtonInternalProps['size'];
}
declare const ICON_BUTTON_DEFAULT_TAG = "button";
declare type ExtendedIconButtonProps = IconButtonInternalProps & WithTooltipOrNot;
declare type IconButtonProps<E extends React$1.ElementType = typeof ICON_BUTTON_DEFAULT_TAG> = PolymorphicProps<ExtendedIconButtonProps, E, 'disabled'>;
declare const IconButton: PolymorphicComponent<ExpandProps<ExtendedIconButtonProps>, typeof ICON_BUTTON_DEFAULT_TAG, 'disabled'>;

export { Button, ButtonGroup, ButtonGroupProps, ButtonProps, IconButton, IconButtonProps, ToggleButton, ToggleButtonProps };
