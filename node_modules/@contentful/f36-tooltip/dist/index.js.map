{"version":3,"sources":["../src/Tooltip.tsx","../src/Tooltip.styles.ts"],"names":["React","useEffect","useState","useRef","usePopper","cx","tokens","Portal","Box","useId","css","tooltipMargin","tooltipChevronSize","getStyles","Tooltip","_a","_b","children","className","HtmlTag","content","label","id","isVisible","hideDelay","onBlur","onFocus","onMouseLeave","onMouseOver","onKeyDown","showDelay","targetWrapperClassName","maxWidth","testId","placement","usePortal","isDisabled","otherProps","__objRest","styles","show","setShow","tooltipId","elementRef","popperRef","arrowRef","setArrowRef","popperStyles","attributes","update","__async","showTimeoutRef","hideTimeoutRef","clearTimeouts","showPopover","hidePopover","contentMaxWidth","contentStyles","__spreadValues","tooltip","evt","child"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useRef,\n  type MouseEvent,\n  type FocusEvent,\n  type CSSProperties,\n  ReactElement,\n} from 'react';\nimport { usePopper } from 'react-popper';\nimport type { Placement } from '@popperjs/core';\nimport { cx } from 'emotion';\nimport type * as CSS from 'csstype';\nimport tokens from '@contentful/f36-tokens';\nimport { Portal } from '@contentful/f36-utils';\nimport { Box, useId, type CommonProps } from '@contentful/f36-core';\n\nimport { getStyles } from './Tooltip.styles';\n\nexport type TooltipPlacement = Placement;\n\nexport type WithEnhancedContent = {\n  /**\n   * Content of the tooltip\n   */\n  content?: ReactElement | string;\n  /**\n   * Accessible label property, only required when using ReactElement as content\n   */\n  label?: string;\n};\n\nexport type TooltipInternalProps = {\n  /**\n   * Child nodes to be rendered in the component and that will show the tooltip when they are hovered\n   */\n  children: React.ReactNode;\n  /**\n   * HTML element used to wrap the target of the tooltip\n   */\n  as?: React.ElementType;\n  /**\n   * A unique id of the tooltip\n   */\n  id?: string;\n  /**\n   * It controls the initial visibility of the tooltip\n   */\n  isVisible?: boolean;\n  /**\n   * It sets a max-width for the tooltip\n   */\n  maxWidth?: number | CSS.Property.MaxWidth;\n  /**\n   * Set a delay period in milliseconds before hiding the tooltip\n   */\n  hideDelay?: number;\n  /**\n   * Function that will be called when target gets blurred\n   */\n  onBlur?: (evt: FocusEvent) => void;\n  /**\n   * Function that will be called when target gets focused\n   */\n  onFocus?: (evt: FocusEvent) => void;\n  /**\n   * Function that will be called when the user move the mouse out of the target\n   */\n  onMouseLeave?: (evt: MouseEvent) => void;\n  /**\n   * Function that will be called when the user move the mouse over of the target\n   */\n  onMouseOver?: (evt: MouseEvent) => void;\n  /**\n   * Function that will be called when the user uses a keyboard key on the target\n   */\n  onKeyDown?: (evt: KeyboardEvent) => void;\n\n  /**\n   * It sets the \"preferred\" position of the tooltip\n   */\n  placement?: TooltipPlacement;\n  /**\n   * Set a delay period in milliseconds before showing the tooltip\n   */\n  showDelay?: number;\n  /**\n   * Class names to be appended to the className prop of the tooltipâ€™s target\n   */\n  targetWrapperClassName?: string;\n  /**\n   * Boolean to control whether or not to render the tooltip in a React Portal.\n   * Rendering content inside a Portal allows the tooltip to escape the bounds\n   * of its parent while still being positioned correctly. Using a Portal is\n   * necessary if an ancestor of the tooltip hides overflow.\n   *\n   * Defaults to `false`\n   */\n  usePortal?: boolean;\n  /**\n   * Prevents showing the tooltip\n   * @default false\n   */\n  isDisabled?: boolean;\n};\n\nexport interface TooltipProps\n  extends CommonProps,\n    TooltipInternalProps,\n    WithEnhancedContent {}\n\nexport const Tooltip = ({\n  children,\n  className,\n  as: HtmlTag = 'span',\n  content,\n  label,\n  id,\n  isVisible = false,\n  hideDelay = 0,\n  onBlur,\n  onFocus,\n  onMouseLeave,\n  onMouseOver,\n  onKeyDown,\n  showDelay = 375,\n  targetWrapperClassName,\n  maxWidth = 360,\n  testId = 'cf-ui-tooltip',\n  placement = 'auto',\n  usePortal = false,\n  isDisabled = false,\n  ...otherProps\n}: TooltipProps) => {\n  const styles = getStyles();\n  const [show, setShow] = useState(isVisible);\n  const tooltipId = useId(id, 'tooltip');\n  const elementRef = useRef(null);\n  const popperRef = useRef(null);\n  const [arrowRef, setArrowRef] = useState<HTMLSpanElement | null>(null);\n  const {\n    styles: popperStyles,\n    attributes,\n    update,\n  } = usePopper(elementRef.current, popperRef.current, {\n    placement: placement,\n    modifiers: [\n      {\n        name: 'arrow',\n        options: {\n          element: arrowRef,\n          padding: parseFloat(tokens.borderRadiusSmall),\n        },\n      },\n      {\n        name: 'offset',\n        options: {\n          offset: [0, 10],\n        },\n      },\n    ],\n  });\n\n  // necessary to update tooltip position in case the content is being updated\n  useEffect(() => {\n    const updatePosition = async () => {\n      if (update !== null) {\n        await update();\n      }\n    };\n    updatePosition();\n  }, [content, update]);\n\n  const showTimeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const hideTimeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const clearTimeouts = () => {\n    clearTimeout(showTimeoutRef.current);\n    clearTimeout(hideTimeoutRef.current);\n  };\n  useEffect(() => clearTimeouts, []);\n\n  const showPopover = () => {\n    clearTimeouts();\n    showTimeoutRef.current = setTimeout(() => setShow(true), showDelay);\n  };\n  const hidePopover = () => {\n    clearTimeouts();\n    hideTimeoutRef.current = setTimeout(() => setShow(false), hideDelay);\n  };\n\n  const contentMaxWidth =\n    typeof maxWidth === 'string' ? maxWidth : `${maxWidth}px`;\n\n  const contentStyles: CSSProperties = {\n    zIndex: tokens.zIndexTooltip,\n    maxWidth: contentMaxWidth,\n    ...popperStyles.popper,\n  };\n\n  if (!content || isDisabled) {\n    return (\n      <Box as={HtmlTag} className={targetWrapperClassName}>\n        {children}\n      </Box>\n    );\n  }\n\n  const tooltip = (\n    <Box\n      as=\"span\"\n      id={tooltipId}\n      ref={popperRef}\n      role=\"tooltip\"\n      style={contentStyles}\n      className={cx(styles.tooltip, className)}\n      testId={testId}\n      onMouseEnter={() => {\n        clearTimeouts();\n        setShow(true);\n      }}\n      onMouseLeave={() => {\n        clearTimeouts();\n        setShow(false);\n      }}\n      {...attributes.popper}\n    >\n      <span aria-label={label}>{content}</span>\n      <span\n        className={styles.tooltipArrow}\n        data-placement={\n          attributes.popper && attributes.popper['data-popper-placement']\n        }\n        ref={setArrowRef}\n        style={popperStyles.arrow}\n      />\n    </Box>\n  );\n\n  return (\n    <>\n      {show ? <>{usePortal ? <Portal>{tooltip}</Portal> : tooltip}</> : null}\n      <Box\n        as={HtmlTag}\n        ref={elementRef}\n        className={cx(styles.tooltipContainer, targetWrapperClassName)}\n        onMouseEnter={(evt: MouseEvent) => {\n          showPopover();\n          if (onMouseOver) onMouseOver(evt);\n        }}\n        onMouseLeave={(evt: MouseEvent) => {\n          hidePopover();\n          if (onMouseLeave) onMouseLeave(evt);\n        }}\n        onFocus={(evt: FocusEvent) => {\n          showPopover();\n          if (onFocus) onFocus(evt);\n        }}\n        onBlur={(evt: FocusEvent) => {\n          hidePopover();\n          if (onBlur) onBlur(evt);\n        }}\n        onKeyDown={(evt: KeyboardEvent) => {\n          if (evt.key === 'Escape') {\n            hidePopover();\n          }\n          if (onKeyDown) onKeyDown(evt);\n        }}\n        {...otherProps}\n      >\n        {React.Children.map<React.ReactNode, React.ReactNode>(\n          children,\n          (child) => {\n            if (React.isValidElement(child)) {\n              return React.cloneElement(child, {\n                'aria-describedby': tooltipId,\n              });\n            }\n          },\n        )}\n      </Box>\n    </>\n  );\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nconst tooltipMargin = `calc(-1 * ((1rem * (10 / ${tokens.fontBaseDefault})) / 2))`;\nconst tooltipChevronSize = `calc(1rem * (10 / ${tokens.fontBaseDefault}))`;\n\nexport function getStyles() {\n  return {\n    tooltipTargetWrapper: css({\n      display: 'inline-block',\n      position: 'relative',\n    }),\n    tooltip: css({\n      background: tokens.gray900,\n      fontFamily: tokens.fontStackPrimary,\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightNormal,\n      fontStyle: 'normal',\n      textDecoration: 'none',\n      color: tokens.colorWhite,\n      textAlign: 'center',\n      lineHeight: tokens.lineHeightM,\n      padding: `${tokens.spacingXs} calc(1rem * (10 / ${tokens.fontBaseDefault}))`,\n      borderRadius: tokens.borderRadiusMedium,\n      whiteSpace: 'normal',\n      textTransform: 'initial',\n      letterSpacing: 'initial',\n    }),\n    tooltipHidden: css({\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      zIndex: tokens.zIndexNegative,\n    }),\n    tooltipContainer: css({\n      '& > button[disabled]': { pointerEvents: 'none' },\n    }),\n    tooltipArrow: css({\n      position: 'absolute',\n      '&[data-placement*=\"top\"]': {\n        bottom: 0,\n        left: 0,\n        marginBottom: tooltipMargin,\n      },\n      '&[data-placement*=\"right\"]': {\n        left: 0,\n        marginLeft: tooltipMargin,\n      },\n      '&[data-placement*=\"bottom\"]': {\n        left: 0,\n        top: 0,\n        marginTop: tooltipMargin,\n      },\n      '&[data-placement*=\"left\"]': {\n        right: 0,\n        marginRight: tooltipMargin,\n      },\n      '&::before': {\n        content: '\"\"',\n        display: 'block',\n        height: tooltipChevronSize,\n        width: tooltipChevronSize,\n        backgroundColor: tokens.gray900,\n        transform: 'rotate3d(0, 0, 1, 45deg)',\n        zIndex: tokens.zIndexNegative,\n      },\n    }),\n  };\n}\n"]}