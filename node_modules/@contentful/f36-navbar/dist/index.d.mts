import { MenuListProps, MenuProps, MenuItemProps, MenuDivider, MenuSectionTitle } from '@contentful/f36-menu';
import { CommonProps, PolymorphicComponent, ExpandProps } from '@contentful/f36-core';
import React from 'react';
import { IconProps } from '@contentful/f36-icons';

declare type NavbarOwnProps = CommonProps & {
    children?: React.ReactNode;
    account?: React.ReactNode;
    search?: React.ReactNode;
    switcher?: React.ReactNode;
    help?: React.ReactNode;
    badge?: React.ReactNode;
    /**
     * Items that will be rendered on the bottom-right of the navbar.
     * Useful for separating other navigation items from main ones, (e.g. separating "Settings" from all other navigation items).
     */
    bottomRightItems?: React.ReactNode;
    /**
     * Items that will be rendered on the top-right of the navbar.
     * Useful for providing additional context or actions to the user (e.g. a Feedback form link).
     */
    topRightItems?: React.ReactNode;
    /**
     * Defines the max-width of the content inside the navbar.
     * @default '100%'
     */
    contentMaxWidth?: string;
};
declare type NavbarHTMLElementProps = Pick<React.ComponentPropsWithoutRef<'div'>, 'id'>;
declare type NavbarProps = NavbarHTMLElementProps & NavbarOwnProps;
declare const Navbar$1: React.ForwardRefExoticComponent<NavbarHTMLElementProps & CommonProps & {
    children?: React.ReactNode;
    account?: React.ReactNode;
    search?: React.ReactNode;
    switcher?: React.ReactNode;
    help?: React.ReactNode;
    badge?: React.ReactNode;
    /**
     * Items that will be rendered on the bottom-right of the navbar.
     * Useful for separating other navigation items from main ones, (e.g. separating "Settings" from all other navigation items).
     */
    bottomRightItems?: React.ReactNode;
    /**
     * Items that will be rendered on the top-right of the navbar.
     * Useful for providing additional context or actions to the user (e.g. a Feedback form link).
     */
    topRightItems?: React.ReactNode;
    /**
     * Defines the max-width of the content inside the navbar.
     * @default '100%'
     */
    contentMaxWidth?: string;
} & React.RefAttributes<HTMLElement>>;

declare const NavbarAccount: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>>, never>, "children" | keyof CommonProps | "username" | "avatar" | "initials" | "hasNotification" | "notificationVariant"> & CommonProps & {
    children: React.ReactNode;
    username: string;
    avatar?: string;
    initials?: string;
    hasNotification?: boolean;
    /**
     * @default 'warning'
     */
    notificationVariant?: 'warning' | 'negative' | 'info';
} & React.RefAttributes<HTMLButtonElement>>;

declare function NavbarAccountSkeleton({ ariaLabel }: {
    ariaLabel?: string;
}): JSX.Element;

declare type NavbarMenuProps = {
    trigger: React.ReactNode;
    children?: React.ReactNode;
} & Pick<MenuListProps, 'testId'> & Pick<MenuProps, 'onOpen' | 'onClose'>;

declare type NavbarItemIconProps = {
    icon: React.ReactElement<IconProps>;
} & Pick<IconProps, 'variant'>;

declare const NAVBAR_ITEM_DEFAULT_TAG = "button";
declare type NavbarItemTriggerProps = CommonProps & {
    title: string;
    icon?: NavbarItemIconProps['icon'];
    isActive?: boolean;
    as?: React.ElementType;
};
declare type NavbarItemAsMenuProps = NavbarItemTriggerProps & Pick<NavbarMenuProps, 'onOpen' | 'onClose'> & {
    children: React.ReactNode;
};
declare type NavbarItemAsItemProps = NavbarItemTriggerProps & {
    children?: never;
    onOpen?: never;
    onClose?: never;
};
declare type NavbarItemOwnProps = NavbarItemAsItemProps | NavbarItemAsMenuProps;
declare const NavbarItem: PolymorphicComponent<ExpandProps<NavbarItemOwnProps>, typeof NAVBAR_ITEM_DEFAULT_TAG>;

declare const NavbarItemSkeleton: ({ estimatedWidth, }: {
    estimatedWidth: number;
}) => JSX.Element;

declare const NAVBAR_MENU_ITEM_DEFAULT_TAG = "button";
declare type NavbarMenuItemOwnProps = {
    children?: null;
    title: string;
    icon?: NavbarItemIconProps['icon'];
    as?: React.ElementType;
} & Omit<MenuItemProps, 'children' | 'as'>;
declare const NavbarMenuItem: PolymorphicComponent<ExpandProps<NavbarMenuItemOwnProps>, typeof NAVBAR_MENU_ITEM_DEFAULT_TAG>;

declare const NavbarMenuItemSkeleton: ({ ariaLabel, }: {
    ariaLabel?: string;
}) => JSX.Element;

declare const NavbarSwitcher: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>>, never>, "children" | keyof CommonProps | "logo"> & CommonProps & {
    children?: React.ReactNode;
    /**
     * Will be displayed instead of the default Contentful logo
     */
    logo?: React.ReactNode;
} & React.RefAttributes<HTMLButtonElement>>;

declare const NavbarSwitcherSkeleton: ({ estimatedWidth, }: {
    estimatedWidth: number;
}) => JSX.Element;

declare const NavbarSearch: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>>, never>, keyof CommonProps> & CommonProps & React.RefAttributes<HTMLButtonElement>>;

declare const NavbarSwitcherItem: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "key" | keyof React.LiHTMLAttributes<HTMLLIElement>>, never>, "children" | keyof CommonProps | "isCircle" | "envVariant" | "isAlias"> & CommonProps & {
    children?: React.ReactNode;
    isCircle?: boolean;
    envVariant?: 'master' | 'non-master';
    isAlias?: boolean;
} & React.RefAttributes<HTMLLIElement>>;

declare const NavbarHelp: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>>, never>, "children" | keyof CommonProps> & CommonProps & {
    children: React.ReactNode;
} & React.RefAttributes<HTMLButtonElement>>;

declare const NAVBAR_BADGE_DEFAULT_TAG$1 = "div";
declare type NavbarBadgeOwnProps = CommonProps & {
    children?: React.ReactNode;
    as?: React.ElementType;
};
declare const NavbarBadge: PolymorphicComponent<ExpandProps<NavbarBadgeOwnProps>, typeof NAVBAR_BADGE_DEFAULT_TAG$1>;

declare const NAVBAR_BADGE_DEFAULT_TAG = "button";
declare type NavbarTopbarItemOwnProps = CommonProps & {
    children?: React.ReactNode;
};
declare const NavbarTopbarItem: PolymorphicComponent<ExpandProps<NavbarTopbarItemOwnProps>, typeof NAVBAR_BADGE_DEFAULT_TAG>;

declare type CompoundNavbar = typeof Navbar$1 & {
    Item: typeof NavbarItem;
    ItemSkeleton: typeof NavbarItemSkeleton;
    MenuItem: typeof NavbarMenuItem;
    MenuItemSkeleton: typeof NavbarMenuItemSkeleton;
    MenuDivider: typeof MenuDivider;
    MenuSectionTitle: typeof MenuSectionTitle;
    Switcher: typeof NavbarSwitcher;
    SwitcherSkeleton: typeof NavbarSwitcherSkeleton;
    SwitcherItem: typeof NavbarSwitcherItem;
    Search: typeof NavbarSearch;
    Help: typeof NavbarHelp;
    Account: typeof NavbarAccount;
    AccountSkeleton: typeof NavbarAccountSkeleton;
    Badge: typeof NavbarBadge;
    TopbarItem: typeof NavbarTopbarItem;
};
declare const Navbar: CompoundNavbar;

declare const getNavbarItemActiveStyles: () => string;

export { Navbar, NavbarProps, getNavbarItemActiveStyles };
