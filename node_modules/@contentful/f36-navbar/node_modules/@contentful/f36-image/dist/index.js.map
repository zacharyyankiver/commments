{"version":3,"sources":["../src/Image.tsx","../src/Image.styles.ts"],"names":["React","forwardRef","cx","mergeRefs","useImageLoaded","Skeleton","css","getImageStyles","height","width","isLoaded","_Image","_a","forwardedRef","_b","className","src","testId","otherProps","__objRest","styles","imageRef","isImageLoaded","onLoad","__spreadProps","__spreadValues","Image"],"mappings":"+kBAAA,OAAOA,GAAmC,cAAAC,MAA4B,QACtE,OAAS,MAAAC,MAAU,UACnB,OAEE,aAAAC,EACA,kBAAAC,MACK,uBACP,OAAS,YAAAC,MAAgB,2BCPzB,OAAS,OAAAC,MAAW,UAGb,IAAMC,EAAiB,CAAC,CAC7B,OAAAC,EACA,MAAAC,CACF,KACS,CACL,MAAO,CAAC,CAAE,SAAAC,CAAS,IACjBJ,EAAI,CACF,QAASI,EAAW,QAAU,OAC9B,OAAQA,EAAWF,EAAS,EAC5B,QAASE,EAAW,EAAI,EACxB,MAAOA,EAAWD,EAAQ,CAC5B,CAAC,EACH,KAAMH,EAAI,CACR,OAAAE,EACA,MAAAC,CACF,CAAC,CACH,GDQF,SAASE,EACPC,EAQAC,EACA,CATA,IAAAC,EAAAF,EACE,WAAAG,EACA,OAAAP,EACA,IAAAQ,EACA,OAAAC,EAAS,cACT,MAAAR,CAjCJ,EA4BEK,EAMKI,EAAAC,EANLL,EAMK,CALH,YACA,SACA,MACA,SACA,UAKF,IAAMM,EAASb,EAAe,CAAE,OAAAC,EAAQ,MAAAC,CAAM,CAAC,EACzC,CAAE,IAAKY,EAAU,OAAQC,EAAe,OAAAC,CAAO,EAAInB,EAAe,EAClEM,EAAW,GAAQM,GAAOM,GAEhC,OACEtB,EAAA,cAAC,OAAI,UAAWoB,EAAO,MAErBpB,EAAA,cAAC,MAAAwB,EAAAC,EAAA,GACKP,GADL,CAEC,UAAWhB,EAAGkB,EAAO,MAAM,CAAE,SAAAV,CAAS,CAAC,EAAGK,CAAS,EACnD,eAAcE,EACd,OAAQM,EACR,IAAKpB,EAAUkB,EAAUR,CAAY,EACrC,IAAKG,GACP,EACC,CAACN,GACAV,EAAA,cAACK,EAAS,UAAT,KACCL,EAAA,cAACK,EAAS,MAAT,CAAe,OAAQG,EAAQ,MAAOC,EAAO,CAChD,CAEJ,CAEJ,CAEO,IAAMiB,EAAQzB,EAAWU,CAAM","sourcesContent":["import React, { ComponentPropsWithoutRef, forwardRef, type Ref } from 'react';\nimport { cx } from 'emotion';\nimport {\n  type CommonProps,\n  mergeRefs,\n  useImageLoaded,\n} from '@contentful/f36-core';\nimport { Skeleton } from '@contentful/f36-skeleton';\nimport { getImageStyles } from './Image.styles';\n\nexport interface ImageProps\n  extends CommonProps,\n    Omit<ComponentPropsWithoutRef<'img'>, 'onLoad'> {\n  /**\n   * Alt attribute to pass to the image element\n   */\n  alt: string;\n  /**\n   * Height of the final image once loaded\n   */\n  height: string;\n  /**\n   * Width of the final image once loaded\n   */\n  width: string;\n}\n\nfunction _Image(\n  {\n    className,\n    height,\n    src,\n    testId = 'cf-ui-image',\n    width,\n    ...otherProps\n  }: ImageProps,\n  forwardedRef: Ref<HTMLImageElement>,\n) {\n  const styles = getImageStyles({ height, width });\n  const { ref: imageRef, loaded: isImageLoaded, onLoad } = useImageLoaded();\n  const isLoaded = Boolean(src && isImageLoaded);\n\n  return (\n    <div className={styles.root}>\n      {/* eslint-disable-next-line jsx-a11y/alt-text -- `alt` should be provided by the user */}\n      <img\n        {...otherProps}\n        className={cx(styles.image({ isLoaded }), className)}\n        data-test-id={testId}\n        onLoad={onLoad}\n        ref={mergeRefs(imageRef, forwardedRef)}\n        src={src}\n      />\n      {!isLoaded && (\n        <Skeleton.Container>\n          <Skeleton.Image height={height} width={width} />\n        </Skeleton.Container>\n      )}\n    </div>\n  );\n}\n\nexport const Image = forwardRef(_Image);\n","import { css } from 'emotion';\nimport type { ImageProps } from './Image';\n\nexport const getImageStyles = ({\n  height,\n  width,\n}: Pick<ImageProps, 'height' | 'width'>) => {\n  return {\n    image: ({ isLoaded }: { isLoaded: boolean }) =>\n      css({\n        display: isLoaded ? 'block' : 'none',\n        height: isLoaded ? height : 0,\n        opacity: isLoaded ? 1 : 0,\n        width: isLoaded ? width : 0,\n      }),\n    root: css({\n      height,\n      width,\n    }),\n  };\n};\n"]}