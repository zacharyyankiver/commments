"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var index_1 = require("./index");
var mockedSdk = 'mocked-sdk';
jest.mock('react', function () {
    return __assign(__assign({}, jest.requireActual('react')), { useContext: function () { return ({ sdk: mockedSdk }); } });
});
jest.mock('./SDKProvider', function () { return ({
    SDKContext: {},
}); });
describe('useSDK', function () {
    test('should return the sdk from the context', function () {
        var result = (0, react_hooks_1.renderHook)(function () { return (0, index_1.useSDK)(); }).result;
        expect(result.current).toBe('mocked-sdk');
    });
    test('should throw when the sdk is not in context', function () {
        mockedSdk = undefined;
        var result = (0, react_hooks_1.renderHook)(function () { return (0, index_1.useSDK)(); }).result;
        expect(function () {
            expect(result.current).not.toBe(undefined);
        }).toThrow();
    });
});
