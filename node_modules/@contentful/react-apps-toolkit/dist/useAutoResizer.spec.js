"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var useAutoResizer_1 = require("./useAutoResizer");
var useSDK_1 = require("./useSDK");
var mockSDK = {
    window: {
        startAutoResizer: jest.fn(),
        stopAutoResizer: jest.fn(),
    },
};
jest.mock('./useSDK', function () { return (__assign(__assign({}, jest.requireActual('./useSDK')), { useSDK: jest.fn() })); });
var useSDKMock = useSDK_1.useSDK;
beforeEach(function () {
    jest.resetAllMocks();
    mockSDK.window.startAutoResizer.mockImplementationOnce(function () { return function () { }; });
    mockSDK.window.stopAutoResizer.mockImplementationOnce(function () { return function () { }; });
});
describe('useAutoResizer', function () {
    beforeEach(function () {
        // @ts-expect-error
        useSDKMock.mockImplementation(function () { return mockSDK; });
    });
    it('should invoke the field SDK autoResizer start and stop methods', function () {
        var hook = (0, react_hooks_1.renderHook)(useAutoResizer_1.useAutoResizer);
        expect(mockSDK.window.startAutoResizer).toBeCalledTimes(1);
        expect(mockSDK.window.stopAutoResizer).toBeCalledTimes(0);
        hook.unmount();
        expect(mockSDK.window.startAutoResizer).toBeCalledTimes(1);
        expect(mockSDK.window.stopAutoResizer).toBeCalledTimes(1);
    });
    it('should accept sdk.window.startAutoResizer parameters', function () {
        var params = { absoluteElements: true };
        var hook = (0, react_hooks_1.renderHook)(function () { return (0, useAutoResizer_1.useAutoResizer)(params); });
        expect(mockSDK.window.startAutoResizer).toHaveBeenCalledWith(params);
        hook.unmount();
    });
});
