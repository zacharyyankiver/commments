"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("@testing-library/react");
var SDKProvider_1 = require("./SDKProvider");
var app_sdk_1 = require("@contentful/app-sdk");
jest.useFakeTimers();
jest.mock('@contentful/app-sdk', function () { return ({
    init: jest.fn(),
}); });
describe('SDKProvider', function () {
    var consoleWarnMock;
    beforeEach(function () {
        // @ts-ignore
        app_sdk_1.init.mockImplementation(function (callback) {
            callback({});
        });
        consoleWarnMock = jest.spyOn(console, 'warn').mockImplementation();
    });
    afterEach(function () {
        consoleWarnMock === null || consoleWarnMock === void 0 ? void 0 : consoleWarnMock.mockRestore();
    });
    it('renders its children when sdk the init returns the sdk', function () {
        var getByText = (0, react_1.render)((0, jsx_runtime_1.jsx)(SDKProvider_1.SDKProvider, { children: (0, jsx_runtime_1.jsx)("div", { children: "children" }) })).getByText;
        expect(getByText('children')).toBeTruthy();
    });
    it('calls console warn after timeout if callback is not returning ', function () {
        // @ts-ignore
        app_sdk_1.init.mockImplementation(function () { });
        (0, react_1.render)((0, jsx_runtime_1.jsx)(SDKProvider_1.SDKProvider, { children: (0, jsx_runtime_1.jsx)("div", { children: "children" }) }));
        jest.runAllTimers();
        expect(consoleWarnMock).toHaveBeenCalled();
    });
});
