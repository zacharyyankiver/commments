"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var useFieldValue_1 = require("./useFieldValue");
var useSDK_1 = require("./useSDK");
var mockSDK = {
    field: {
        id: 'fieldId',
    },
    locales: {
        default: 'defaultLocale',
    },
    entry: {
        fields: {
            fieldId: {
                getValue: function (locale) { return "fieldId ".concat(locale, " value"); },
                onValueChanged: jest.fn(),
                setValue: jest.fn(),
            },
            otherFieldId: {
                getValue: function (locale) { return "otherFieldId ".concat(locale, " value"); },
                onValueChanged: jest.fn(),
                setValue: jest.fn(),
            },
        },
    },
};
jest.mock('./useSDK', function () { return (__assign(__assign({}, jest.requireActual('./useSDK')), { useSDK: jest.fn() })); });
var useSDKMock = useSDK_1.useSDK;
beforeEach(function () {
    jest.resetAllMocks();
    mockSDK.entry.fields.fieldId.onValueChanged.mockImplementation(function () { return function () { }; });
    mockSDK.entry.fields.fieldId.setValue.mockImplementation(function () { return Promise.resolve('return value'); });
    mockSDK.entry.fields.otherFieldId.onValueChanged.mockImplementation(function () { return function () { }; });
    mockSDK.entry.fields.otherFieldId.setValue.mockImplementation(function () {
        return Promise.resolve('other return value');
    });
});
describe('useFieldValue', function () {
    describe('throws error', function () {
        it('when rendered in wrong location', function () {
            useSDKMock.mockImplementation(function () { return ({}); });
            var result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)(); }).result;
            expect(function () {
                expect(result.current).not.toBe(undefined);
            }).toThrowErrorMatchingInlineSnapshot("\"`useFieldValue` can only be used in field, sidebar or entry editor location.\"");
        });
        it('when rendered omitting `fieldId` outside of field location', function () {
            // @ts-expect-error
            useSDKMock.mockImplementation(function () { return ({
                entry: mockSDK.entry,
            }); });
            var result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)(); }).result;
            expect(function () {
                expect(result.current).not.toBe(undefined);
            }).toThrowErrorMatchingInlineSnapshot("\"Missing `fieldId`. The `fieldId` can only be omitted when your app is renderd in field location.\"");
        });
        it('when providing unknown `fieldId`', function () {
            // @ts-expect-error
            useSDKMock.mockImplementation(function () { return mockSDK; });
            var result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)('unknownFieldId'); }).result;
            expect(function () {
                expect(result.current).not.toBe(undefined);
            }).toThrowErrorMatchingInlineSnapshot("\"Invalid `fieldId`. The current entry does not have a field \\\"unknownFieldId\\\".\"");
        });
    });
    describe('with no params', function () {
        var result;
        beforeEach(function () {
            // @ts-expect-error
            useSDKMock.mockImplementation(function () { return mockSDK; });
            result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)(); }).result;
        });
        it('returns initial value', function () {
            expect(result.current[0]).toBe('fieldId defaultLocale value');
        });
        it('updates value', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, react_hooks_1.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, result.current[1]('new value')];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        expect(result.current[0]).toBe('new value');
                        expect(mockSDK.entry.fields['fieldId'].setValue).toHaveBeenCalledWith('new value', 'defaultLocale');
                        return [2 /*return*/];
                }
            });
        }); });
        it('updates value when `onValueChanged` is called', function () {
            var calls = mockSDK.entry.fields.fieldId.onValueChanged.mock.calls;
            expect(calls[0][0]).toBe('defaultLocale');
            (0, react_hooks_1.act)(function () { return calls[0][1]('new value'); });
            expect(result.current[0]).toBe('new value');
        });
        it('returns the updated value', function () { return __awaiter(void 0, void 0, void 0, function () {
            var returnedValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, react_hooks_1.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, result.current[1]('new value')];
                                    case 1:
                                        returnedValue = _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        expect(returnedValue).toBe('return value');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('with `fieldId`', function () {
        var result;
        beforeEach(function () {
            // @ts-expect-error
            useSDKMock.mockImplementation(function () { return mockSDK; });
            result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)('otherFieldId'); }).result;
        });
        it('returns initial value', function () {
            expect(result.current[0]).toBe('otherFieldId defaultLocale value');
        });
        it('updates value', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, react_hooks_1.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, result.current[1]('new value')];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        expect(result.current[0]).toBe('new value');
                        expect(mockSDK.entry.fields['otherFieldId'].setValue).toHaveBeenCalledWith('new value', 'defaultLocale');
                        return [2 /*return*/];
                }
            });
        }); });
        it('updates value when `onValueChanged` is called', function () {
            var calls = mockSDK.entry.fields.otherFieldId.onValueChanged.mock.calls;
            expect(calls[0][0]).toBe('defaultLocale');
            (0, react_hooks_1.act)(function () { return calls[0][1]('new value'); });
            expect(result.current[0]).toBe('new value');
        });
    });
    describe('with `locale`', function () {
        var result;
        beforeEach(function () {
            // @ts-expect-error
            useSDKMock.mockImplementation(function () { return mockSDK; });
            result = (0, react_hooks_1.renderHook)(function () { return (0, useFieldValue_1.useFieldValue)('fieldId', 'locale'); }).result;
        });
        it('returns initial value', function () {
            expect(result.current[0]).toBe('fieldId locale value');
        });
        it('updates value', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, react_hooks_1.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, result.current[1]('new value')];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        expect(result.current[0]).toBe('new value');
                        expect(mockSDK.entry.fields['fieldId'].setValue).toHaveBeenCalledWith('new value', 'locale');
                        return [2 /*return*/];
                }
            });
        }); });
        it('updates value when `onValueChanged` is called', function () {
            var calls = mockSDK.entry.fields.fieldId.onValueChanged.mock.calls;
            expect(calls[0][0]).toBe('locale');
            (0, react_hooks_1.act)(function () { return calls[0][1]('new value'); });
            expect(result.current[0]).toBe('new value');
        });
    });
});
