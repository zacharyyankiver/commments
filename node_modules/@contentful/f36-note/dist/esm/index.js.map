{"version":3,"sources":["../../src/Note.tsx","../../src/Note.styles.tsx"],"names":["cx","React","Flex","Grid","Button","Heading","Paragraph","Text","CheckCircleIcon","CloseIcon","ErrorCircleIcon","InfoCircleIcon","WarningIcon","DiamondIcon","Icon","css","tokens","variantToStyles","variant","getNoteStyles","__spreadValues","icons","Note","props","ref","_a","children","className","withCloseButton","onClose","closeButtonAriaLabel","testId","title","icon","otherProps","__objRest","styles","iconSize","iconVariant","iconContent","__spreadProps"],"mappings":"+kBAAA,OAAS,MAAAA,MAAU,UACnB,OAAOC,MAAW,QAClB,OACE,QAAAC,EACA,QAAAC,MAIK,uBACP,OAAS,UAAAC,MAAc,yBACvB,OAAS,WAAAC,EAAS,aAAAC,EAAW,QAAAC,MAAY,6BACzC,OACE,mBAAAC,EACA,aAAAC,EACA,mBAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,eAAAC,MACK,wBACP,OAAS,QAAAC,MAAY,uBCnBrB,OAAS,OAAAC,MAAW,UAEpB,OAAOC,MAAY,yBAInB,IAAMC,EAAmBC,GAAyB,CAChD,OAAQA,EAAS,CACf,IAAK,UACH,MAAO,CACL,gBAAiBF,EAAO,QACxB,YAAaA,EAAO,QAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,IAAK,WACH,MAAO,CACL,gBAAiBA,EAAO,SACxB,YAAaA,EAAO,SAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,IAAK,WACH,MAAO,CACL,gBAAiBA,EAAO,OACxB,YAAaA,EAAO,OAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,IAAK,UACH,MAAO,CACL,gBAAiBA,EAAO,UACxB,YAAaA,EAAO,UAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,IAAK,UACH,MAAO,CACL,gBAAiBA,EAAO,QACxB,YAAaA,EAAO,QAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,IAAK,UACH,MAAO,CACL,gBAAiBA,EAAO,UACxB,YAAaA,EAAO,UAEpB,EAAG,CACD,MAAOA,EAAO,OAChB,CACF,EACF,QACE,MAAO,CAAC,CACZ,CACF,EAEaG,EAAgB,KACpB,CACL,UAAW,CAAC,CAAE,QAAAD,CAAQ,IACpBH,EAAIK,EAAA,CACF,SAAU,WACV,aAAcJ,EAAO,mBACrB,OAAQ,aACLC,EAAgBC,CAAO,EAC3B,EACH,MAAOH,EAAI,CACT,MAAOC,EAAO,QACd,SAAUA,EAAO,UACjB,WAAYA,EAAO,WACrB,CAAC,EACD,YAAaD,EAAI,CACf,MAAOC,EAAO,OAChB,CAAC,EACD,MAAOD,EAAI,CACT,SAAU,WACV,IAAKC,EAAO,UACZ,MAAOA,EAAO,UACd,QAASA,EAAO,UAChB,oBAAqB,CACnB,gBAAiB,aACnB,CACF,CAAC,EACD,UAAWD,EAAI,CACb,KAAMC,EAAO,OACf,CAAC,CACH,GDzEF,IAAMK,EAAQ,CACZ,QAASV,EACT,SAAUH,EACV,SAAUE,EACV,QAASE,EACT,QAASD,EACT,QAASE,CACX,EA+CaS,EAAOrB,EAAM,WACxB,CAACsB,EAAOC,IAAQ,CACd,IAWIC,EAAAF,EAVF,UAAAG,EACA,UAAAC,EACA,gBAAAC,EAAkB,GAClB,QAAAC,EACA,qBAAAC,EAAuB,UACvB,QAAAZ,EAAU,UACV,OAAAa,EAAS,aACT,MAAAC,EACA,KAAAC,CAxFN,EA0FQR,EADCS,EAAAC,EACDV,EADC,CATH,WACA,YACA,kBACA,UACA,uBACA,UACA,SACA,QACA,SAIIW,EAASjB,EAAc,EAEvBkB,EAAWL,EAAQ,SAAW,QAC9BM,EAAcpB,IAAY,UAAY,QAAUA,EAEhDqB,EAAeN,GACnBhC,EAAM,aAAagC,EAAM,CACvB,KAAMI,EACN,QAASC,CACX,CAAC,EAEH,OACErC,EAAA,cAACE,EAAAqC,EAAApB,EAAA,GACKc,GADL,CAEC,QAASN,EAAkB,gBAAkB,WAC7C,GAAG,UACH,UAAW5B,EAAGoC,EAAO,UAAU,CAAE,QAAAlB,CAAQ,CAAC,EAAGS,CAAS,EACtD,OAAQI,EACR,IAAKP,EACL,QAAQ,aAEPS,EACCM,EAAYN,CAAI,EAEhBhC,EAAA,cAACa,EAAA,CAAK,GAAIO,EAAMH,CAAO,EAAG,QAASoB,EAAa,KAAMD,EAAU,EAElEpC,EAAA,cAACC,EAAA,CAAK,cAAc,UACjB8B,GACC/B,EAAA,cAACI,EAAA,CACC,GAAG,KACH,UAAW+B,EAAO,MAClB,aAAeV,EAAoB,WAAT,QAEzBM,CACH,EAEDN,GACCzB,EAAA,cAACM,EAAA,CACC,GAAG,MACH,WAAW,cACX,UAAW6B,EAAO,aAEjB,OAAOV,GAAa,SACnBzB,EAAA,cAACK,EAAA,CAAU,aAAa,QAAQoB,CAAS,EAEzCA,CAEJ,CAEJ,EACCE,GACC3B,EAAA,cAACG,EAAA,CACC,QAAQ,cACR,UAAWH,EAAA,cAACQ,EAAA,CAAU,UAAW2B,EAAO,UAAW,EACnD,QAASP,EACT,OAAQ,GAAGE,CAAM,SACjB,aAAYD,EACZ,UAAWM,EAAO,MACpB,CAEJ,CAEJ,CACF,EAEAd,EAAK,YAAc","sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport {\n  Flex,\n  Grid,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '@contentful/f36-button';\nimport { Heading, Paragraph, Text } from '@contentful/f36-typography';\nimport {\n  CheckCircleIcon,\n  CloseIcon,\n  ErrorCircleIcon,\n  InfoCircleIcon,\n  WarningIcon,\n  DiamondIcon,\n} from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\n\nimport { getNoteStyles } from './Note.styles';\n\nconst icons = {\n  primary: InfoCircleIcon,\n  positive: CheckCircleIcon,\n  negative: ErrorCircleIcon,\n  warning: WarningIcon,\n  neutral: InfoCircleIcon,\n  premium: DiamondIcon,\n};\n\nexport type NoteVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'warning'\n  | 'neutral'\n  | 'premium';\n\nexport type NoteInternalProps = CommonProps & {\n  /**\n   * Determines style variation of Note component\n   */\n  variant?: NoteVariant;\n  /**\n   * Sets title in the Note\n   */\n  title?: React.ReactNode;\n  /**\n   * Children of Note\n   */\n  children?: React.ReactNode | string;\n  /**\n   * Defines if the close button should be rendered\n   * @default false\n   */\n  withCloseButton?: boolean;\n  /**\n   * Aria label for the close button\n   * @default 'Dismiss'\n   */\n  closeButtonAriaLabel?: string;\n  /**\n   * Callback for handling closing\n   */\n  onClose?: React.MouseEventHandler<HTMLButtonElement>;\n  /**\n   * Expects any of the icon components to override the default Note variant icon\n   */\n  icon?: React.ReactElement;\n};\nexport type NoteProps = PropsWithHTMLElement<NoteInternalProps, 'article'>;\n\n/**\n * @description: Note provides context and information about a situation or action.\n */\nexport const Note = React.forwardRef<HTMLElement, ExpandProps<NoteProps>>(\n  (props, ref) => {\n    const {\n      children,\n      className,\n      withCloseButton = false,\n      onClose,\n      closeButtonAriaLabel = 'Dismiss',\n      variant = 'primary',\n      testId = 'cf-ui-note',\n      title,\n      icon,\n      ...otherProps\n    } = props;\n\n    const styles = getNoteStyles();\n\n    const iconSize = title ? 'medium' : 'small';\n    const iconVariant = variant === 'neutral' ? 'muted' : variant;\n\n    const iconContent = (icon: React.ReactElement) =>\n      React.cloneElement(icon, {\n        size: iconSize,\n        variant: iconVariant,\n      });\n\n    return (\n      <Grid\n        {...otherProps}\n        columns={withCloseButton ? 'auto 1fr 24px' : 'auto 1fr'} // 24px is the width of the close button\n        as=\"article\"\n        className={cx(styles.container({ variant }), className)}\n        testId={testId}\n        ref={ref}\n        padding=\"spacingM\"\n      >\n        {icon ? (\n          iconContent(icon)\n        ) : (\n          <Icon as={icons[variant]} variant={iconVariant} size={iconSize} />\n        )}\n        <Flex flexDirection=\"column\">\n          {title && (\n            <Heading\n              as=\"h2\"\n              className={styles.title}\n              marginBottom={!children ? 'none' : 'spacingS'}\n            >\n              {title}\n            </Heading>\n          )}\n          {children && (\n            <Text\n              as=\"div\"\n              lineHeight=\"lineHeightM\"\n              className={styles.description}\n            >\n              {typeof children === 'string' ? (\n                <Paragraph marginBottom=\"none\">{children}</Paragraph>\n              ) : (\n                children\n              )}\n            </Text>\n          )}\n        </Flex>\n        {withCloseButton && (\n          <Button\n            variant=\"transparent\"\n            startIcon={<CloseIcon className={styles.closeIcon} />}\n            onClick={onClose}\n            testId={`${testId}-close`}\n            aria-label={closeButtonAriaLabel}\n            className={styles.close}\n          />\n        )}\n      </Grid>\n    );\n  },\n);\n\nNote.displayName = 'Note';\n","import { css } from 'emotion';\n\nimport tokens from '@contentful/f36-tokens';\n\nimport type { NoteProps, NoteVariant } from './Note';\n\nconst variantToStyles = (variant: NoteVariant) => {\n  switch (variant) {\n    case 'primary':\n      return {\n        backgroundColor: tokens.blue100,\n        borderColor: tokens.blue300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'positive':\n      return {\n        backgroundColor: tokens.green100,\n        borderColor: tokens.green300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'negative':\n      return {\n        backgroundColor: tokens.red100,\n        borderColor: tokens.red300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'warning':\n      return {\n        backgroundColor: tokens.orange100,\n        borderColor: tokens.orange300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'neutral':\n      return {\n        backgroundColor: tokens.gray100,\n        borderColor: tokens.gray300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'premium':\n      return {\n        backgroundColor: tokens.purple100,\n        borderColor: tokens.purple300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nexport const getNoteStyles = () => {\n  return {\n    container: ({ variant }: Pick<NoteProps, 'variant'>) =>\n      css({\n        position: 'relative',\n        borderRadius: tokens.borderRadiusMedium,\n        border: '1px solid',\n        ...variantToStyles(variant),\n      }),\n    title: css({\n      color: tokens.gray800,\n      fontSize: tokens.fontSizeL,\n      lineHeight: tokens.lineHeightL,\n    }),\n    description: css({\n      color: tokens.gray700,\n    }),\n    close: css({\n      position: 'absolute',\n      top: tokens.spacingXs,\n      right: tokens.spacingXs,\n      padding: tokens.spacingXs,\n      '&:hover, &:active': {\n        backgroundColor: 'transparent',\n      },\n    }),\n    closeIcon: css({\n      fill: tokens.gray600,\n    }),\n  };\n};\n"]}