{"version":3,"sources":["../src/Table.tsx","../src/Table.styles.ts","../src/tableContext.ts","../src/TableBody/TableBody.tsx","../src/TableCell/TableCell.tsx","../src/TableCell/TableCellContext.ts","../src/TableCell/TableCell.styles.ts","../src/TableHead/TableHead.tsx","../src/TableHead/TableHead.styles.ts","../src/TableRow/TableRow.tsx","../src/TableRow/TableRow.styles.ts","../src/CompoundTable.tsx"],"names":["cx","React","forwardRef","Box","css","tokens","getTableStyles","createContext","useContext","TableContext","useTableContext","TableContextProvider","Table","_a","forwardedRef","_b","children","className","layout","testId","verticalAlign","otherProps","__objRest","styles","__spreadProps","__spreadValues","_TableBody","TableBody","useMemo","useState","Text","Caption","SortAscendingIcon","SortDescendingIcon","SortIcon","getTextFromChildren","contextOptions","TableCellContext","useTableCellContext","TableCellContextProvider","getTableCellStyles","align","isSortable","isTableHead","showSorting","TableCellSorting","SortingIconMap","_TableCell","sortDirection","sortButtonAriaLabel","setShowSorting","as","context","offsetTop","SortingIcon","BaseComponent","sortableProps","columnName","tableCellContent","TableCell","getTableHeadStyles","TableHead","isSticky","classNames","getTableRowStyles","TableRow","isSelected"],"mappings":"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","sourcesContent":["import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport type * as CSS from 'csstype';\n\nimport { getTableStyles } from './Table.styles';\nimport { TableContextProvider } from './tableContext';\n\nexport type TableInternalProps = CommonProps & {\n  /**\n   * @default 'inline'\n   */\n  layout?: 'inline' | 'embedded';\n  /**\n   * @default 'top'\n   */\n  verticalAlign?: Extract<\n    CSS.Property.VerticalAlign,\n    'baseline' | 'bottom' | 'middle' | 'top'\n  >;\n};\n\nexport type TableProps = PropsWithHTMLElement<TableInternalProps, 'table'>;\n\nexport const Table = forwardRef<HTMLTableElement, ExpandProps<TableProps>>(\n  (\n    {\n      children,\n      className,\n      layout = 'inline',\n      testId = 'cf-ui-table',\n      verticalAlign = 'top',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableStyles();\n\n    return (\n      <Box\n        cellPadding=\"0\"\n        cellSpacing=\"0\"\n        {...otherProps}\n        as=\"table\"\n        display=\"table\"\n        ref={forwardedRef}\n        className={cx(styles.root, styles[layout], className)}\n        testId={testId}\n      >\n        <TableContextProvider value={{ verticalAlign }}>\n          {children}\n        </TableContextProvider>\n      </Box>\n    );\n  },\n);\n\nTable.displayName = 'Table';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableStyles = () => ({\n  inline: css({\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: `0 0 0 1px ${tokens.gray200}`,\n    'th:first-child': {\n      borderTopLeftRadius: tokens.borderRadiusMedium,\n    },\n    'th:last-child': {\n      borderTopRightRadius: tokens.borderRadiusMedium,\n    },\n    'tr:last-child td:first-child': {\n      borderBottomLeftRadius: tokens.borderRadiusMedium,\n    },\n    'tr:last-child td:last-child': {\n      borderBottomRightRadius: tokens.borderRadiusMedium,\n    },\n  }),\n  embedded: css({\n    borderBottom: `1px solid ${tokens.gray200}`,\n  }),\n  root: css({\n    width: '100%',\n  }),\n});\n","import { createContext, useContext } from 'react';\nimport { TableProps } from './Table';\n\nexport type TableContext = {\n  verticalAlign?: TableProps['verticalAlign'];\n};\n\nexport const TableContext = createContext<TableContext>({});\n\nexport const useTableContext = () => {\n  const context = useContext(TableContext);\n\n  return context;\n};\n\nexport const TableContextProvider = TableContext.Provider;\n","import React, { forwardRef, type ReactNode } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport type TableBodyInternalProps = CommonProps & {\n  children: ReactNode;\n};\n\nexport type TableBodyProps = PropsWithHTMLElement<\n  TableBodyInternalProps,\n  'tbody'\n>;\n\nfunction _TableBody(\n  { className, children, testId = 'cf-ui-table-body', ...otherProps },\n  forwardedRef,\n) {\n  return (\n    <Box\n      {...otherProps}\n      as=\"tbody\"\n      className={className}\n      ref={forwardedRef}\n      testId={testId}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_TableBody.displayName = 'TableBody';\n\nexport const TableBody = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableBodyProps>\n>(_TableBody);\n","import { cx } from 'emotion';\nimport React, { forwardRef, useMemo, useState } from 'react';\nimport {\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n  type PolymorphicComponent,\n} from '@contentful/f36-core';\nimport { Text, Caption, type TextProps } from '@contentful/f36-typography';\nimport {\n  SortAscendingIcon,\n  SortDescendingIcon,\n  SortIcon,\n} from '@contentful/f36-icons';\nimport { getTextFromChildren } from '@contentful/f36-utils';\n\nimport { useTableCellContext } from './TableCellContext';\nimport { getTableCellStyles } from './TableCell.styles';\nimport { useTableContext } from '../tableContext';\n\nexport enum TableCellSorting {\n  Ascending = 'ascending',\n  Descending = 'descending',\n}\n\nconst SortingIconMap = {\n  [TableCellSorting.Ascending]: SortAscendingIcon,\n  [TableCellSorting.Descending]: SortDescendingIcon,\n};\n\nexport type TableCellInternalProps = CommonProps & {\n  align?: 'center' | 'left' | 'right';\n  children?: React.ReactNode;\n  isSortable?: boolean;\n  sortDirection?: TableCellSorting;\n  width?: string | number;\n  /**\n   * Aria label for the sort button when isSortable is set\n   */\n  sortButtonAriaLabel?: string;\n} & Pick<TextProps, 'isTruncated' | 'isWordBreak'>;\n\nexport type TableCellProps = PropsWithHTMLElement<\n  TableCellInternalProps,\n  'th' | 'td'\n>;\n\nfunction _TableCell(\n  {\n    align = 'left',\n    children,\n    className,\n    isSortable,\n    sortDirection,\n    testId = 'cf-ui-table-cell',\n    sortButtonAriaLabel,\n    ...otherProps\n  }: TableCellProps,\n  forwardedRef: React.Ref<any>,\n) {\n  const [showSorting, setShowSorting] = useState(false);\n  const { as, name: context, offsetTop } = useTableCellContext();\n  const { verticalAlign } = useTableContext();\n  const SortingIcon = SortingIconMap[sortDirection];\n  const isTableHead = context === 'head';\n  const styles = getTableCellStyles({\n    isSortable: isTableHead ? isSortable : undefined,\n    isTableHead,\n    align,\n    verticalAlign,\n  });\n  const BaseComponent = isTableHead ? Caption : Text;\n  const sortableProps = isSortable\n    ? {\n        'aria-sort': (sortDirection ?? 'none') as\n          | 'none'\n          | 'ascending'\n          | 'descending'\n          | 'other',\n        onBlur: () => setShowSorting(false),\n        onFocus: () => setShowSorting(true),\n        onMouseEnter: () => setShowSorting(true),\n        onMouseLeave: () => setShowSorting(false),\n      }\n    : {};\n  const columnName = useMemo(() => getTextFromChildren(children), [children]);\n  let tableCellContent = children;\n\n  if (isSortable) {\n    tableCellContent = (\n      <button\n        aria-label={\n          sortButtonAriaLabel ??\n          `Sort ${\n            sortDirection === TableCellSorting.Ascending\n              ? TableCellSorting.Descending\n              : TableCellSorting.Ascending\n          } by ${columnName}`\n        }\n        className={styles.button}\n        type=\"button\"\n      >\n        {children}\n        {sortDirection ? (\n          <SortingIcon size=\"tiny\" variant=\"secondary\" />\n        ) : (\n          <SortIcon\n            aria-hidden={!showSorting}\n            className={styles.sortIcon(showSorting)}\n            size=\"tiny\"\n            variant=\"secondary\"\n          />\n        )}\n      </button>\n    );\n  }\n\n  return (\n    <BaseComponent\n      {...otherProps}\n      {...sortableProps}\n      as={as}\n      className={cx(styles.container, className)}\n      ref={forwardedRef}\n      style={{\n        ...otherProps.style,\n        top: offsetTop || undefined,\n      }}\n      testId={testId}\n    >\n      {tableCellContent}\n    </BaseComponent>\n  );\n}\n\n_TableCell.displayName = 'TableCell';\n\nexport const TableCell: PolymorphicComponent<\n  ExpandProps<TableCellInternalProps>,\n  'th' | 'td'\n> = forwardRef(_TableCell);\n","import { createContext, useContext } from 'react';\n\nexport type TableCellContextOption = {\n  name: 'body' | 'head';\n  as: 'td' | 'th';\n  offsetTop: number | string;\n};\n\nexport const contextOptions: {\n  body: TableCellContextOption;\n  head: TableCellContextOption;\n} = {\n  body: { name: 'body', as: 'td', offsetTop: 0 },\n  head: { name: 'head', as: 'th', offsetTop: 0 },\n};\n\nexport const TableCellContext = createContext(contextOptions.body);\n\nexport const useTableCellContext = () => {\n  const context = useContext(TableCellContext);\n\n  return context;\n};\n\nexport const TableCellContextProvider = TableCellContext.Provider;\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type TableCellInternalProps } from './TableCell';\nimport { type TableProps } from '../Table';\n\ntype GetTableCellStylesArguments = {\n  align: TableCellInternalProps['align'];\n  isSortable?: TableCellInternalProps['isSortable'];\n  isTableHead: boolean;\n  verticalAlign?: TableProps['verticalAlign'];\n};\n\nexport const getTableCellStyles = ({\n  align,\n  isSortable,\n  isTableHead,\n  verticalAlign,\n}: GetTableCellStylesArguments) => ({\n  button: css({\n    alignItems: 'flex-start',\n    appearance: 'none',\n    background: 'none',\n    border: 0,\n    color: 'inherit',\n    cursor: 'pointer',\n    display: 'inline-flex',\n    gap: tokens.spacing2Xs,\n    outline: 0,\n    padding: tokens.spacingS,\n\n    '&:focus': {\n      backgroundColor: tokens.gray100,\n      boxShadow: tokens.glowPrimary,\n    },\n    '&:focus:not(:focus-visible)': {\n      backgroundColor: 'unset',\n      boxShadow: 'unset',\n    },\n    '&:focus-visible': {\n      backgroundColor: tokens.gray100,\n      boxShadow: tokens.glowPrimary,\n    },\n  }),\n  container: css({\n    backgroundColor: tokens.colorWhite,\n    borderBottom: `1px solid ${tokens.gray200}`,\n    padding: isSortable ? 0 : tokens.spacingS,\n    textAlign: align,\n    color: isTableHead ? tokens.gray600 : tokens.gray700,\n    fontWeight: isTableHead ? tokens.fontWeightMedium : tokens.fontWeightNormal,\n    verticalAlign,\n  }),\n  sortIcon: (showSorting: boolean) =>\n    css({\n      fill: tokens.gray400,\n      opacity: showSorting ? 1 : 0,\n      transition: `opacity ${tokens.transitionEasingCubicBezier} ${tokens.transitionDurationDefault}`,\n    }),\n});\n","import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport {\n  TableCellContextProvider,\n  contextOptions,\n} from '../TableCell/TableCellContext';\nimport { getTableHeadStyles } from './TableHead.styles';\n\nexport type TableHeadInternalProps = CommonProps & {\n  isSticky?: boolean;\n  offsetTop?: number | string;\n  children: React.ReactNode;\n};\n\nexport type TableHeadProps = PropsWithHTMLElement<\n  TableHeadInternalProps,\n  'thead'\n>;\n\nexport const TableHead = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableHeadProps>\n>(\n  (\n    {\n      children,\n      className,\n      isSticky = false,\n      offsetTop,\n      testId = 'cf-ui-table-head',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableHeadStyles();\n    const classNames = cx(styles.root, isSticky && styles.sticky, className);\n\n    return (\n      <TableCellContextProvider\n        value={{ ...contextOptions.head, offsetTop: offsetTop || 0 }}\n      >\n        <Box\n          {...otherProps}\n          as=\"thead\"\n          className={classNames}\n          ref={forwardedRef}\n          testId={testId}\n        >\n          {children}\n        </Box>\n      </TableCellContextProvider>\n    );\n  },\n);\n\nTableHead.displayName = 'TableHead';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableHeadStyles = () => ({\n  root: css({\n    color: tokens.gray600,\n  }),\n  sticky: css({\n    th: {\n      position: 'sticky',\n      top: 0,\n      zIndex: tokens.zIndexDefault,\n    },\n  }),\n});\n","import { cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { getTableRowStyles } from './TableRow.styles';\n\nexport type TableRowInternalProps = CommonProps & {\n  isSelected?: boolean;\n  children: React.ReactNode;\n};\n\nexport type TableRowProps = PropsWithHTMLElement<TableRowInternalProps, 'tr'>;\n\nexport const TableRow = forwardRef<\n  HTMLTableRowElement,\n  ExpandProps<TableRowProps>\n>(\n  (\n    {\n      className,\n      children,\n      isSelected = false,\n      testId = 'cf-ui-table-row',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getTableRowStyles();\n\n    return (\n      <Box\n        {...otherProps}\n        as=\"tr\"\n        className={cx(\n          styles.root,\n          {\n            [styles.selected]: isSelected,\n          },\n          className,\n        )}\n        ref={forwardedRef}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTableRow.displayName = 'TableRow';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getTableRowStyles = () => ({\n  root: css({\n    '&:last-child td': {\n      borderBottom: 'none',\n    },\n    '&:hover td': {\n      backgroundColor: tokens.gray100,\n    },\n  }),\n  selected: css({\n    'td, th': {\n      backgroundColor: tokens.gray100,\n    },\n  }),\n});\n","import { Table as OriginalTable } from './Table';\nimport { TableBody } from './TableBody/TableBody';\nimport { TableCell } from './TableCell/TableCell';\nimport { TableHead } from './TableHead/TableHead';\nimport { TableRow } from './TableRow/TableRow';\n\ntype CompoundTable = typeof OriginalTable & {\n  Row: typeof TableRow;\n  Head: typeof TableHead;\n  Cell: typeof TableCell;\n  Body: typeof TableBody;\n};\n\nexport const Table = OriginalTable as CompoundTable;\nTable.Row = TableRow;\nTable.Head = TableHead;\nTable.Cell = TableCell;\nTable.Body = TableBody;\n"]}