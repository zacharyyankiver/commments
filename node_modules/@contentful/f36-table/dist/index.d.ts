import * as React from 'react';
import React__default, { ReactNode } from 'react';
import { PropsWithHTMLElement, CommonProps, PolymorphicComponent, ExpandProps } from '@contentful/f36-core';
import * as CSS from 'csstype';
import { TextProps } from '@contentful/f36-typography';

declare type TableInternalProps = CommonProps & {
    /**
     * @default 'inline'
     */
    layout?: 'inline' | 'embedded';
    /**
     * @default 'top'
     */
    verticalAlign?: Extract<CSS.Property.VerticalAlign, 'baseline' | 'bottom' | 'middle' | 'top'>;
};
declare type TableProps = PropsWithHTMLElement<TableInternalProps, 'table'>;
declare const Table$1: React__default.ForwardRefExoticComponent<Omit<Omit<Pick<React__default.DetailedHTMLProps<React__default.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>, "key" | keyof React__default.TableHTMLAttributes<HTMLTableElement>>, never>, "verticalAlign" | keyof CommonProps | "layout"> & CommonProps & {
    /**
     * @default 'inline'
     */
    layout?: 'inline' | 'embedded';
    /**
     * @default 'top'
     */
    verticalAlign?: Extract<CSS.Property.VerticalAlign, 'baseline' | 'bottom' | 'middle' | 'top'>;
} & React__default.RefAttributes<HTMLTableElement>>;

declare type TableBodyInternalProps = CommonProps & {
    children: ReactNode;
};
declare type TableBodyProps = PropsWithHTMLElement<TableBodyInternalProps, 'tbody'>;
declare const TableBody: React__default.ForwardRefExoticComponent<Omit<Omit<Pick<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, "key" | keyof React__default.HTMLAttributes<HTMLTableSectionElement>>, never>, "children" | keyof CommonProps> & CommonProps & {
    children: ReactNode;
} & React__default.RefAttributes<HTMLTableSectionElement>>;

declare enum TableCellSorting {
    Ascending = "ascending",
    Descending = "descending"
}
declare type TableCellInternalProps = CommonProps & {
    align?: 'center' | 'left' | 'right';
    children?: React__default.ReactNode;
    isSortable?: boolean;
    sortDirection?: TableCellSorting;
    width?: string | number;
    /**
     * Aria label for the sort button when isSortable is set
     */
    sortButtonAriaLabel?: string;
} & Pick<TextProps, 'isTruncated' | 'isWordBreak'>;
declare type TableCellProps = PropsWithHTMLElement<TableCellInternalProps, 'th' | 'td'>;
declare const TableCell: PolymorphicComponent<ExpandProps<TableCellInternalProps>, 'th' | 'td'>;

declare type TableHeadInternalProps = CommonProps & {
    isSticky?: boolean;
    offsetTop?: number | string;
    children: React__default.ReactNode;
};
declare type TableHeadProps = PropsWithHTMLElement<TableHeadInternalProps, 'thead'>;
declare const TableHead: React__default.ForwardRefExoticComponent<Omit<Omit<Pick<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, "key" | keyof React__default.HTMLAttributes<HTMLTableSectionElement>>, never>, "children" | keyof CommonProps | "offsetTop" | "isSticky"> & CommonProps & {
    isSticky?: boolean;
    offsetTop?: number | string;
    children: React__default.ReactNode;
} & React__default.RefAttributes<HTMLTableSectionElement>>;

declare type TableRowInternalProps = CommonProps & {
    isSelected?: boolean;
    children: React__default.ReactNode;
};
declare type TableRowProps = PropsWithHTMLElement<TableRowInternalProps, 'tr'>;
declare const TableRow: React__default.ForwardRefExoticComponent<Omit<Omit<Pick<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, "key" | keyof React__default.HTMLAttributes<HTMLTableRowElement>>, never>, "children" | keyof CommonProps | "isSelected"> & CommonProps & {
    isSelected?: boolean;
    children: React__default.ReactNode;
} & React__default.RefAttributes<HTMLTableRowElement>>;

declare type CompoundTable = typeof Table$1 & {
    Row: typeof TableRow;
    Head: typeof TableHead;
    Cell: typeof TableCell;
    Body: typeof TableBody;
};
declare const Table: CompoundTable;

declare type TableCellContextOption = {
    name: 'body' | 'head';
    as: 'td' | 'th';
    offsetTop: number | string;
};
declare const contextOptions: {
    body: TableCellContextOption;
    head: TableCellContextOption;
};
declare const TableCellContext: React.Context<TableCellContextOption>;
declare const useTableCellContext: () => TableCellContextOption;
declare const TableCellContextProvider: React.Provider<TableCellContextOption>;

export { Table, TableBody, TableBodyProps, TableCell, TableCellContext, TableCellContextProvider, TableCellProps, TableCellSorting, TableHead, TableHeadProps, TableProps, TableRow, TableRowProps, contextOptions, useTableCellContext };
