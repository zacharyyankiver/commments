{"version":3,"sources":["../../src/Avatar/Avatar.tsx","../../src/Avatar/Avatar.styles.ts","../../src/Avatar/utils.ts","../../src/AvatarGroup/AvatarGroup.tsx","../../src/AvatarGroup/AvatarGroup.styles.ts"],"names":["React","forwardRef","cx","Image","Tooltip","css","tokens","avatarColorMap","applyMuted","color","g","b","getWhiteBorderWidth","variant","size","getColorWidth","colorVariant","getTotalBorderWidth","parseSize","_a","toPixels","getOuterRadius","getInnerRadius","getColorVariantStyles","colorToken","colorWidth","totalBorderWidth","getInitialsFontSize","getAvatarStyles","sizeOption","borderRadius","innerBorderRadius","isMuted","__spreadValues","_Avatar","forwardedRef","_b","alt","className","icon","isLoading","initials","src","testId","tooltipProps","otherProps","__objRest","isFallback","styles","content","__spreadProps","Avatar","Stack","Menu","getAvatarGroupStyles","_AvatarGroup","children","maxVisibleChildren","childrenArray","childrenToRenderCount","childrenToRender","childrenInMenu","child","index","zIndex","AvatarGroup"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { type CommonProps } from '@contentful/f36-core';\nimport { Image, type ImageProps } from '@contentful/f36-image';\nimport {\n  Tooltip,\n  type TooltipInternalProps,\n  type WithEnhancedContent,\n} from '@contentful/f36-tooltip';\n\nimport { getAvatarStyles } from './Avatar.styles';\nimport { type ColorVariant, type Size, type SizeInPixel } from './utils';\nimport type { Variant } from './types';\nexport { type Variant } from './types';\n\nexport interface AvatarProps extends CommonProps {\n  alt?: ImageProps['alt'];\n  /**\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * Use the available sizes or a numerical custom one, e.g. '52px'\n   * @default 'medium'\n   */\n  size?: Size | SizeInPixel;\n  initials?: string;\n  src?: ImageProps['src'];\n  /**\n   * A tooltipProps attribute used to conditionally render the tooltip around root element\n   */\n  tooltipProps?: CommonProps &\n    WithEnhancedContent &\n    Omit<TooltipInternalProps, 'children'>;\n  /**\n   * @default 'user'\n   */\n  variant?: Variant;\n  /**\n   * @default 'gray'\n   */\n  colorVariant?: ColorVariant;\n  icon?: React.ReactElement;\n}\n\nfunction _Avatar(\n  {\n    alt = '',\n    className,\n    colorVariant = 'gray',\n    icon,\n    isLoading = false,\n    size = 'medium',\n    initials,\n    src,\n    testId = 'cf-ui-avatar',\n    tooltipProps,\n    variant = 'user',\n    ...otherProps\n  }: AvatarProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  // Only render the fallback when `src` is undefined or an empty string\n  const isFallback = Boolean(!isLoading && !src);\n  const styles = getAvatarStyles({ size, variant, colorVariant });\n\n  const content = (\n    <div\n      className={cx(styles.root, className, {\n        [styles.imageContainer]: !!src,\n      })}\n      data-test-id={testId}\n      ref={forwardedRef}\n      {...otherProps}\n    >\n      {isFallback ? (\n        <div className={styles.fallback} data-test-id={`${testId}-fallback`}>\n          {initials?.substring(0, 2).toUpperCase()}\n        </div>\n      ) : (\n        <Image\n          alt={alt}\n          className={styles.image}\n          src={src}\n          height=\"100%\"\n          width=\"100%\"\n        />\n      )}\n      {!!icon && (\n        <span className={styles.overlayIcon} data-test-id={`${testId}-icon`}>\n          {icon}\n        </span>\n      )}\n    </div>\n  );\n\n  if (tooltipProps)\n    return (\n      <Tooltip {...tooltipProps} usePortal>\n        {content}\n      </Tooltip>\n    );\n\n  return content;\n}\n\nexport const Avatar = forwardRef(_Avatar);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from './Avatar';\nimport { type Variant } from './types';\nimport {\n  applyMuted,\n  avatarColorMap,\n  getColorWidth,\n  getInnerRadius,\n  getOuterRadius,\n  getTotalBorderWidth,\n  parseSize,\n  toPixels,\n  type ColorVariant,\n} from './utils';\n\nexport const getColorVariantStyles = (\n  variant: Variant,\n  colorVariant: ColorVariant,\n  size: number,\n) => {\n  const colorToken: string = avatarColorMap[colorVariant];\n\n  const colorWidth = getColorWidth(colorVariant);\n  const totalBorderWidth = getTotalBorderWidth(variant, colorVariant, size);\n\n  return {\n    boxShadow: [\n      `0px 0px 0px ${colorWidth}px ${colorToken} inset`,\n      `0px 0px 0px ${totalBorderWidth}px ${tokens.colorWhite} inset`,\n    ].join(', '),\n  };\n};\n\nconst getInitialsFontSize = (size: number) => Math.round(size / 2);\n\nexport const getAvatarStyles = ({\n  size: sizeOption,\n  variant,\n  colorVariant,\n}: {\n  size: AvatarProps['size'];\n  variant: Variant;\n  colorVariant: ColorVariant;\n}) => {\n  const borderRadius = getOuterRadius(variant);\n  const innerBorderRadius = getInnerRadius(variant);\n\n  const size = parseSize(sizeOption);\n  const totalBorderWidth = getTotalBorderWidth(variant, colorVariant, size);\n\n  const isMuted = colorVariant === 'muted';\n\n  return {\n    fallback: css({\n      backgroundColor: isMuted ? applyMuted(tokens.gray300) : tokens.gray300,\n      color: isMuted ? applyMuted(tokens.gray700) : tokens.gray700,\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontStretch: 'semi-condensed',\n      fontSize: toPixels(getInitialsFontSize(size)),\n    }),\n    image: css({\n      borderRadius: innerBorderRadius,\n      display: 'block',\n\n      // loading skeleton\n      '& + svg': {\n        borderRadius: innerBorderRadius,\n        rect: { rx: 0, ry: 0 }, // has a default 4px border radius\n      },\n    }),\n    root: css({\n      borderRadius,\n      height: size,\n      width: size,\n      overflow: 'hidden',\n      position: 'relative',\n      padding: totalBorderWidth,\n\n      // color variant border\n      '&::after': {\n        borderRadius,\n        bottom: 0,\n        content: '\"\"',\n        display: 'block',\n        left: 0,\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        ...getColorVariantStyles(variant, colorVariant, size),\n      },\n    }),\n    imageContainer: css(\n      {\n        backgroundColor: tokens.colorWhite,\n        overflow: 'visible',\n        zIndex: 1,\n      },\n      colorVariant === 'muted' && {\n        img: {\n          opacity: 0.5,\n        },\n      },\n    ),\n    overlayIcon: css({\n      svg: {\n        backgroundColor: tokens.colorWhite,\n        borderRadius: '100%',\n        position: 'absolute',\n        bottom: 0,\n        right: '-10%',\n        width: '40%',\n        height: '40%',\n        zIndex: 1,\n      },\n    }),\n  };\n};\n","import tokens from '@contentful/f36-tokens';\n\nimport { AvatarProps } from './Avatar';\nimport { type Variant } from './types';\n\nexport const SIZES = ['tiny', 'small', 'medium', 'large'] as const;\nexport type Size = (typeof SIZES)[number];\nexport type SizeInPixel = `${number}px`;\n\nexport type ColorVariant = keyof typeof avatarColorMap;\n\nexport const avatarColorMap = {\n  primary: tokens.blue500,\n  muted: applyMuted(tokens.gray500),\n  green: tokens.green400,\n  orange: tokens.orange400,\n  yellow: tokens.yellow500,\n  purple: tokens.purple400,\n  gray: tokens.gray500,\n  pink: '#FF77AE',\n  emerald: '#00B8A2',\n  lavender: '#9095FF',\n};\n\n/**\n * @param color Color string in hex format with a leading `#`\n */\nexport function applyMuted(color: string): string {\n  // This is a temporary solution because `color-mix` is not supported in Safari\n  const r = parseInt(color.slice(1, 3), 16);\n  const g = parseInt(color.slice(3, 5), 16);\n  const b = parseInt(color.slice(5, 7), 16);\n\n  return `rgb(${[\n    Math.round((255 + r) / 2),\n    Math.round((255 + g) / 2),\n    Math.round((255 + b) / 2),\n  ].join(' ')})`;\n\n  // Eventually we should use `color-mix`\n  // return `color-mix(in srgb, ${color}, ${tokens.colorWhite} 50%)`;\n}\n\nexport function getWhiteBorderWidth(variant: Variant, size: number): number {\n  if (variant === 'user') {\n    return 1;\n  }\n\n  return size >= 48 ? 3 : 2;\n}\n\nexport function getColorWidth(colorVariant: ColorVariant): number {\n  return ['muted', 'gray'].includes(colorVariant) ? 1 : 2;\n}\n\nexport function getTotalBorderWidth(\n  variant: Variant,\n  colorVariant: ColorVariant,\n  size: number,\n): number {\n  return getColorWidth(colorVariant) + getWhiteBorderWidth(variant, size);\n}\n\n/**\n * Converts the variant size to pixels\n *\n * @param size\n * @returns the size in pixels\n */\nexport const parseSize = (size: AvatarProps['size']): number => {\n  const sizeMap = {\n    tiny: 20,\n    small: 24,\n    medium: 32,\n    large: 48,\n  };\n\n  return sizeMap[size] ?? parseInt(size.slice(0, -2), 10);\n};\n\n/**\n *\n * @param size\n * @returns the size in pixels with the 'px' suffix\n */\nexport function toPixels(size: number): SizeInPixel {\n  return `${size}px`;\n}\n\nexport function getOuterRadius(variant: Variant): string {\n  return variant === 'app' ? '4px' : '100%';\n}\n\nexport function getInnerRadius(variant: Variant): string {\n  return variant === 'app' ? '1px' : '100%';\n}\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { Stack, type CommonProps } from '@contentful/f36-core';\nimport { Menu } from '@contentful/f36-menu';\n\nimport { type AvatarProps } from '../Avatar';\nimport { getAvatarGroupStyles } from './AvatarGroup.styles';\n\nexport interface AvatarGroupProps extends CommonProps {\n  children?:\n    | React.ReactElement<AvatarProps>[]\n    | React.ReactElement<AvatarProps>;\n  maxVisibleChildren?: number;\n  size?: 'small' | 'medium';\n  variant?: 'stacked' | 'spaced';\n}\n\nfunction _AvatarGroup(\n  {\n    children,\n    className,\n    maxVisibleChildren = 3,\n    size = 'medium',\n    testId = 'cf-ui-avatar-group',\n    variant = 'spaced',\n  }: AvatarGroupProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  const styles = getAvatarGroupStyles(size);\n\n  const childrenArray = React.Children.toArray(children);\n  const childrenToRenderCount =\n    childrenArray.length > maxVisibleChildren\n      ? maxVisibleChildren - 1\n      : maxVisibleChildren;\n  const childrenToRender = childrenArray.slice(0, childrenToRenderCount);\n  const childrenInMenu = childrenArray.slice(childrenToRenderCount);\n\n  return (\n    <Stack\n      flexDirection=\"row\"\n      testId={testId}\n      ref={forwardedRef}\n      className={cx(className, {\n        [styles.groupStacked]: variant === 'stacked',\n        [styles.groupSpaced]: variant === 'spaced',\n      })}\n    >\n      {childrenToRender.map((child, index) => {\n        const zIndex = childrenToRender.length - index;\n\n        return React.cloneElement(child as React.ReactElement, {\n          key: `avatar-rendered-${index}`,\n          size: size,\n          className: cx((child as React.ReactElement).props.className, {\n            [styles.avatarStacked]: variant === 'stacked',\n          }),\n          style: {\n            zIndex,\n          },\n        });\n      })}\n      {childrenInMenu.length > 0 && (\n        <Menu placement=\"bottom-end\">\n          <Menu.Trigger>\n            <button\n              type=\"button\"\n              className={cx(\n                {\n                  [styles.avatarStacked]: variant === 'stacked',\n                },\n                styles.moreAvatarsBtn,\n              )}\n            >\n              +{childrenInMenu.length}\n            </button>\n          </Menu.Trigger>\n          <Menu.List>\n            {childrenInMenu.map((child, index) => {\n              return (\n                <Menu.Item\n                  className={styles.moreAvatarsItem}\n                  key={`avatar-${index}`}\n                >\n                  {React.cloneElement(child as React.ReactElement, {\n                    key: `avatar-menuitem-${index}`,\n                    size: 'tiny',\n                    tooltipProps: undefined,\n                  })}\n                  {(child as React.ReactElement).props.alt}\n                </Menu.Item>\n              );\n            })}\n          </Menu.List>\n        </Menu>\n      )}\n    </Stack>\n  );\n}\nexport const AvatarGroup = forwardRef(_AvatarGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from '../Avatar/';\nimport { parseSize, toPixels } from '../Avatar/utils';\n\nexport const getAvatarGroupStyles = (size: AvatarProps['size']) => {\n  return {\n    groupSpaced: css({\n      gap: tokens.spacing2Xs,\n    }),\n    groupStacked: css({\n      gap: 0,\n      '> :not(:first-child)': {\n        marginLeft: `-${tokens.spacing2Xs}`,\n      },\n    }),\n    avatarStacked: css({\n      position: 'relative',\n      boxShadow: `0px 0px 0px 1px ${tokens.colorWhite}`,\n    }),\n    moreAvatarsBtn: css({\n      cursor: 'pointer',\n      backgroundColor: tokens.colorWhite,\n      color: tokens.gray600,\n      fontSize: tokens.fontSizeS,\n      border: 'none',\n      boxShadow: `0px 0px 0px 1px ${tokens.gray200} inset`,\n      borderRadius: '99999999em',\n      height: toPixels(parseSize(size)),\n      width: toPixels(parseSize(size)),\n      overflow: 'hidden',\n      zIndex: 0,\n    }),\n    moreAvatarsItem: css({\n      cursor: 'default',\n    }),\n  };\n};\n"]}