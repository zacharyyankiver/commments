import React from 'react';
import { CommonProps } from '@contentful/f36-core';
import { ImageProps } from '@contentful/f36-image';
import { WithEnhancedContent, TooltipInternalProps } from '@contentful/f36-tooltip';

declare type Variant = 'app' | 'user';

declare const SIZES: readonly ["tiny", "small", "medium", "large"];
declare type Size = (typeof SIZES)[number];
declare type SizeInPixel = `${number}px`;
declare type ColorVariant = keyof typeof avatarColorMap;
declare const avatarColorMap: {
    primary: string;
    muted: string;
    green: string;
    orange: string;
    yellow: string;
    purple: string;
    gray: string;
    pink: string;
    emerald: string;
    lavender: string;
};

interface AvatarProps extends CommonProps {
    alt?: ImageProps['alt'];
    /**
     * @default false
     */
    isLoading?: boolean;
    /**
     * Use the available sizes or a numerical custom one, e.g. '52px'
     * @default 'medium'
     */
    size?: Size | SizeInPixel;
    initials?: string;
    src?: ImageProps['src'];
    /**
     * A tooltipProps attribute used to conditionally render the tooltip around root element
     */
    tooltipProps?: CommonProps & WithEnhancedContent & Omit<TooltipInternalProps, 'children'>;
    /**
     * @default 'user'
     */
    variant?: Variant;
    /**
     * @default 'gray'
     */
    colorVariant?: ColorVariant;
    icon?: React.ReactElement;
}
declare const Avatar: React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<HTMLDivElement>>;

interface AvatarGroupProps extends CommonProps {
    children?: React.ReactElement<AvatarProps>[] | React.ReactElement<AvatarProps>;
    maxVisibleChildren?: number;
    size?: 'small' | 'medium';
    variant?: 'stacked' | 'spaced';
}
declare const AvatarGroup: React.ForwardRefExoticComponent<AvatarGroupProps & React.RefAttributes<HTMLDivElement>>;

export { Avatar, AvatarGroup, AvatarGroupProps, AvatarProps, ColorVariant, avatarColorMap };
