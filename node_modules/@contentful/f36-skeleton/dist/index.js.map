{"version":3,"sources":["../src/SkeletonBodyText/SkeletonBodyText.tsx","../src/SkeletonContainer/SkeletonContainer.tsx","../src/SkeletonDisplayText/SkeletonDisplayText.tsx","../src/SkeletonImage/SkeletonImage.tsx","../src/SkeletonRow/SkeletonRow.tsx","../src/SkeletonRow/SkeletonTableCell/SkeletonTableCell.tsx","../src/SkeletonText/SkeletonText.tsx","../src/CompoundSkeleton.tsx"],"names":["React","SkeletonBodyText","_a","_b","lineHeight","marginBottom","numberOfLines","offsetLeft","offsetTop","otherProps","__objRest","Skeleton","__spreadValues","Box","useId","SkeletonContainer","children","testId","ariaLabel","width","height","preserveAspectRatio","backgroundColor","backgroundOpacity","isAnimated","speed","foregroundColor","foregroundOpacity","svgWidth","svgHeight","clipId","gradientId","animateId","uniqueClipId","uniqueGradientId","randomAnimateId","uniqueAnimateId","SkeletonDisplayText","tokens","SkeletonImage","radiusX","radiusY","TableRow","TableCell","SkeletonTableCell","SkeletonRow","columnCount","rowCount","_","rowIndex","cellIndex","useCallback","SkeletonText","getLineWidth","lastLine","index"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonBodyTextProps extends SkeletonTextProps {}\n\nexport const SkeletonBodyText = ({\n  lineHeight = 16,\n  marginBottom = 8,\n  numberOfLines = 2,\n  offsetLeft = 0,\n  offsetTop = 0,\n  ...otherProps\n}: SkeletonBodyTextProps) => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={\n        numberOfLines! > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          ? numberOfLines\n          : 1\n      }\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      {...otherProps}\n    />\n  );\n};\n","import React from 'react';\nimport { Box, useId, type CommonProps } from '@contentful/f36-core';\n\nexport interface SkeletonContainerProps extends CommonProps {\n  /**\n   * Background color of the skeleton\n   */\n  backgroundColor?: string;\n  /**\n   * Background opacity of the skeleton\n   */\n  backgroundOpacity?: number;\n  /**\n   * Whether skeleton has animation or not\n   */\n  isAnimated?: boolean;\n  /**\n   * Speed of the animation\n   */\n  speed?: number | string;\n  /**\n   * Color of the foreground skeleton items\n   */\n  foregroundColor?: string;\n  /**\n   * Opacity of the foreground skeleton items\n   */\n  foregroundOpacity?: number;\n  /**\n   * Width of the SVG element\n   */\n  svgWidth?: string | number;\n  /**\n   * Height of the SVG element\n   */\n  svgHeight?: string | number;\n  /**\n   * Label attribute\n   */\n  ariaLabel?: string;\n  width?: number | string;\n  height?: number | string;\n  clipId?: string;\n  gradientId?: string;\n  animateId?: string;\n  preserveAspectRatio?: string;\n  children: React.ReactNode;\n}\n\nexport const SkeletonContainer = ({\n  children,\n  testId = 'cf-ui-skeleton-form',\n  ariaLabel = 'Loading component...',\n  width = '100%',\n  height = '100%',\n  preserveAspectRatio,\n  backgroundColor = '#e5ebed',\n  backgroundOpacity = 1,\n  isAnimated = true,\n  speed = 2,\n  foregroundColor = '#f7f9fa',\n  foregroundOpacity = 1,\n  svgWidth = '100%',\n  svgHeight = '100%',\n  clipId,\n  gradientId,\n  animateId,\n  ...otherProps\n}: SkeletonContainerProps) => {\n  const uniqueClipId = useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n\n  return (\n    <Box\n      as=\"svg\"\n      display=\"block\"\n      role=\"img\"\n      aria-label={ariaLabel}\n      preserveAspectRatio={preserveAspectRatio}\n      width={svgWidth}\n      height={svgHeight}\n      testId={testId}\n      {...otherProps}\n    >\n      {ariaLabel ? <title>{ariaLabel}</title> : null}\n      <rect\n        x=\"0\"\n        y=\"0\"\n        width={width}\n        height={height}\n        clipPath={`url(#${uniqueClipId})`}\n        style={{ fill: `url(#${uniqueGradientId})` }}\n      />\n\n      <defs>\n        <clipPath id={uniqueClipId}>{children}</clipPath>\n\n        <linearGradient id={uniqueGradientId}>\n          <stop\n            offset=\"0%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                id={uniqueAnimateId}\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"50%\"\n            stopColor={foregroundColor}\n            stopOpacity={foregroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                begin={`${uniqueAnimateId}.begin+0.25s`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"100%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                begin={`${uniqueAnimateId}.begin+0.5s`}\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n        </linearGradient>\n      </defs>\n    </Box>\n  );\n};\n\nSkeletonContainer.displayName = 'SkeletonContainer';\n","import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonDisplayTextProps extends SkeletonTextProps {}\n\nexport const SkeletonDisplayText = ({\n  lineHeight = 21,\n  marginBottom = 20,\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  width = 100,\n  ...otherProps\n}: SkeletonDisplayTextProps): React.ReactElement => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={numberOfLines}\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      width={width}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonDisplayText.displayName = 'SkeletonDisplayText';\n","import tokens from '@contentful/f36-tokens';\nimport React from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonImageProps {\n  width?: stringOrNumber;\n  height?: stringOrNumber;\n  radiusX?: stringOrNumber;\n  radiusY?: stringOrNumber;\n  offsetLeft?: stringOrNumber;\n  offsetTop?: stringOrNumber;\n  testId?: string;\n}\n\nexport const SkeletonImage = ({\n  testId = 'cf-ui-skeleton-image',\n  offsetLeft,\n  offsetTop,\n  width = 70,\n  height = 70,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  ...otherProps\n}: SkeletonImageProps): React.ReactElement => {\n  return (\n    <rect\n      x={offsetLeft}\n      y={offsetTop}\n      rx={radiusX}\n      ry={radiusY}\n      width={width}\n      height={height}\n      data-test-id={testId}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonImage.displayName = 'SkeletonImage';\n","import React from 'react';\nimport { TableRow } from '@contentful/f36-table';\n\nimport { SkeletonTableCell } from './SkeletonTableCell/SkeletonTableCell';\n\nexport interface SkeletonRowProps {\n  /** Defines the number of rows to be rendered */\n  rowCount?: number;\n  /** Defines the number of columns to be rendered */\n  columnCount?: number;\n}\n\nexport const SkeletonRow = ({\n  columnCount = 5,\n  rowCount = 1,\n}: SkeletonRowProps) => {\n  return (\n    <>\n      {Array.from(Array(rowCount)).map((_, rowIndex) => (\n        <TableRow key={rowIndex}>\n          {Array.from(Array(columnCount)).map((_, cellIndex) => (\n            <SkeletonTableCell key={cellIndex} />\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { TableCell } from '@contentful/f36-table';\n\nimport { Skeleton } from '../../index';\n\nexport const SkeletonTableCell = () => {\n  return (\n    <TableCell>\n      <Skeleton.Container\n        svgHeight={16} // This is equal to the default height of a SkeletonText line, if no value is passed the svg will be bigger than the line\n      >\n        <Skeleton.BodyText numberOfLines={1} />\n      </Skeleton.Container>\n    </TableCell>\n  );\n};\n","import tokens from '@contentful/f36-tokens';\nimport React, { useCallback } from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonTextProps {\n  /**\n   * A number of skeleton likes\n   */\n  numberOfLines?: number;\n  /**\n   * A distance between top of the container and the first line (in pixels)\n   */\n  offsetTop?: stringOrNumber;\n  /**\n   * A distance between left of the container and the beginning of lines (in pixels)\n   */\n  offsetLeft?: stringOrNumber;\n  /**\n   * A height of a one line (in pixels)\n   */\n  lineHeight?: stringOrNumber;\n  /**\n   * Spacing between lines (in pixels)\n   */\n  marginBottom?: stringOrNumber;\n  /**\n   * X-axis border radius (in number)\n   */\n  radiusX?: stringOrNumber;\n  /**\n   * Y-axis border radius (in number)\n   */\n  radiusY?: stringOrNumber;\n  /**\n   * A width of a line\n   */\n  width?: stringOrNumber;\n}\n\nexport const SkeletonText = ({\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  lineHeight = 21,\n  marginBottom = 20,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  width,\n}: SkeletonTextProps) => {\n  const getLineWidth = useCallback(\n    (lastLine: boolean) => {\n      if (width) {\n        return width;\n      }\n\n      return lastLine ? '80%' : '100%';\n    },\n    [width],\n  );\n\n  return (\n    <React.Fragment>\n      {Array.from(Array(numberOfLines)).map((_, index) => (\n        <rect\n          key={`skeleton-display-text-${index}`} // eslint-disable-line\n          x={offsetLeft}\n          y={\n            index * (+lineHeight! + +marginBottom!) + +offsetTop! // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          }\n          rx={radiusX}\n          ry={radiusY}\n          width={getLineWidth(\n            numberOfLines! > 1 && numberOfLines! - index === 1, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          )}\n          height={lineHeight}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nSkeletonText.displayName = 'SkeletonText';\n","import { SkeletonBodyText } from './SkeletonBodyText/SkeletonBodyText';\nimport { SkeletonContainer } from './SkeletonContainer/SkeletonContainer';\nimport { SkeletonDisplayText } from './SkeletonDisplayText/SkeletonDisplayText';\nimport { SkeletonImage } from './SkeletonImage/SkeletonImage';\nimport { SkeletonRow } from './SkeletonRow/SkeletonRow';\nimport { SkeletonText } from './SkeletonText/SkeletonText';\n\ntype CompoundSkeleton = {\n  BodyText: typeof SkeletonBodyText;\n  Container: typeof SkeletonContainer;\n  DisplayText: typeof SkeletonDisplayText;\n  Image: typeof SkeletonImage;\n  Row: typeof SkeletonRow;\n  Text: typeof SkeletonText;\n};\n\nexport const Skeleton = {} as CompoundSkeleton;\n\nSkeleton.BodyText = SkeletonBodyText;\nSkeleton.Container = SkeletonContainer;\nSkeleton.DisplayText = SkeletonDisplayText;\nSkeleton.Image = SkeletonImage;\nSkeleton.Row = SkeletonRow;\nSkeleton.Text = SkeletonText;\n"]}