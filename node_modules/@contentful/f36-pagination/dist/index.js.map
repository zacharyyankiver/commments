{"version":3,"sources":["../src/Pagination.tsx","../src/utils.tsx"],"names":["React","Button","Select","Stack","Flex","ChevronLeftIcon","ChevronRightIcon","Text","getRangeText","activePage","itemsPerPage","totalItems","pageLength","isLastPage","total","firstItem","lastItem","_Pagination","props","ref","_a","className","onPageChange","testId","propsActivePage","propsLastPage","viewPerPageOptions","showViewPerPage","viewPerPageLabel","navigationButtonsProps","onViewPerPageChange","otherProps","__objRest","isFirstPage","totalText","__spreadValues","e","option","Pagination"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Button } from '@contentful/f36-button';\nimport { Select } from '@contentful/f36-forms';\nimport { Stack, Flex, type CommonProps } from '@contentful/f36-core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\n\nimport { getRangeText } from './utils';\n\ntype NavigationButtonsProps = {\n  /**\n   * Label for the next button\n   * @default \"Next\"\n   */\n  nextLabel?: string;\n  /**\n   * Label for the previous button\n   * @default \"Previous\"\n   */\n  previousLabel?: string;\n  /**\n   * Aria label for the next button\n   * @default \"To next page\"\n   */\n  nextAriaLabel?: string;\n  /**\n   * Aria label for the previous button\n   * @default \"To previous page\"\n   */\n  previousAriaLabel?: string;\n};\nexport interface PaginationProps extends CommonProps {\n  /**\n   * Sets which page is active on the Pagination\n   * @default 0\n   */\n  activePage?: number;\n  /**\n   * Sets if the user is on the last page of navigation\n   * @default false\n   */\n  isLastPage?: boolean;\n  /**\n   * Number of items are actually on the page.\n   * If no value is set it defaults to viewPerPage value\n   * @default 20\n   */\n  pageLength?: number;\n  /**\n   * Total amount of items the pagination is applied to.\n   */\n  totalItems?: number;\n  /**\n   * Sets if the View per page selector is shown\n   * @default false\n   */\n  showViewPerPage?: boolean;\n  /**\n   * Label for the View per page selector\n   * @default \"View\"\n   */\n  viewPerPageLabel?: string;\n  /**\n   * Sets how many items are displayed per page.\n   * Must be one of the values passed on viewPerPageOptions prop.\n   * @default 20\n   */\n  itemsPerPage?: number;\n  /**\n   * Array of options to show on the View select\n   * @default [20, 100]\n   */\n  viewPerPageOptions?: number[];\n  /**\n   * Handler function called when user changes the view per page selector.\n   */\n  onViewPerPageChange?: (items: number) => void;\n  /**\n   * Handler function called when user navigates to another page on the pagination.\n   */\n  onPageChange: (page: number) => void;\n  /**\n   * Labels for previous and next buttons\n   * @default { labelNext: \"Next\", labelPrevious: \"Previous\", ariaLabelNext: \"To next page\", ariaLabelPrevious: \"To previous page\" }\n   */\n  navigationButtonsProps?: NavigationButtonsProps;\n}\n\nfunction _Pagination(props: PaginationProps, ref: React.Ref<HTMLDivElement>) {\n  const {\n    className,\n    onPageChange,\n    testId = 'cf-ui-pagination',\n    activePage: propsActivePage,\n    itemsPerPage = 20,\n    pageLength,\n    isLastPage: propsLastPage = false,\n    activePage = 0,\n    viewPerPageOptions = [20, 100],\n    showViewPerPage = false,\n    viewPerPageLabel = 'View',\n    navigationButtonsProps = {\n      nextLabel: 'Next',\n      previousLabel: 'Previous',\n      nextAriaLabel: 'To next page',\n      previousAriaLabel: 'To previous page',\n    },\n    totalItems,\n    onViewPerPageChange,\n    ...otherProps\n  } = props;\n  const isFirstPage = activePage === 0;\n  const isLastPage =\n    propsLastPage ||\n    (totalItems && (activePage + 1) * itemsPerPage >= totalItems);\n  const totalText = getRangeText({\n    totalItems,\n    activePage,\n    itemsPerPage,\n    pageLength,\n    isLastPage,\n  });\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n      fullWidth\n      className={className}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showViewPerPage && (\n        <Stack>\n          <Text fontColor=\"gray500\">{viewPerPageLabel}</Text>\n          <Select\n            value={`${itemsPerPage}`}\n            onChange={(e) =>\n              onViewPerPageChange && onViewPerPageChange(+e.target.value)\n            }\n          >\n            {viewPerPageOptions.map((option) => (\n              <Select.Option key={option} value={option}>\n                {option}\n              </Select.Option>\n            ))}\n          </Select>\n        </Stack>\n      )}\n      <Stack flexGrow={1} justifyContent=\"flex-end\">\n        <Text fontColor=\"gray500\">{totalText}</Text>\n        <Stack spacing=\"spacingS\">\n          {!isFirstPage && (\n            <Button\n              aria-label={navigationButtonsProps.previousAriaLabel}\n              startIcon={<ChevronLeftIcon />}\n              variant=\"secondary\"\n              onClick={() => onPageChange(activePage - 1)}\n              testId=\"cf-ui-pagination-previous\"\n            >\n              {navigationButtonsProps.previousLabel}\n            </Button>\n          )}\n          {!isLastPage && (\n            <Button\n              aria-label={navigationButtonsProps.nextAriaLabel}\n              variant=\"secondary\"\n              endIcon={<ChevronRightIcon />}\n              onClick={() => onPageChange(activePage + 1)}\n              testId=\"cf-ui-pagination-next\"\n            >\n              {navigationButtonsProps.nextLabel}\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n    </Flex>\n  );\n}\n\n_Pagination.displayName = 'Pagination';\n\nexport const Pagination = React.forwardRef(_Pagination);\n","export function getRangeText({\n  activePage,\n  itemsPerPage,\n  totalItems = 0,\n  pageLength,\n  isLastPage = false,\n}: {\n  activePage: number;\n  itemsPerPage: number;\n  totalItems?: number;\n  pageLength?: number;\n  isLastPage?: boolean;\n}): string {\n  const total = totalItems ? `of ${totalItems} items` : '';\n  const firstItem = activePage * itemsPerPage + 1;\n  if (isLastPage && pageLength) {\n    return [`${firstItem} - ${firstItem - 1 + pageLength}`, total].join(' ');\n  }\n  if (totalItems) {\n    const lastItem = Math.min(firstItem - 1 + itemsPerPage, totalItems);\n    return [`${firstItem} - ${lastItem}`, total].join(' ');\n  }\n  return [`${firstItem} - ${firstItem - 1 + itemsPerPage}`, total].join(' ');\n}\n"]}