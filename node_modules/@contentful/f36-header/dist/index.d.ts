import { MouseEventHandler, ElementType, ReactElement, ReactNode } from 'react';
import { PolymorphicProps, PolymorphicComponent, ExpandProps } from '@contentful/f36-core';
import { IconButtonProps } from '@contentful/f36-button';

declare type BackButtonProps = Omit<Partial<IconButtonProps>, 'children' | 'icon' | 'variant' | 'size'> & {
    'aria-label'?: string;
};

declare type BreadcrumbProps = {
    breadcrumbs: Breadcrumb[];
};
declare type Breadcrumb = {
    content: string;
    url: string;
    onClick?: MouseEventHandler<HTMLAnchorElement>;
};
declare const Breadcrumb: ({ breadcrumbs, ...otherProps }: BreadcrumbProps) => JSX.Element;

declare const HEADER_DEFAULT_TAG = "header";
declare type WithBackButtonOrNot = {
    backButtonProps?: BackButtonProps;
    /**
     * If `true`, renders a leading back button within the header.
     */
    withBackButton: true;
} | {
    backButtonProps?: never;
    withBackButton?: false | never;
};
declare type HeaderInternalProps = WithBackButtonOrNot & {
    /**
     * Optional JSX children to display as complementary actions (e.g. buttons) related to the current page/route.
     */
    actions?: ReactElement | ReactElement[];
    /**
     * An (optional) list of navigable links to prepend to the current title.
     */
    breadcrumbs?: BreadcrumbProps['breadcrumbs'];
    /**
     * An (optional) element displayed in the center of the header, typically used to render refinement/search UI.
     */
    filters?: ReactElement;
    /**
     * The title of the element this header pertains to.
     */
    title?: ReactElement | string;
    metadata?: ReactNode;
};
declare type HeaderProps<E extends ElementType = typeof HEADER_DEFAULT_TAG> = PolymorphicProps<HeaderInternalProps, E>;
declare const Header: PolymorphicComponent<ExpandProps<HeaderInternalProps>, typeof HEADER_DEFAULT_TAG>;

declare const HEADER_HEIGHT = 56;

export { HEADER_HEIGHT, Header, HeaderProps };
