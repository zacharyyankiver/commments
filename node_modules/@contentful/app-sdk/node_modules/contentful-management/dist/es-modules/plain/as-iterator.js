function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import copy from 'fast-copy';
export const asIterator = (fn, params) => {
  return {
    [Symbol.asyncIterator]() {
      let options = copy(params);
      const get = () => fn(copy(options));
      let currentResult = get();
      return {
        current: 0,
        async next() {
          const {
            total = 0,
            items = [],
            skip = 0,
            limit = 100
          } = await currentResult;
          if (total === this.current) {
            return {
              done: true,
              value: null
            };
          }
          const value = items[this.current++ - skip];
          const endOfPage = this.current % limit === 0;
          const endOfList = this.current === total;
          if (endOfPage && !endOfList) {
            options = _objectSpread(_objectSpread({}, options), {}, {
              query: _objectSpread(_objectSpread({}, options.query), {}, {
                skip: skip + limit
              })
            });
            currentResult = get();
          }
          return {
            done: false,
            value
          };
        }
      };
    }
  };
};