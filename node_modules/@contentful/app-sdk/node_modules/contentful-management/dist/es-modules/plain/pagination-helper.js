function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * `sys.type` tends to cause type clashes downstream because it more commonly types less strict
 * as 'string'. Because we don't rely on it for this functionality, we are fine with omitting it.
 */

function isOffsetBasedCollection(collection) {
  return 'total' in collection;
}
function isCursorBasedCollection(collection) {
  return 'pages' in collection;
}
function getSearchParam(url, paramName) {
  const searchIndex = url.indexOf('?');
  if (searchIndex < 0) {
    return null;
  }
  const rawSearchParams = url.slice(searchIndex + 1);
  const searchParams = new URLSearchParams(rawSearchParams);
  return searchParams.get(paramName);
}
function range(from, to) {
  return Array.from(Array(Math.abs(to - from)), (_, i) => from + i);
}

/**
 * Parameters for endpoint methods that can be paginated are inconsistent, `fetchAll` will only
 * work with the more common version of supplying the limit, skip, and pageNext parameters via a distinct `query` property in the
 * parameters.
 */
export async function fetchAll(fetchFn, params) {
  const response = await fetchFn(_objectSpread({}, params));
  if (isOffsetBasedCollection(response)) {
    const {
      total,
      limit,
      items
    } = response;
    const hasMorePages = total > items.length;
    if (!hasMorePages) {
      return items;
    }
    const pageCount = Math.ceil(total / limit);
    const promises = range(1, pageCount).map(page => fetchFn(_objectSpread(_objectSpread({}, params), {}, {
      query: _objectSpread(_objectSpread({}, params.query), {}, {
        limit,
        skip: page * limit
      })
    })).then(result => result.items));
    const remainingItems = await Promise.all(promises);
    return [...items, ...remainingItems.flat(1)];
  }
  if (isCursorBasedCollection(response)) {
    const {
      pages,
      items
    } = response;
    if (!pages.next) {
      return items;
    }
    const pageNext = getSearchParam(pages.next, 'pageNext');
    if (!pageNext) {
      throw new Error('Missing "pageNext" query param from pages.next from response.');
    }
    return [...items, ...(await fetchAll(fetchFn, _objectSpread(_objectSpread({}, params), {}, {
      query: _objectSpread(_objectSpread({}, params.query), {}, {
        pageNext
      })
    })))];
  }
  throw new Error(`Can not determine collection type of response, neither property "total" nor "pages" are present.`);
}