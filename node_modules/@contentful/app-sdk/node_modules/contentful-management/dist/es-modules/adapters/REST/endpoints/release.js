function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as raw from './raw';
export const get = (http, params) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`);
};
export const query = (http, params) => {
  var _ref, _params$query$sysSch, _params$query;
  // Set the schema version in the query if provided in params or query options
  const releaseSchemaVersion = (_ref = (_params$query$sysSch = (_params$query = params.query) === null || _params$query === void 0 ? void 0 : _params$query['sys.schemaVersion']) !== null && _params$query$sysSch !== void 0 ? _params$query$sysSch : params.releaseSchemaVersion) !== null && _ref !== void 0 ? _ref : undefined;
  if (releaseSchemaVersion !== undefined) {
    params.query = _objectSpread(_objectSpread({}, params.query), {}, {
      'sys.schemaVersion': releaseSchemaVersion
    });
  }
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases`, {
    params: params.query
  });
};
export const create = (http, params, payload) => {
  var _payload$sys$schemaVe, _payload$sys;
  const releaseSchemaVersion = (_payload$sys$schemaVe = (_payload$sys = payload.sys) === null || _payload$sys === void 0 ? void 0 : _payload$sys.schemaVersion) !== null && _payload$sys$schemaVe !== void 0 ? _payload$sys$schemaVe : params.releaseSchemaVersion;
  if (releaseSchemaVersion === 'Release.v2') {
    payload.sys = _objectSpread(_objectSpread({}, payload.sys), {}, {
      type: 'Release',
      schemaVersion: 'Release.v2'
    });
  }
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases`, payload);
};
export const update = (http, params, payload, headers) => {
  var _payload$sys$schemaVe2, _payload$sys2;
  const releaseSchemaVersion = (_payload$sys$schemaVe2 = (_payload$sys2 = payload.sys) === null || _payload$sys2 === void 0 ? void 0 : _payload$sys2.schemaVersion) !== null && _payload$sys$schemaVe2 !== void 0 ? _payload$sys$schemaVe2 : params.releaseSchemaVersion;
  if (releaseSchemaVersion === 'Release.v2') {
    payload.sys = _objectSpread(_objectSpread({}, payload.sys), {}, {
      type: 'Release',
      schemaVersion: 'Release.v2'
    });
  }
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`, payload, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version
    }, headers)
  });
};
export const del = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}`);
};
export const publish = (http, params, headers) => {
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/published`, null, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version
    }, headers)
  });
};
export const unpublish = (http, params, headers) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/published`, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version
    }, headers)
  });
};
export const validate = (http, params, payload) => {
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/validate`, payload);
};
export const archive = (http, params) => {
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/archived`, null, {
    headers: {
      'X-Contentful-Version': params.version
    }
  });
};
export const unarchive = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/releases/${params.releaseId}/archived`, {
    headers: {
      'X-Contentful-Version': params.version
    }
  });
};