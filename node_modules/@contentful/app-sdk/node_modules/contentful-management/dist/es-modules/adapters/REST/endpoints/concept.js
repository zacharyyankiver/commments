function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as raw from './raw';
function basePath(organizationId) {
  return `/organizations/${organizationId}/taxonomy/concepts`;
}
export const create = (http, params, data) => {
  return raw.post(http, basePath(params.organizationId), data);
};
export const createWithId = (http, params, data) => {
  return raw.put(http, `${basePath(params.organizationId)}/${params.conceptId}`, data);
};
export const patch = (http, params, data, headers) => {
  return raw.patch(http, `${basePath(params.organizationId)}/${params.conceptId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version,
      'Content-Type': 'application/json-patch+json'
    }, headers)
  });
};
export const update = (http, params, data, headers) => {
  return raw.patch(http, `${basePath(params.organizationId)}/${params.conceptId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version,
      'Content-Type': 'application/json-patch+json'
    }, headers)
  });
};
export const updatePut = (http, params, data, headers) => {
  return raw.put(http, `${basePath(params.organizationId)}/${params.conceptId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': params.version
    }, headers)
  });
};
export const get = (http, params) => raw.get(http, `${basePath(params.organizationId)}/${params.conceptId}`);
export const del = (http, params, headers) => {
  var _params$version;
  return raw.del(http, `${basePath(params.organizationId)}/${params.conceptId}`, {
    headers: _objectSpread({
      'X-Contentful-Version': (_params$version = params.version) !== null && _params$version !== void 0 ? _params$version : 0
    }, headers)
  });
};
export const getMany = (http, params) => {
  const {
    url,
    queryParams
  } = cursorBasedCollection('', params);
  return raw.get(http, url, {
    params: queryParams
  });
};
export const getDescendants = (http, params) => {
  const {
    url,
    queryParams
  } = cursorBasedCollection(`/${params.conceptId}/descendants`, params);
  return raw.get(http, url, {
    params: queryParams
  });
};
export const getAncestors = (http, params) => {
  const {
    url,
    queryParams
  } = cursorBasedCollection(`/${params.conceptId}/ancestors`, params);
  return raw.get(http, url, {
    params: queryParams
  });
};
export const getTotal = (http, params) => raw.get(http, `${basePath(params.organizationId)}/total`);
function cursorBasedCollection(path, params) {
  var _params$query, _params$query2;
  return (_params$query = params.query) !== null && _params$query !== void 0 && _params$query.pageUrl ? {
    url: (_params$query2 = params.query) === null || _params$query2 === void 0 ? void 0 : _params$query2.pageUrl
  } : {
    url: `${basePath(params.organizationId)}${path}`,
    queryParams: params.query
  };
}