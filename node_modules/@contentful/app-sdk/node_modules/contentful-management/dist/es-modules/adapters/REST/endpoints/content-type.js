function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import copy from 'fast-copy';
import * as raw from './raw';
import { normalizeSelect } from './utils';
const getBaseUrl = params => `/spaces/${params.spaceId}/environments/${params.environmentId}/content_types`;
const getContentTypeUrl = params => getBaseUrl(params) + `/${params.contentTypeId}`;
export const get = (http, params, headers) => {
  return raw.get(http, getContentTypeUrl(params), {
    params: normalizeSelect(params.query),
    headers
  });
};
export const getMany = (http, params, headers) => {
  return raw.get(http, getBaseUrl(params), {
    params: params.query,
    headers
  });
};
export const create = (http, params, rawData, headers) => {
  const data = copy(rawData);
  return raw.post(http, getBaseUrl(params), data, {
    headers
  });
};
export const createWithId = (http, params, rawData, headers) => {
  const data = copy(rawData);
  return raw.put(http, getContentTypeUrl(params), data, {
    headers
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, getContentTypeUrl(params), data, {
    headers: _objectSpread({
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    }, headers)
  });
};
export const del = (http, params, headers) => {
  return raw.del(http, getContentTypeUrl(params), {
    headers
  });
};
export const publish = (http, params, rawData, headers) => {
  return raw.put(http, getContentTypeUrl(params) + '/published', null, {
    headers: _objectSpread({
      'X-Contentful-Version': rawData.sys.version
    }, headers)
  });
};
export const unpublish = (http, params, headers) => {
  return raw.del(http, getContentTypeUrl(params) + '/published', {
    headers
  });
};