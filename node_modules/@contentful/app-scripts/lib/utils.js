"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ID_REGEX = exports.resolveManifestFile = exports.selectFromList = exports.throwError = exports.showCreationError = exports.stripProtocol = exports.isValidNetwork = exports.throwValidationException = void 0;
exports.getFunctionsFromManifest = getFunctionsFromManifest;
exports.getWebAppHostname = getWebAppHostname;
const node_fs_1 = __importDefault(require("node:fs"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const cache_credential_1 = require("./cache-credential");
const constants_1 = require("./constants");
const node_path_1 = require("node:path");
const DEFAULT_MANIFEST_PATH = (0, node_path_1.resolve)('.', 'contentful-app-manifest.json');
const functionEvents = {
    appActionCall: 'appaction.call',
    appEventFilter: 'appevent.filter',
    appEventHandler: 'appevent.handler',
    appEventTransformation: 'appevent.transformation',
    fieldMappingEvent: 'graphql.field.mapping',
    resourceTypeMappingEvent: 'graphql.resourcetype.mapping',
    queryEvent: 'graphql.query',
    resourceLinksSearchEvent: 'resources.search',
    resourceLinksLookupEvent: 'resources.lookup',
};
const throwValidationException = (subject, message, details) => {
    console.log(`${chalk_1.default.red('Validation Error:')} Missing or invalid ${subject}.`);
    message && console.log(message);
    details && console.log(`${chalk_1.default.dim(details)}`);
    throw new TypeError(message);
};
exports.throwValidationException = throwValidationException;
const isValidNetwork = (address) => {
    // Regular expression to validate network addresses
    const addressRegex = new RegExp('^(?:' + // Start of the non-capturing group for the entire address
        '(?:' + // Start of the non-capturing group for domain names
        '(?:\\*\\.)' + // Matches wildcard domains like *.example.com
        '(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)' + // Matches a single subdomain
        '[a-zA-Z]{2,6}' + // Matches the top-level domain (TLD)
        '|' + // OR
        '(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+' + // Matches standard domains with one or more subdomains
        '[a-zA-Z]{2,6}' + // Matches the top-level domain (TLD)
        ')|' + // End of the non-capturing group for domain names, OR
        '(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}' + // Matches the first three octets of an IPv4 address
        '(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|' + // Matches the last octet of an IPv4 address
        '(\\[(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}\\]' + // Matches IPv6 addresses in square brackets
        '|(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4})' + // Matches IPv6 addresses without square brackets
        ')(?::\\d{1,5})?$' // Matches an optional port number (1 to 5 digits)
    );
    return addressRegex.test(address);
};
exports.isValidNetwork = isValidNetwork;
const stripProtocol = (url) => {
    const protocolRemovedUrl = url.replace(/^https?:\/\//, '');
    return protocolRemovedUrl.split('/')[0];
};
exports.stripProtocol = stripProtocol;
const showCreationError = (subject, message) => {
    console.log(`
    ${chalk_1.default.red('Creation error:')}

      Something went wrong while creating the ${chalk_1.default.bold(subject)}.

      Message:  ${chalk_1.default.red(message)}
    `);
};
exports.showCreationError = showCreationError;
const logProgress = (message) => {
    console.log('');
    console.log(`  ----------------------------
  ${message}
  ----------------------------`);
    console.log('');
};
const throwError = (err, message) => {
    console.log(`
${chalk_1.default.red('Error:')} ${message}.

${err.message}
    `);
    throw err;
};
exports.throwError = throwError;
const selectFromList = async (list, message, cachedOptionEnvVar) => {
    const cachedEnvVar = process.env[cachedOptionEnvVar];
    const cachedElement = list.find((item) => item.value === cachedEnvVar);
    if (cachedElement) {
        logProgress(`${message}
      Using environment variable: ${cachedElement.name} (${chalk_1.default.blue(cachedElement.value)})`);
        return cachedElement;
    }
    else {
        const { elementId } = await inquirer_1.default.prompt([
            {
                name: 'elementId',
                message: message,
                type: 'list',
                choices: list,
            },
        ]);
        if (cachedOptionEnvVar) {
            await (0, cache_credential_1.cacheEnvVars)({ [cachedOptionEnvVar]: elementId });
        }
        return list.find((el) => el.value === elementId);
    }
};
exports.selectFromList = selectFromList;
function getFunctionsFromManifest() {
    const isManifestExists = node_fs_1.default.existsSync(DEFAULT_MANIFEST_PATH);
    if (!isManifestExists) {
        return;
    }
    try {
        const manifest = JSON.parse(node_fs_1.default.readFileSync(DEFAULT_MANIFEST_PATH, { encoding: 'utf8' }));
        if (!Array.isArray(manifest['functions']) || manifest['functions'].length === 0) {
            return;
        }
        logProgress(`functions found in ${chalk_1.default.bold(DEFAULT_MANIFEST_PATH)}.`);
        const items = manifest['functions'].map((item) => {
            const allowNetworks = Array.isArray(item.allowNetworks)
                ? item.allowNetworks.map(exports.stripProtocol)
                : [];
            const accepts = 'accepts' in item && Array.isArray(item.accepts) ? item.accepts : undefined;
            const hasInvalidEvent = accepts?.some((event) => !Object.values(functionEvents).includes(event));
            const hasInvalidNetwork = allowNetworks.find((netWork) => !(0, exports.isValidNetwork)(netWork));
            if (hasInvalidNetwork) {
                console.log(`${chalk_1.default.red('Error:')} Invalid IP address ${hasInvalidNetwork} found in the allowNetworks array for Function "${item.name}".`);
                // eslint-disable-next-line no-process-exit
                process.exit(1);
            }
            if (hasInvalidEvent) {
                console.log(`${chalk_1.default.red('Error:')} Invalid events found in the accepts array for Function "${item.name}".`);
                // eslint-disable-next-line no-process-exit
                process.exit(1);
            }
            // EntryFile is not used but we do want to strip it
            // eslint-disable-next-line no-unused-vars
            const { entryFile: _, ...itemWithoutEntryFile } = item;
            return {
                ...itemWithoutEntryFile,
                ...(accepts && { accepts }),
                allowNetworks,
            };
        });
        return items;
    }
    catch {
        console.log(`${chalk_1.default.red('Error:')} Invalid JSON in manifest file at ${chalk_1.default.bold(DEFAULT_MANIFEST_PATH)}.`);
        // eslint-disable-next-line no-process-exit
        process.exit(1);
    }
}
function getWebAppHostname(host) {
    return host && host.includes('api') ? host.replace('api', 'app') : constants_1.DEFAULT_CONTENTFUL_APP_HOST;
}
const resolveManifestFile = (options, cwd = process.cwd()) => {
    const manifestPath = options.manifestFile
        ? (0, node_path_1.resolve)(cwd, options.manifestFile)
        : (0, node_path_1.resolve)(cwd, 'contentful-app-manifest.json');
    return JSON.parse(node_fs_1.default.readFileSync(manifestPath, 'utf-8'));
};
exports.resolveManifestFile = resolveManifestFile;
exports.ID_REGEX = /^[a-zA-Z0-9]+$/;
