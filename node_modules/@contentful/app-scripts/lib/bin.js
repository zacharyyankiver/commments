#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const index_1 = require("./index");
const feedback_1 = require("./feedback");
async function runCommand(command, options) {
    const { ci } = commander_1.program.opts();
    return ci ? await command.nonInteractive(options) : await command.interactive(options);
}
(async function main() {
    const version = process.env.npm_package_version ?? '';
    commander_1.program.version(version).option('--ci', 'Execute in non-interactive mode', false);
    commander_1.program
        .command('create-app-definition')
        .description('Create a new AppDefinition for an App')
        .action(async () => {
        await runCommand(index_1.createAppDefinition);
    });
    commander_1.program
        .command('upload')
        .description('Upload your build folder and create an AppBundle')
        .option('--bundle-dir [directory]', 'The directory of your build folder')
        .option('--organization-id [orgId]', 'The id of your organization')
        .option('--definition-id [defId]', "The id of your app's definition")
        .option('--token [accessToken]', 'Your content management access token')
        .option('--comment [comment]', 'Optional comment for the created bundle')
        .option('--skip-activation', 'A Boolean flag to skip automatic activation')
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.upload, options);
    });
    commander_1.program
        .command('activate')
        .description('Mark an AppBundle as "active" for a given AppDefinition')
        .option('--bundle-id [bundleId]', 'The id of your bundle')
        .option('--organization-id [orgId]', 'The id of your organization')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--token [accessToken]', 'Your content management access token')
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.activate, options);
    });
    commander_1.program
        .command('open-settings')
        .description('Opens the app editor for a given AppDefinition')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.open, options);
    });
    commander_1.program
        .command('bundle-cleanup')
        .description('Removes old, non-active bundles, only keeps the 50 most recent ones')
        .option('--organization-id [orgId]', 'The id of your organization')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--token [accessToken]', 'Your content management access token')
        .option('--keep [keepAmount]', 'The amount of bundles that should remain')
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.cleanup, options);
    });
    commander_1.program
        .command('feedback')
        .description('Provide Contentful with feedback on the CLI')
        .action(async (options) => {
        await runCommand(feedback_1.feedback, options);
    });
    commander_1.program
        .command('install')
        .description('Opens a picker to select the space and environment for installing the app associated with a given AppDefinition')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.install, options);
    });
    commander_1.program
        .command('build-functions')
        .description('Builds Contentful Function source into an App Framework compatible bundle.')
        .option('-e, --esbuild-config <path>', 'custom esbuild config file path')
        .option('-m, --manifest-file <path>', 'Contentful app manifest file path')
        .option('-w, --watch', 'watch for changes')
        .action(async (options) => {
        await runCommand(index_1.buildFunctions, options);
    });
    commander_1.program
        .command('generate-function')
        .description('Generate a new Contentful Function')
        .option('-n, --name <name>', 'Name of the function')
        .option('-e, --example <example>', 'Name of the reference example')
        .option('-l, --language <language>', 'Select a language for the function')
        .option('--keep-package-json', 'The package.json file will create or overwrite the existing package.json file in the main directory')
        .action(async (options) => {
        await runCommand(index_1.generateFunction, options);
    });
    commander_1.program
        .command('upsert-actions')
        .description('Upsert Action(s) for an App')
        .option('-m, --manifest-file <path>', 'Contentful app manifest file path')
        .option('--organization-id [orgId]', 'The id of your organization')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--token [accessToken]', 'Your content management access token')
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.upsertActions, options);
    });
    commander_1.program
        .command('add-locations')
        .description('Add locations(s) to an App')
        .option('--organization-id [orgId]', 'The id of your organization')
        .option('--definition-id  [defId]', "The id of your app's definition")
        .option('--token [accessToken]', 'Your content management access token')
        .option('--host [host]', 'Contentful subdomain to use, e.g. "api.contentful.com"')
        .action(async (options) => {
        await runCommand(index_1.addLocations, options);
    });
    commander_1.program.hook('preAction', (thisCommand) => {
        (0, index_1.track)({ command: thisCommand.args[0], ci: thisCommand.opts().ci });
    });
    await commander_1.program.parseAsync(process.argv);
})().catch((e) => {
    console.error(e);
    // eslint-disable-next-line no-process-exit
    process.exit(1);
});
