"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveEsBuildConfig = exports.validateFunctions = void 0;
exports.buildFunctions = buildFunctions;
/* eslint-disable @typescript-eslint/no-var-requires */
const esbuild_1 = __importDefault(require("esbuild"));
const node_path_1 = __importStar(require("node:path"));
const node_modules_polyfill_1 = require("@esbuild-plugins/node-modules-polyfill");
const node_globals_polyfill_1 = require("@esbuild-plugins/node-globals-polyfill");
const zod_1 = require("zod");
const utils_1 = require("../utils");
const functionManifestSchema = zod_1.z
    .object({
    functions: zod_1.z.array(zod_1.z
        .object({
        id: zod_1.z.string().regex(utils_1.ID_REGEX, 'Invalid "id" (must only contain alphanumeric characters)'),
        name: zod_1.z.string(),
        description: zod_1.z.string(),
        path: zod_1.z.string(),
        entryFile: zod_1.z.string(),
        accepts: zod_1.z.array(zod_1.z.string()),
    }, {})
        .required()),
})
    .required();
const validateFunctions = (manifest) => {
    const validationResult = functionManifestSchema.safeParse(manifest);
    if (!validationResult.success) {
        throw new Error(`Invalid Contentful Function manifest: ${JSON.stringify(validationResult.error.issues)}`);
    }
    const uniqueValues = new Set();
    validationResult.data.functions.forEach((contentfulFunction) => {
        const { id, path, entryFile, accepts } = contentfulFunction;
        if (uniqueValues.has(id)) {
            throw new Error(`Duplicate function id: '${id}'`);
        }
        if (uniqueValues.has(path)) {
            throw new Error(`Duplicate function path: '${path}'`);
        }
        if (uniqueValues.has(entryFile)) {
            throw new Error(`Duplicate entryFile path: '${entryFile}'`);
        }
        uniqueValues.add(entryFile);
        uniqueValues.add(path);
        uniqueValues.add(id);
        const acceptsSet = new Set(accepts);
        if (acceptsSet.size !== accepts.length) {
            throw new Error(`Duplicate values found in 'accepts' for function with id '${id}'.`);
        }
        // Validate POSIX style paths
        if (path.includes('\\')) {
            throw new Error(`Function path must use POSIX style forward slashes, got: '${path}'`);
        }
        if (entryFile.includes('\\')) {
            throw new Error(`Function entryFile must use POSIX style forward slashes, got: '${entryFile}'`);
        }
    });
};
exports.validateFunctions = validateFunctions;
/**
 * Build the esbuild config `entryPoints` object from the functions manifest.
 * Uses posix style paths for consistency with the app manifest.
 */
const getEntryPoints = (manifest) => {
    return manifest.functions.reduce((result, contentfulFunction) => {
        const fileProperties = node_path_1.default.posix.parse(contentfulFunction.entryFile);
        const buildAlias = node_path_1.default.posix.join(fileProperties.dir, fileProperties.name);
        const resolvedPath = node_path_1.default.posix.resolve('.', contentfulFunction.entryFile);
        let relativePath = node_path_1.default.posix.relative('.', resolvedPath);
        if (!relativePath.startsWith('.')) {
            relativePath = `./${relativePath}`;
        }
        result[buildAlias] = relativePath;
        return result;
    }, {});
};
const resolveEsBuildConfig = (options, manifest, cwd = process.cwd()) => {
    if (options.esbuildConfig) {
        const esbuildConfigFileProperties = (0, node_path_1.parse)(options.esbuildConfig);
        const dir = esbuildConfigFileProperties.dir === '' ? cwd : esbuildConfigFileProperties.dir;
        const absolutePath = (0, node_path_1.resolve)(dir, esbuildConfigFileProperties.base);
        const relativePath = (0, node_path_1.relative)(__dirname, absolutePath);
        // Convert the relative path to a module path that require() can use
        // On Windows, this means convert ..\path\to\file.js to ../path/to/file.js
        let modulePath = relativePath.replaceAll("\\", '/');
        if (!modulePath.startsWith('./')) {
            modulePath = `./${modulePath}`;
        }
        return require(modulePath);
    }
    return {
        entryPoints: getEntryPoints(manifest),
        bundle: true,
        outdir: 'build',
        format: 'esm',
        target: 'es2022',
        minify: true,
        define: {
            global: 'globalThis',
        },
        plugins: [(0, node_modules_polyfill_1.NodeModulesPolyfillPlugin)(), (0, node_globals_polyfill_1.NodeGlobalsPolyfillPlugin)()],
        logLevel: 'info',
    };
};
exports.resolveEsBuildConfig = resolveEsBuildConfig;
async function buildFunctions(options) {
    const manifest = (0, utils_1.resolveManifestFile)(options);
    try {
        console.log('Building functions');
        (0, exports.validateFunctions)(manifest);
        const esbuildConfig = (0, exports.resolveEsBuildConfig)(options, manifest);
        if (options.watch) {
            const context = await esbuild_1.default.context(esbuildConfig);
            await context.watch();
        }
        else {
            await esbuild_1.default.build(esbuildConfig);
        }
        return;
    }
    catch (e) {
        const error = e;
        error.message = `Error building functions: ${e.message}`;
        console.error(error.message);
        throw Error(error.message, { cause: error.cause });
    }
}
