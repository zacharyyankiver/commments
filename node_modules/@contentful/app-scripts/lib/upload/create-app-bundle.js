"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAppBundleFromUpload = createAppBundleFromUpload;
exports.processCreateAppBundleError = processCreateAppBundleError;
exports.createAppBundleFromSettings = createAppBundleFromSettings;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const utils_1 = require("../utils");
const contentful_management_1 = require("contentful-management");
const create_app_upload_1 = require("./create-app-upload");
async function createAppBundleFromUpload(settings, appUploadId) {
    const { accessToken, host, userAgentApplication, comment, functions } = settings;
    const clientSpinner = (0, ora_1.default)('Verifying your upload...').start();
    const client = (0, contentful_management_1.createClient)({
        accessToken,
        host,
        application: userAgentApplication ? userAgentApplication : 'contentful.app-scripts',
    });
    const organization = await client.getOrganization(settings.organization.value);
    const appDefinition = await organization.getAppDefinition(settings.definition.value);
    clientSpinner.stop();
    let appBundle = null;
    const bundleSpinner = (0, ora_1.default)('Creating the app bundle...').start();
    try {
        appBundle = await appDefinition.createAppBundle({
            appUploadId,
            comment: comment && comment.length > 0 ? comment : undefined,
            functions,
        });
    }
    catch (err) {
        (0, utils_1.showCreationError)('app upload', processCreateAppBundleError(err));
    }
    bundleSpinner.stop();
    return appBundle;
}
function processCreateAppBundleError(err) {
    try {
        const message = JSON.parse(err.message);
        const reasons = message.details?.reasons;
        if (message.status !== 403 || !reasons) {
            return err.message;
        }
        if (message['status'] == 403 && message.details?.reasons) {
            if (reasons.includes('Not entitled to App Functions.')) {
                return 'Your app seems to be using App Functions, which your organization is not entitled to. Remove your app function, or upgrade your account to proceed with your app upload.';
            }
            else {
                return reasons;
            }
        }
        else {
            return reasons;
        }
    }
    catch (e) {
        return err.message;
    }
}
async function createAppBundleFromSettings(settings) {
    let appUpload = null;
    try {
        appUpload = await (0, create_app_upload_1.createAppUpload)(settings);
        if (!appUpload)
            return;
        console.log(`
  ${chalk_1.default.yellow('Done!')} Your files were successfully uploaded and a new AppUpload (${chalk_1.default.dim(appUpload.sys.id)}) has been created.`);
    }
    catch (err) {
        return (0, utils_1.showCreationError)('app upload', err.message);
    }
    console.log('');
    console.log(`  ----------------------------`);
    const appBundle = await createAppBundleFromUpload(settings, appUpload.sys.id);
    if (!appBundle)
        return;
    console.log(`
  ${chalk_1.default.cyan('Success!')} Created a new app bundle for ${chalk_1.default.cyan(settings.definition.name)} in ${chalk_1.default.bold(settings.organization.name)}.

  Bundle Id: ${chalk_1.default.yellow(appBundle.sys.id)}
  `);
    const webApp = (0, utils_1.getWebAppHostname)(settings.host);
    if (settings.skipActivation) {
        console.log(`
  ${chalk_1.default.green(`NEXT STEPS:`)}

    ${chalk_1.default.bold('You can activate this app bundle in your apps settings:')}

      ${chalk_1.default.underline(`https://${webApp}/deeplink?link=app-definition-list`)}

    ${chalk_1.default.bold('or by simply running the cli command:')}

      ${chalk_1.default.underline('npx @contentful/app-scripts activate')}

  `);
    }
    return appBundle;
}
