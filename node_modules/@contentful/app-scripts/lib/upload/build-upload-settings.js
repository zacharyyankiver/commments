"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAppUploadSettings = buildAppUploadSettings;
exports.hostProtocolFilter = hostProtocolFilter;
const inquirer_1 = require("inquirer");
const get_app_info_1 = require("../get-app-info");
const utils_1 = require("../utils");
const constants_1 = require("../constants");
const node_path_1 = __importDefault(require("node:path"));
async function buildAppUploadSettings(options) {
    const functionManifest = (0, utils_1.getFunctionsFromManifest)();
    const prompts = [];
    const { bundleDir, comment, skipActivation, host } = options;
    if (!bundleDir) {
        prompts.push({
            name: 'bundleDirectory',
            message: `Bundle directory, if not default:`,
            default: node_path_1.default.resolve('.', 'build'),
        });
    }
    if (!comment) {
        prompts.push({
            name: 'comment',
            message: `Add a comment to the created bundle:`,
            default: '',
        });
    }
    if (skipActivation === undefined) {
        prompts.push({
            type: 'confirm',
            name: 'activateBundle',
            message: `Do you want to activate the bundle after upload?`,
            default: true,
        });
    }
    if (!host) {
        prompts.push({
            name: 'host',
            message: `Contentful CMA endpoint URL:`,
            default: constants_1.DEFAULT_CONTENTFUL_API_HOST,
            filter: hostProtocolFilter,
        });
    }
    const { activateBundle, host: interactiveHost, ...appUploadSettings } = await (0, inquirer_1.prompt)(prompts);
    const hostValue = host || interactiveHost;
    const appInfo = await (0, get_app_info_1.getAppInfo)({ ...options, host: hostValue });
    return {
        bundleDirectory: bundleDir,
        skipActivation: skipActivation === undefined ? !activateBundle : skipActivation,
        comment,
        host: hostValue,
        functions: functionManifest,
        ...appUploadSettings,
        ...appInfo,
    };
}
function hostProtocolFilter(input) {
    return input.replace(/^https?:\/\//, '');
}
