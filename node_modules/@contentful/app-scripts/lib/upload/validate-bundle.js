"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateBundle = void 0;
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const chalk_1 = __importDefault(require("chalk"));
const ACCEPTED_ENTRY_FILES = ['index.html'];
const getEntryFile = (files) => files.find((file) => ACCEPTED_ENTRY_FILES.includes(file));
const ABSOLUTE_PATH_REG_EXP = /(src|href)="\/([^/])([^"]*)+"/g;
const fileContainsAbsolutePath = (fileContent) => {
    return [...fileContent.matchAll(ABSOLUTE_PATH_REG_EXP)].length > 0;
};
const validateBundle = (path, { functions }) => {
    const buildFolder = node_path_1.default.join('.', path);
    const files = node_fs_1.default.readdirSync(buildFolder, { recursive: true, encoding: 'utf-8' });
    const entry = getEntryFile(files);
    if (!entry && !functions) {
        throw new Error('Ensure your bundle includes a valid index.html file in its root folder, or a valid Contentful Function entrypoint (defined in your contentful-app-manifest.json file).');
    }
    if (entry) {
        const entryFile = node_fs_1.default.readFileSync(node_path_1.default.join(buildFolder, entry), { encoding: 'utf8' });
        if (fileContainsAbsolutePath(entryFile)) {
            console.log('----------------------------');
            console.warn(`${chalk_1.default.red('Warning:')} This bundle uses absolute paths. Please use relative paths instead for correct rendering. See more details here https://www.contentful.com/developers/docs/extensibility/app-framework/app-bundle/#limitations`);
            console.log('----------------------------');
        }
    }
    if (functions) {
        const posixFormattedFiles = new Set(files.map((file) => file.replace(/\\/g, '/')));
        const functionWithoutEntryFile = functions.find(({ path }) => !posixFormattedFiles.has(path));
        if (functionWithoutEntryFile) {
            throw new Error(`Function "${functionWithoutEntryFile.id}" is missing its entry file at "${node_path_1.default.join(buildFolder, functionWithoutEntryFile.path)}".`);
        }
    }
};
exports.validateBundle = validateBundle;
