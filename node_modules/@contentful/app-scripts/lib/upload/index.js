"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = void 0;
const activate_bundle_1 = require("../activate/activate-bundle");
const get_upload_settings_args_1 = require("./get-upload-settings-args");
const create_app_bundle_1 = require("./create-app-bundle");
const build_upload_settings_1 = require("./build-upload-settings");
const feedback_1 = require("../feedback/feedback");
function uploadSettingsHaveAppEventFunction(settings) {
    return (settings.functions &&
        settings.functions.some((fn) => fn.accepts.some((fnType) => fnType.startsWith('appevent'))));
}
async function uploadAndActivate(settings) {
    const bundle = await (0, create_app_bundle_1.createAppBundleFromSettings)(settings);
    if (uploadSettingsHaveAppEventFunction(settings)) {
        console.log('Remember that in order to be invoked, your App Event function(s) must be linked to your App Event subscription using the CMA or the Events tab of the App Details page.');
    }
    if (!settings.skipActivation && bundle) {
        const hasFrontend = bundle.files.length > 0;
        await (0, activate_bundle_1.activateBundle)({ ...settings, bundleId: bundle.sys.id, hasFrontend });
        (0, feedback_1.logFeedbackNudge)();
    }
}
const interactive = async (options) => {
    const settings = await (0, build_upload_settings_1.buildAppUploadSettings)(options);
    await uploadAndActivate(settings);
};
const nonInteractive = async (options) => {
    const settings = await (0, get_upload_settings_args_1.getUploadSettingsArgs)(options);
    await uploadAndActivate(settings);
};
exports.upload = {
    interactive,
    nonInteractive,
};
