"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAppUpload = createAppUpload;
const ora_1 = __importDefault(require("ora"));
const create_zip_from_directory_1 = require("./create-zip-from-directory");
const validate_bundle_1 = require("./validate-bundle");
const utils_1 = require("../utils");
const contentful_management_1 = require("contentful-management");
async function createAppBundleFromFile(orgId, token, zip, host = '') {
    const client = (0, contentful_management_1.createClient)({
        accessToken: token,
        host,
        hostUpload: host.replace(/^api/i, 'upload'),
    });
    const org = await client.getOrganization(orgId);
    return await org.createAppUpload(zip);
}
async function createAppUpload(settings) {
    (0, validate_bundle_1.validateBundle)(settings.bundleDirectory || '.', settings);
    let appUpload = null;
    const zipFileSpinner = (0, ora_1.default)('Preparing your files for upload...').start();
    const zipFile = await (0, create_zip_from_directory_1.createZipFileFromDirectory)(settings.bundleDirectory || '.');
    zipFileSpinner.stop();
    if (!zipFile)
        return;
    const uploadSpinner = (0, ora_1.default)('Uploading your files...').start();
    try {
        appUpload = await createAppBundleFromFile(settings.organization.value, settings.accessToken, zipFile, settings.host);
    }
    catch (err) {
        (0, utils_1.showCreationError)('app bundle', err.message);
    }
    uploadSpinner.stop();
    return appUpload;
}
