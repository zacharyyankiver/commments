"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doUpsert = doUpsert;
exports.syncUpsertToManifest = syncUpsertToManifest;
exports.processActionManifests = processActionManifests;
exports.upsertAppActions = upsertAppActions;
const chalk_1 = require("chalk");
const contentful_management_1 = require("contentful-management");
const node_fs_1 = __importDefault(require("node:fs"));
const ora_1 = __importDefault(require("ora"));
const utils_1 = require("../utils");
const client_1 = require("./client");
const make_cma_payload_1 = require("./make-cma-payload");
const validation_1 = require("./validation");
async function doUpsert(client, appDefinitionId, payload) {
    if (payload.id) {
        const existingAction = await (0, client_1.getExistingAction)(client, appDefinitionId, payload.id);
        if (existingAction) {
            const { id, ...update } = payload;
            return (0, client_1.updateAction)(client, appDefinitionId, id, update);
        }
        else if (!existingAction && payload.type === 'endpoint') {
            throw new Error(`Action with id ${payload.id} not found. Endpoint actions may not set a custom ID.`);
        }
    }
    return (0, client_1.createAction)(client, appDefinitionId, payload);
}
function syncUpsertToManifest(manifestActions, actionsToSync, manifest, manifestFile) {
    const actions = manifestActions.map((action, i) => {
        const syncedAction = actionsToSync[i];
        return syncedAction || action;
    });
    node_fs_1.default.writeFileSync(manifestFile, JSON.stringify({ ...manifest, actions }, null, 2));
    console.log(`Remote updates synced to your manifest file at ${(0, chalk_1.yellow)(manifestFile)}.`);
}
async function processActionManifests(actions, doUpsert) {
    const actionsToSync = {};
    const errors = [];
    for (const i in actions) {
        const action = actions[i];
        const payload = (0, make_cma_payload_1.makeAppActionCMAPayload)(action);
        try {
            const appAction = await doUpsert(payload);
            actionsToSync[i] = {
                ...action,
                id: appAction.sys.id,
            };
        }
        catch (err) {
            errors.push({ details: err, path: ['actions', i] });
        }
    }
    return { actionsToSync, errors };
}
async function upsertAppActions(settings) {
    const { accessToken, appDefinitionId, host, organizationId, manifestFile } = settings;
    const manifest = await (0, utils_1.resolveManifestFile)({ manifestFile });
    const actions = (0, validation_1.validateActionsManifest)(manifest);
    const spinner = (0, ora_1.default)('Creating your app action(s)').start();
    const client = (0, contentful_management_1.createClient)({
        accessToken,
        host,
    }, {
        type: 'plain',
        defaults: {
            organizationId,
        },
    });
    const { actionsToSync, errors } = await processActionManifests(actions, async (payload) => doUpsert(client, appDefinitionId, payload));
    syncUpsertToManifest(actions, actionsToSync, manifest, manifestFile);
    if (errors.length) {
        const error = new Error(`Failed to upsert actions`);
        Object.assign(error, { details: errors.map(({ details }) => details) });
        (0, utils_1.throwError)(error, 'Failed to upsert actions');
    }
    spinner.stop();
}
