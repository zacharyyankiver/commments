"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateId = void 0;
exports.validateActionsManifest = validateActionsManifest;
const zod_1 = __importDefault(require("zod"));
const utils_1 = require("../utils");
const parametersSchema = zod_1.default
    .array(zod_1.default.object({
    id: zod_1.default.string(),
    name: zod_1.default.string(),
    description: zod_1.default.string().optional(),
    type: zod_1.default.enum(['Symbol', 'Enum', 'Number', 'Boolean']),
    required: zod_1.default.boolean(),
    default: zod_1.default.union([zod_1.default.string(), zod_1.default.number(), zod_1.default.boolean()]).optional(),
}));
const validateId = (id) => {
    if (!utils_1.ID_REGEX.test(id)) {
        return {
            ok: false,
            message: `Invalid "id" (must only contain alphanumeric characters). Received: ${id}.`,
        };
    }
    return { ok: true };
};
exports.validateId = validateId;
function validateActionsManifest(manifest) {
    if (!manifest.actions) {
        throw new Error('Invalid App Action manifest: missing "actions" field');
    }
    const { actions } = manifest;
    if (!Array.isArray(actions)) {
        throw new Error('Invalid App Action manifest: "actions" must be an array');
    }
    const errors = actions.reduce((acc, action) => {
        if (!action.name) {
            acc.push(new Error('Invalid App Action manifest: Actions must define a "name".'));
        }
        if (!action.type) {
            acc.push(new Error('Invalid App Action manifest: Actions must define a "type".'));
        }
        if (!action.category) {
            acc.push(new Error('Invalid App Action manifest: Actions must define a "category".'));
        }
        if (action.type === 'function-invocation' && (!action.functionId || action.url)) {
            acc.push(new Error('Invalid App Action manifest: "function-invocation" Actions must define a "functionId" and may not target a "url".'));
        }
        if (action.type === 'endpoint' && (!action.url || action.functionId)) {
            acc.push(new Error('Invalid App Action manifest: "endpoint" Actions must define a "url" and may not target a "functionId".'));
        }
        if (action.id) {
            const { ok, message } = (0, exports.validateId)(action.id);
            if (!ok) {
                acc.push(new Error(`Invalid App Action manifest: ${message}`));
            }
        }
        if (action.category !== 'Custom' && action.parameters) {
            acc.push(new Error('Invalid App Action manifest: native Action categories may not define "parameters"'));
        }
        if (action.category === 'Custom' && !action.parameters) {
            acc.push(new Error('Invalid App Action manifest: "Custom" Action categories must define "parameters"'));
        }
        if (action.category === 'Custom' && action.parameters) {
            const parametersValidationResult = parametersSchema.safeParse(action.parameters);
            if (!parametersValidationResult.success) {
                acc.push(new Error(`Invalid App Action manifest: invalid "parameters" - ${JSON.stringify(parametersValidationResult.error.errors)}`));
            }
        }
        return acc;
    }, []);
    if (errors.length) {
        throw new Error(errors.map((error) => error.message).join('\n'));
    }
    return actions;
}
