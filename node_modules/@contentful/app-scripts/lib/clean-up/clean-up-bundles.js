"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanUpBundles = cleanUpBundles;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const bottleneck_1 = __importDefault(require("bottleneck"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const contentful_management_1 = require("contentful-management");
async function deleteBundle(bundleId, index, maxIndex, client, settings) {
    const deleteSpinner = (0, ora_1.default)(`Deleting ${index + 1} out of ${maxIndex} bundles...`).start();
    await client.appBundle.delete({
        appBundleId: bundleId,
        appDefinitionId: settings.definition.value,
        organizationId: settings.organization.value,
    });
    deleteSpinner.stop();
    console.log(`${chalk_1.default.green('Done:')} ${index + 1}/${maxIndex} bundles deleted successfully`);
}
const scheduleBundleDeletion = async (bundlesToDelete, client, settings) => {
    const limiter = new bottleneck_1.default({ maxConcurrent: constants_1.MAX_CONCURRENT_DELETION_CALLS });
    await Promise.all(bundlesToDelete.map((bundle, index) => limiter.schedule(() => deleteBundle(bundle.sys.id, index, bundlesToDelete.length, client, settings))));
};
async function cleanUpBundles(settings) {
    let definition;
    let bundlesToDelete;
    const client = (0, contentful_management_1.createClient)({
        host: settings.host,
        accessToken: settings.accessToken,
    }, { type: 'plain' });
    const fetchAppBundles = async (limit = constants_1.DEFAULT_BUNDLES_TO_FETCH, skip = 0) => {
        return await client.appBundle.getMany({
            appDefinitionId: settings.definition.value,
            organizationId: settings.organization.value,
            query: {
                limit,
                skip,
            },
        });
    };
    const getAppBundles = async (requestedAmount = constants_1.DEFAULT_BUNDLES_TO_FETCH) => {
        if (requestedAmount < 1) {
            throw new Error('Requested amount of bundles to fetch must be greater than 0');
        }
        const getBundles = async (limit, skip = 0) => {
            const result = await fetchAppBundles(limit, skip);
            const currLength = skip + result.items.length;
            if (result.total > currLength) {
                return [...result.items, ...(await getBundles(result.items.length, currLength))];
            }
            else {
                return result.items;
            }
        };
        const all = await getBundles(constants_1.DEFAULT_BUNDLES_TO_FETCH, 0);
        return all.reverse().slice(0, requestedAmount);
    };
    const getAppBundleCount = async () => {
        return await fetchAppBundles(1, 0);
    };
    const bundlesSpinner = (0, ora_1.default)(`Fetching all bundles...`).start();
    try {
        const { total } = await getAppBundleCount();
        const amountToDelete = total - settings.keep;
        if (amountToDelete < 1) {
            console.log(`${chalk_1.default.yellow('Warning:')} There is nothing to delete`);
            bundlesSpinner.stop();
            return;
        }
        bundlesToDelete = await getAppBundles(amountToDelete);
        definition = await client.appDefinition.get({
            appDefinitionId: settings.definition.value,
            organizationId: settings.organization.value,
        });
    }
    catch (e) {
        return (0, utils_1.throwError)(e, 'Something went wrong fetching the bundles');
    }
    bundlesSpinner.stop();
    if (definition.bundle) {
        bundlesToDelete = bundlesToDelete.filter((bundle) => bundle.sys.id !== definition.bundle.sys.id);
    }
    if (bundlesToDelete.length < 1) {
        console.log(`${chalk_1.default.yellow('Warning:')} There is nothing to delete`);
    }
    console.log(`

${chalk_1.default.cyan('Info:')} ${bundlesToDelete.length} bundle${bundlesToDelete.length > 1 ? 's' : ''} will be deleted

  `);
    try {
        await scheduleBundleDeletion(bundlesToDelete, client, settings);
        console.log(`${chalk_1.default.green('Success:')} All ${bundlesToDelete.length} bundles are deleted successfully`);
    }
    catch (e) {
        return (0, utils_1.throwError)(e, 'Something went wrong deleting the bundles');
    }
}
