"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = add;
const ora_1 = __importDefault(require("ora"));
const chalk_1 = require("chalk");
const utils_1 = require("../utils");
const contentful_management_1 = require("contentful-management");
const create_type_safe_locations_1 = require("../create-type-safe-locations");
async function add(settings) {
    const { accessToken, organization, definition, host } = settings;
    const activationSpinner = (0, ora_1.default)('Adding locations').start();
    const plainClient = (0, contentful_management_1.createClient)({ accessToken, host }, { type: 'plain' });
    const defaultLocations = [{ location: 'dialog' }];
    try {
        const currentDefinition = await plainClient.appDefinition.get({
            appDefinitionId: definition.value,
            organizationId: organization.value,
        });
        const typeSafeLocations = (0, create_type_safe_locations_1.createTypeSafeLocations)(settings);
        currentDefinition.locations = [
            ...(currentDefinition.locations ?? defaultLocations),
            ...typeSafeLocations,
        ];
        const appBundleId = currentDefinition.bundle?.sys.id;
        const currentBundle = appBundleId ? await plainClient.appBundle.get({
            appDefinitionId: definition.value,
            appBundleId,
            organizationId: organization.value,
        }) : await Promise.resolve(undefined);
        const hasFrontendFiles = (currentBundle?.files?.length ?? 0) > 0;
        const hasSrc = !!currentDefinition.src;
        const useDefaultSrc = !hasFrontendFiles && !hasSrc;
        if (useDefaultSrc) {
            currentDefinition.src = 'http://localhost:3000';
        }
        await plainClient.appDefinition.update({
            appDefinitionId: definition.value,
            organizationId: organization.value,
        }, currentDefinition);
        console.log(`
      ${(0, chalk_1.cyan)('Success!')} Your locations were added to ${(0, chalk_1.cyan)(definition.name)}
      Locations: ${(0, chalk_1.yellow)(typeSafeLocations.map((l) => (0, chalk_1.bold)(l.location)).join(', '))}`);
    }
    catch (err) {
        (0, utils_1.throwError)(err, 'Something went wrong addding locations. Make sure you used the correct definition-id.');
    }
    finally {
        activationSpinner.stop();
    }
}
