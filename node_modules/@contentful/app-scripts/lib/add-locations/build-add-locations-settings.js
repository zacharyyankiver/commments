"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAddLocationsSettings = buildAddLocationsSettings;
exports.hostProtocolFilter = hostProtocolFilter;
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = require("inquirer");
const get_app_info_1 = require("../get-app-info");
const constants_1 = require("../constants");
const location_prompts_1 = require("../location-prompts");
async function buildAddLocationsSettings(options) {
    const appPrompts = [];
    const { host } = options;
    if (!host) {
        appPrompts.push({
            name: 'host',
            message: `Contentful CMA endpoint URL:`,
            default: constants_1.DEFAULT_CONTENTFUL_API_HOST,
            filter: hostProtocolFilter,
        });
    }
    const { host: interactiveHost } = await (0, inquirer_1.prompt)(appPrompts);
    const hostValue = host || interactiveHost;
    const appInfo = await (0, get_app_info_1.getAppInfo)({ ...options, host: hostValue });
    const locationPrompts = [];
    const currentLocations = new Set(appInfo.definition.locations);
    const possibleLocations = location_prompts_1.selectLocationsPrompt.choices.filter((locationChoice) => !currentLocations.has(locationChoice.value));
    if (possibleLocations.length === 0) {
        console.log(`${chalk_1.default.red('No locations to add')}`);
        // eslint-disable-next-line no-process-exit
        process.exit(1);
    }
    if (possibleLocations.length > 0) {
        locationPrompts.push({
            ...location_prompts_1.selectLocationsPrompt,
            choices: possibleLocations,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            validate(input) {
                if (input.length < 1) {
                    return 'You must choose at least one location to add.';
                }
                return true;
            },
        });
        if (possibleLocations.some((location) => location.value === 'entry-field')) {
            locationPrompts.push({ ...location_prompts_1.selectFieldsPrompt });
        }
        if (possibleLocations.some((location) => location.value === 'page')) {
            locationPrompts.push({ ...location_prompts_1.pageNavPrompt });
            locationPrompts.push({ ...location_prompts_1.pageNavLinkNamePrompt });
            locationPrompts.push({ ...location_prompts_1.pageNavLinkPathPrompt });
        }
    }
    const addLocationSettings = await (0, inquirer_1.prompt)(locationPrompts);
    return {
        host: hostValue,
        ...addLocationSettings,
        ...appInfo,
    };
}
function hostProtocolFilter(input) {
    return input.replace(/^https?:\/\//, '');
}
