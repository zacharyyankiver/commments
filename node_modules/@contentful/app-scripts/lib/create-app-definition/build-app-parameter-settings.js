"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAppParameterSettings = buildAppParameterSettings;
const inquirer_1 = __importDefault(require("inquirer"));
const lodash_1 = require("lodash");
const PARAMETER_ID_RE = /^[a-zA-Z][a-zA-Z0-9_]*$/;
const validateDefault = (input, type, options) => {
    if (input === '')
        return true;
    switch (type) {
        case 'Symbol':
            return (0, lodash_1.isString)(input) || 'Default value must be a string.';
        case 'Enum':
            if (!(0, lodash_1.isString)(input))
                return 'Default value must be a string.';
            else if (options && !options.includes(input))
                return 'Default value must be one of the options.';
            return true;
        case 'Number':
            return (0, lodash_1.isNumber)(Number(input)) || 'Default value must be a number.';
        case 'Boolean':
            return input === 'true' || input === 'false' || 'Default value must be a boolean.';
        default:
            return true;
    }
};
const validateEnumOptions = (input, type) => {
    if (type !== 'Enum')
        return true;
    const allString = input.every(lodash_1.isString);
    const allLabelled = input.every(lodash_1.isPlainObject);
    return allString || allLabelled || 'Options should be all strings or all label objects.';
};
async function promptForParameter() {
    const parameter = await inquirer_1.default.prompt([
        {
            name: 'instanceOrInstallation',
            message: 'Is this an Instance or an Installation parameter?',
            type: 'list',
            choices: ['Instance', 'Installation'],
        },
        {
            name: 'name',
            message: 'Parameter name:',
            validate(input) {
                return input ? true : 'Parameter name is required.';
            },
        },
        {
            name: 'id',
            message: 'Parameter ID:',
            validate(input) {
                if (!input)
                    return 'Parameter ID is required.';
                else if (!PARAMETER_ID_RE.test(input))
                    return 'Parameter ID must start with a letter and contain only letters, numbers, and underscores.';
                return true;
            },
        },
        {
            name: 'description',
            message: 'Parameter description (optional):',
        },
        {
            name: 'type',
            message: 'Parameter type:',
            type: 'list',
            choices(answers) {
                const parameterTypes = ['Boolean', 'Symbol', 'Number', 'Enum'];
                if (answers.instanceOrInstallation === 'Installation') {
                    parameterTypes.push('Secret');
                }
                return parameterTypes;
            },
        },
        {
            name: 'required',
            message: 'Is this parameter required?',
            type: 'confirm',
            default: false,
        },
        {
            name: 'options',
            message: 'Parameter options (comma-separated) (optional):',
            when(answers) {
                return answers.type === 'Enum';
            },
            filter(input) {
                return input ? input.split(',').map((opt) => opt.trim()) : [];
            },
            validate(input, answers) {
                if (!input)
                    return 'Options are required for Enum parameters.';
                return validateEnumOptions(input, answers.type);
            },
        },
        {
            name: 'default',
            message: 'Default value (leave blank if none):',
            when(answers) {
                return answers.type !== 'Secret';
            },
            validate(input, answers) {
                return validateDefault(input, answers.type, answers.options);
            },
        },
        {
            name: 'booleanLabels',
            message: 'Parameter labels (true/false comma-separated) (optional):',
            when(answers) {
                return answers.type === 'Boolean';
            },
            filter(input) {
                const labels = input ? input.split(',').map((label) => label.trim()) : [];
                return JSON.stringify({
                    true: labels[0] || '',
                    false: labels[1] || '',
                });
            },
        },
        {
            name: 'enumEmptyLabel',
            message: 'Empty label (optional):',
            filter(input) {
                return JSON.stringify({
                    empty: input.trim(),
                });
            },
            when(answers) {
                return answers.type === 'Enum';
            },
        },
    ]);
    return parameter;
}
async function buildAppParameterSettings() {
    const parameters = {
        instance: [],
        installation: [],
    };
    let addMore = true;
    while (addMore) {
        try {
            const parameter = await promptForParameter();
            const labels = parameter.booleanLabels || parameter.enumEmptyLabel;
            parameters[parameter.instanceOrInstallation.toLowerCase()].push({
                id: parameter.id,
                name: parameter.name,
                description: parameter.description,
                type: parameter.type,
                required: parameter.required,
                default: parameter.default,
                options: parameter.options,
                labels: labels ? JSON.parse(labels) : undefined,
            });
        }
        catch (e) {
            console.error('Failed to build parameter', e);
        }
        const { addAnother } = await inquirer_1.default.prompt({
            name: 'addAnother',
            message: 'Do you want to add another parameter?',
            type: 'confirm',
            default: false,
        });
        addMore = addAnother;
    }
    if ((0, lodash_1.uniq)(parameters.instance.map((p) => p.id)).length !== parameters.instance.length) {
        console.log('Instance parameter IDs must be unique.');
        return buildAppParameterSettings();
    }
    if ((0, lodash_1.uniq)(parameters.installation.map((p) => p.id)).length !== parameters.installation.length) {
        console.log('Installation parameter IDs must be unique.');
        return buildAppParameterSettings();
    }
    return parameters;
}
