"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheEnvVars = cacheEnvVars;
const dotenv_1 = __importDefault(require("dotenv"));
const node_fs_1 = __importDefault(require("node:fs"));
const os_1 = require("os");
const ignore_1 = __importDefault(require("ignore"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
const ig = (0, ignore_1.default)();
const fsPromises = node_fs_1.default.promises;
const fsConstants = node_fs_1.default.constants;
// Always export set env vars by default
dotenv_1.default.config();
async function removeOldEnv(envKey) {
    const envFileData = await fsPromises.readFile(constants_1.DOTENV_FILE, { encoding: 'utf-8', });
    const envVarsData = dotenv_1.default.parse(envFileData);
    if (envVarsData[envKey]) {
        delete envVarsData[envKey];
        const stringifiedEnvData = Object.keys(envVarsData).map(key => `${key}=${envVarsData[key]}`).join(os_1.EOL);
        await fsPromises.writeFile(constants_1.DOTENV_FILE, stringifiedEnvData, {
            encoding: 'utf-8'
        });
    }
}
function addEnvFileToGitIgnore() {
    try {
        if (!ig.ignores(constants_1.DOTENV_FILE)) {
            ig.add(constants_1.DOTENV_FILE);
        }
    }
    catch (err) {
        console.log(`${chalk_1.default.yellow('Warning: could not add .env file to .gitignore. Please don\'t forget to add it manually.')}`);
    }
}
async function checkFileEnvExists() {
    try {
        await fsPromises.access(constants_1.DOTENV_FILE, fsConstants.F_OK);
        return true;
    }
    catch (_) {
        return false;
    }
}
async function cacheEnvVars(envObj) {
    try {
        let envVars = '';
        const envFileExists = await checkFileEnvExists();
        for (const [key, val] of Object.entries(envObj)) {
            if (envFileExists) {
                await removeOldEnv(key);
            }
            envVars += `${os_1.EOL}${key}=${val}`;
        }
        await fsPromises.writeFile(constants_1.DOTENV_FILE, envVars, {
            encoding: 'utf-8',
            flag: 'a'
        });
        addEnvFileToGitIgnore();
        console.log(`
      Saved new Environment variable(s) locally: ${chalk_1.default.cyan(Object.keys(envObj).join(", "))}.
    `);
    }
    catch (err) {
        console.log(`
      ${chalk_1.default.red('Couldn\'t save environment variables locally.')}
      ${err.message}
    `);
    }
}
