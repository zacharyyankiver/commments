"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildGenerateFunctionSettingsInteractive = buildGenerateFunctionSettingsInteractive;
exports.validateArguments = validateArguments;
exports.buildGenerateFunctionSettingsCLI = buildGenerateFunctionSettingsCLI;
const inquirer_1 = __importDefault(require("inquirer"));
const node_path_1 = __importDefault(require("node:path"));
const get_github_folder_names_1 = require("./get-github-folder-names");
const constants_1 = require("./constants");
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = require("./logger");
const types_1 = require("./types");
async function buildGenerateFunctionSettingsInteractive() {
    const baseSettings = await inquirer_1.default.prompt([
        {
            name: 'name',
            message: `Function name (${node_path_1.default.basename(process.cwd())}):`,
        },
    ]);
    validateFunctionName(baseSettings);
    const filteredSources = await (0, get_github_folder_names_1.getGithubFolderNames)();
    const sourceSpecificSettings = await inquirer_1.default.prompt([
        {
            name: 'example',
            message: 'Select an example:',
            type: 'list',
            choices: filteredSources,
        },
        {
            name: 'language',
            message: 'Select a language',
            type: 'list',
            choices: [
                { name: 'TypeScript', value: 'typescript' },
                { name: 'JavaScript', value: 'javascript' },
            ],
            default: 'typescript',
        }
    ]);
    baseSettings.example = sourceSpecificSettings.example;
    baseSettings.language = sourceSpecificSettings.language;
    return baseSettings;
}
function validateFunctionName(baseSettings) {
    if (constants_1.BANNED_FUNCTION_NAMES.includes(baseSettings.name)) {
        throw new types_1.ValidationError(chalk_1.default.red(`Invalid function name: ${baseSettings.name} is not allowed.`));
    }
    else if (!(/^[a-z0-9]+$/i.test(baseSettings.name))) {
        throw new types_1.ValidationError(chalk_1.default.red(`Invalid function name: ${baseSettings.name}. Note that function names must be alphanumeric.`));
    }
}
function validateArguments(options) {
    const requiredParams = ['name', 'example', 'language'];
    if (!requiredParams.every((key) => key in options)) {
        throw new types_1.ValidationError(chalk_1.default.red('You must specify a function name, an example, and a language'));
    }
    validateFunctionName(options);
    // Check if the language is valid
    if (!constants_1.ACCEPTED_LANGUAGES.includes(options.language)) {
        (0, logger_1.warn)(`Invalid language: ${options.language}. Defaulting to TypeScript.`);
        options.language = 'typescript';
    }
    // Convert options to lowercase and trim whitespace
    for (const key in options) {
        if (key === 'keepPackageJson')
            continue;
        const optionKey = key;
        const value = options[optionKey].toLowerCase().trim();
        if (optionKey === 'language') {
            options[optionKey] = value;
        }
        else if (optionKey === 'example') {
            options[optionKey] = value;
        }
        else { // don't want to lowercase function names
            options[optionKey] = options[optionKey].trim();
        }
    }
}
async function buildGenerateFunctionSettingsCLI(options) {
    const validateSpinner = (0, ora_1.default)('Validating your input\n').start();
    const settings = {};
    try {
        validateArguments(options);
        // Check if the source exists
        const filteredSources = await (0, get_github_folder_names_1.getGithubFolderNames)();
        if (!filteredSources.includes(options.example)) {
            throw new types_1.ValidationError(`Invalid example name: ${options.example}. Please choose from: ${filteredSources.join(', ')}`);
        }
        settings.language = options.language;
        settings.example = options.example;
        settings.name = options.name;
        if (options.keepPackageJson !== undefined) {
            settings.keepPackageJson = options.keepPackageJson;
        }
        return settings;
    }
    catch (err) {
        console.log(`
        ${chalk_1.default.red('Validation failed')}
      `);
        // eslint-disable-next-line no-process-exit
        throw err;
    }
    finally {
        validateSpinner.stop();
    }
}
