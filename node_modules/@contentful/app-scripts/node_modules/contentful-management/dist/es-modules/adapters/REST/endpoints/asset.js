const _excluded = ["asset", "locale", "options"],
  _excluded2 = ["asset", "options"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { errorHandler } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { getUploadHttpClient } from '../../../upload-http-client';
import * as raw from './raw';
import { create as createUpload } from './upload';
import { normalizeSelect } from './utils';
import * as releaseAsset from './release-asset';
export const get = (http, params, rawData, headers) => {
  if (params.releaseId) {
    return releaseAsset.get(http, params);
  }
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const getPublished = (http, params, rawData, headers) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/public/assets`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const getMany = (http, params, rawData, headers) => {
  if (params.releaseId) {
    return releaseAsset.getMany(http, params);
  }
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  if (params.releaseId) {
    return releaseAsset.update(http, params, rawData, headers !== null && headers !== void 0 ? headers : {});
  }
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    }, headers)
  });
};
export const del = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`);
};
export const publish = (http, params, rawData) => {
  var _params$locales, _rawData$sys$version2;
  const payload = (_params$locales = params.locales) !== null && _params$locales !== void 0 && _params$locales.length ? {
    add: {
      fields: {
        '*': params.locales
      }
    }
  } : null;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`, payload, {
    headers: {
      'X-Contentful-Version': (_rawData$sys$version2 = rawData.sys.version) !== null && _rawData$sys$version2 !== void 0 ? _rawData$sys$version2 : 0
    }
  });
};
export const unpublish = (http, params, rawData) => {
  var _params$locales2;
  if ((_params$locales2 = params.locales) !== null && _params$locales2 !== void 0 && _params$locales2.length) {
    const payload = {
      remove: {
        fields: {
          '*': params.locales
        }
      }
    };
    return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`, payload, {
      headers: {
        'X-Contentful-Version': rawData === null || rawData === void 0 ? void 0 : rawData.sys.version
      }
    });
  } else {
    return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`);
  }
};
export const archive = (http, params) => {
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const unarchive = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const create = (http, params, rawData) => {
  if (params.releaseId) {
    return releaseAsset.create(http, params, rawData, {});
  }
  const data = copy(rawData);
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, data);
};
export const createWithId = (http, params, rawData) => {
  if (params.releaseId) {
    return releaseAsset.createWithId(http, params, rawData, {});
  }
  const data = copy(rawData);
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data);
};
export const createFromFiles = async (http, params, data) => {
  if (params.releaseId) {
    return releaseAsset.createFromFiles(http, params, data, {});
  }
  const httpUpload = getUploadHttpClient(http, {
    uploadTimeout: params.uploadTimeout
  });
  const {
    file
  } = data.fields;
  return Promise.all(Object.keys(file).map(async locale => {
    const {
      contentType,
      fileName
    } = file[locale];
    return createUpload(httpUpload, params, file[locale]).then(upload => {
      return {
        [locale]: {
          contentType,
          fileName,
          uploadFrom: {
            sys: {
              type: 'Link',
              linkType: 'Upload',
              id: upload.sys.id
            }
          }
        }
      };
    });
  })).then(uploads => {
    const file = uploads.reduce((fieldsData, upload) => _objectSpread(_objectSpread({}, fieldsData), upload), {});
    const asset = _objectSpread(_objectSpread({}, data), {}, {
      fields: _objectSpread(_objectSpread({}, data.fields), {}, {
        file
      })
    });
    return create(http, params, asset);
  }).catch(errorHandler);
};

/**
 * Asset processing
 */

const ASSET_PROCESSING_CHECK_WAIT = 3000;
const ASSET_PROCESSING_CHECK_RETRIES = 10;
async function checkIfAssetHasUrl(http, params, {
  resolve,
  reject,
  locale,
  processingCheckWait = ASSET_PROCESSING_CHECK_WAIT,
  processingCheckRetries = ASSET_PROCESSING_CHECK_RETRIES,
  checkCount = 0
}) {
  return get(http, params).then(asset => {
    if (asset.fields.file[locale].url) {
      resolve(asset);
    } else if (checkCount === processingCheckRetries) {
      const error = new Error();
      error.name = 'AssetProcessingTimeout';
      error.message = 'Asset is taking longer then expected to process.';
      reject(error);
    } else {
      checkCount++;
      setTimeout(() => checkIfAssetHasUrl(http, params, {
        resolve: resolve,
        reject: reject,
        locale: locale,
        checkCount: checkCount,
        processingCheckWait,
        processingCheckRetries
      }), processingCheckWait);
    }
  });
}
export const processForLocale = async (http, _ref) => {
  let {
      asset,
      locale,
      options: {
        processingCheckRetries,
        processingCheckWait
      } = {}
    } = _ref,
    params = _objectWithoutProperties(_ref, _excluded);
  if (asset.sys.release) {
    return releaseAsset.processForLocale(http, _objectSpread({
      asset: asset,
      locale,
      options: {
        processingCheckRetries,
        processingCheckWait
      }
    }, params));
  }
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${asset.sys.id}/files/${locale}/process`, null, {
    headers: {
      'X-Contentful-Version': asset.sys.version
    }
  }).then(() => {
    return new Promise((resolve, reject) => checkIfAssetHasUrl(http, {
      spaceId: params.spaceId,
      environmentId: params.environmentId,
      assetId: asset.sys.id
    }, {
      resolve,
      reject,
      locale,
      processingCheckWait,
      processingCheckRetries
    }));
  });
};
export const processForAllLocales = async (http, _ref2) => {
  let {
      asset,
      options = {}
    } = _ref2,
    params = _objectWithoutProperties(_ref2, _excluded2);
  if (asset.sys.release) {
    return releaseAsset.processForAllLocales(http, _objectSpread({
      asset: asset,
      options
    }, params));
  }
  const locales = Object.keys(asset.fields.file || {});
  let mostUpToDateAssetVersion = asset;

  // Let all the locales process
  // Since they all resolve at different times,
  // we need to pick the last resolved value
  // to reflect the most recent state
  const allProcessingLocales = locales.map(locale => processForLocale(http, _objectSpread(_objectSpread({}, params), {}, {
    asset,
    locale,
    options
  })).then(result => {
    // Side effect of always setting the most up to date asset version
    // The last one to call this will be the last one that finished
    // and thus the most up to date
    mostUpToDateAssetVersion = result;
  }));
  return Promise.all(allProcessingLocales).then(() => mostUpToDateAssetVersion);
};