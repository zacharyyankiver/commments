function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import copy from 'fast-copy';
import { toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
/**
 * @private
 */
export default function createAppActionCallApi(makeRequest, retryOptions) {
  return {
    createWithResponse: function (params, payload) {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'createWithResponse',
        params: _objectSpread(_objectSpread({}, params), retryOptions),
        payload: payload
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    },
    getCallDetails: function getCallDetails(params) {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'getCallDetails',
        params
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    },
    get: function get(params) {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'get',
        params
      }).then(data => wrapAppActionCall(makeRequest, data));
    },
    createWithResult: function (params, payload) {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'createWithResult',
        params: _objectSpread(_objectSpread({}, params), retryOptions),
        payload: payload
      }).then(data => wrapAppActionCall(makeRequest, data));
    }
  };
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCall(makeRequest, data) {
  const signedRequest = toPlainObject(copy(data));
  const signedRequestWithMethods = enhanceWithMethods(signedRequest, createAppActionCallApi(makeRequest));
  return signedRequestWithMethods;
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCallResponse(makeRequest, data, retryOptions) {
  const appActionCallResponse = toPlainObject(copy(data));
  const appActionCallResponseWithMethods = enhanceWithMethods(appActionCallResponse, createAppActionCallApi(makeRequest, retryOptions));
  return appActionCallResponseWithMethods;
}