import type { DefaultElements, MakeRequest, MetaSysProps, SysLink } from '../common-types';
export type UploadCredentialProps = {
    /**
     * System metadata
     */
    sys: MetaSysProps & {
        space: SysLink;
        environment?: SysLink;
    };
};
export interface UploadCredential extends UploadCredentialProps, DefaultElements<UploadCredentialProps> {
    /**
     * creates the upload credentials.
     * @return upload credentials for file uploads
     * @example
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * try {
     *   const space = await client.getSpace('<space_id>')
     *   const environment = await space.getEnvironment('<environment_id>')
     *
     *   const upload = await client.uploadCredential.create({
     *     spaceId: space.sys.id,
     *     environmentId: environment.sys.id
     *   })
     * } catch (error) {
     *  console.error(error)
     * }
     *
     */
    create(): Promise<UploadCredentialProps>;
}
/**
 * @private
 * @param {function} makeRequest - function to make requests via an adapter
 * @param {object} data - Raw upload credential data
 * @return {UploadCredential} Wrapped upload credential data
 */
export declare function wrapUploadCredential(makeRequest: MakeRequest, data: UploadCredentialProps): UploadCredential;
