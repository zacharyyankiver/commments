{"version":3,"sources":["../src/Spinner.tsx","../src/Spinner.styles.ts"],"names":["cx","css","React","forwardRef","tokens","Box","keyframes","sizes","getStyles","animations","props","SPINNER_DEFAULT_TAG","variants","Spinner","_a","forwardedRef","_b","className","customSize","size","variant","testId","otherProps","__objRest","styles","__spreadProps","__spreadValues"],"mappings":"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","sourcesContent":["import { cx, css } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport type { SpinnerSize, SpinnerVariant } from './types';\nimport { getStyles } from './Spinner.styles';\n\nconst SPINNER_DEFAULT_TAG = 'div';\n\nconst variants: { [key in SpinnerVariant]: string } = {\n  default: tokens.gray700,\n  primary: tokens.blue500,\n  white: tokens.colorWhite,\n};\n\nexport type SpinnerInternalProps = CommonProps & {\n  /**\n   * Determines the color that will be used in the `fill` property of the SVG\n   */\n  variant?: SpinnerVariant;\n  /**\n   * Allows resizing the spinner with any N value. The final size will be NxN pixels\n   */\n  customSize?: number;\n  /**\n   * Controls the size of the spinner. The default `medium` size is 20px wide,\n   * the `small` size is 14px wide, and the `large` size is 36px wide\n   */\n  size?: SpinnerSize;\n};\n\nexport type SpinnerProps = PropsWithHTMLElement<SpinnerInternalProps, 'div'>;\n\nexport const Spinner = forwardRef<HTMLDivElement, ExpandProps<SpinnerProps>>(\n  (\n    {\n      className,\n      customSize,\n      size = 'medium',\n      variant = 'default',\n      testId = 'cf-ui-spinner',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getStyles();\n    return (\n      <Box\n        as={SPINNER_DEFAULT_TAG}\n        display=\"inline-block\"\n        {...otherProps}\n        className={cx(styles.root({ size, customSize }), className)}\n        ref={forwardedRef}\n        testId={testId}\n      >\n        <svg\n          className={css({\n            display: 'block',\n            fill: variants[variant],\n          })}\n          viewBox=\"0 0 60 51\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <title>Loadingâ€¦</title>\n          <g\n            className={styles.circle1Translate}\n            transform=\"translate(10,33.528168)\"\n          >\n            <g className={styles.circle1Scale}>\n              <circle r=\"6\" transform=\"translate(0,10.471832)\" />\n            </g>\n          </g>\n\n          <g\n            className={styles.circle2Translate}\n            transform=\"translate(30,33.528168)\"\n          >\n            <g className={styles.circle2Scale}>\n              <circle r=\"6\" transform=\"translate(0,10.471832)\" />\n            </g>\n          </g>\n\n          <g\n            className={styles.circle3Translate}\n            transform=\"translate(50,33.528168)\"\n          >\n            <g className={styles.circle3Scale}>\n              <circle r=\"6\" transform=\"translate(0,10.471832)\" />\n            </g>\n          </g>\n        </svg>\n      </Box>\n    );\n  },\n);\n\nSpinner.displayName = 'Spinner';\n","import { css, keyframes } from 'emotion';\nimport type { SpinnerSize } from './types';\n\nconst sizes: { [key in SpinnerSize]: string } = {\n  large: '36px',\n  medium: '20px',\n  small: '14px',\n};\n\nexport const getStyles = () => {\n  const animations = {\n    scale1: keyframes`\n    0% {\n      transform: scale(1, 1);\n    }\n    6.666667% {\n      transform: scale(1.5, 0.5);\n    }\n    13.333333% {\n      transform: scale(1, 1);\n    }\n    26.666667% {\n      transform: scale(1, 1);\n    }\n    33.333333% {\n      transform: scale(1, 1);\n    }\n    40% {\n      transform: scale(1, 1);\n    }\n    53.333333% {\n      transform: scale(1, 1);\n    }\n    60% {\n      transform: scale(1.5, 0.5);\n    }\n    66.666667% {\n      transform: scale(1, 1);\n    }\n    100% {\n      transform: scale(1, 1);\n    }\n  `,\n    scale2: keyframes`\n    0% {\n      transform: scale(1, 1);\n    }\n    13.333333% {\n      transform: scale(1, 1);\n    }\n    20% {\n      transform: scale(1.5, 0.5);\n    }\n    26.666667% {\n      transform: scale(1, 1);\n    }\n    40% {\n      transform: scale(1, 1);\n    }\n    46.666667% {\n      transform: scale(1, 1);\n    }\n    53.333333% {\n      transform: scale(1, 1);\n    }\n    66.666667% {\n      transform: scale(1, 1);\n    }\n    73.333333% {\n      transform: scale(1.5, 0.5);\n    }\n    80% {\n      transform: scale(1, 1);\n    }\n    100% {\n      transform: scale(1, 1);\n    }\n  `,\n    scale3: keyframes`\n    0% {\n      transform: scale(1, 1);\n    }\n    26.666667% {\n      transform: scale(1, 1);\n    }\n    33.333333% {\n      transform: scale(1.5, 0.5);\n    }\n    40% {\n      transform: scale(1, 1);\n    }\n    53.333333% {\n      transform: scale(1, 1);\n    }\n    60% {\n      transform: scale(1, 1);\n    }\n    66.666667% {\n      transform: scale(1, 1);\n    }\n    80% {\n      transform: scale(1, 1);\n    }\n    86.666667% {\n      transform: scale(1.5, 0.5);\n    }\n    93.333333% {\n      transform: scale(1, 1);\n    }\n    100% {\n      transform: scale(1, 1);\n    }\n  `,\n    translate1: keyframes`\n    0% {\n      transform: translate(10px, 33.528168px);\n    }\n    6.666667% {\n      transform: translate(10px, 41.764084px);\n    }\n    13.333333% {\n      transform: translate(10px, 33.528168px);\n    }\n    26.666667% {\n      transform: translate(10px, -2.651608px);\n    }\n    33.333333% {\n      transform: translate(10px, -4.471832px);\n    }\n    40% {\n      transform: translate(10px, -2.651608px);\n    }\n    53.333333% {\n      transform: translate(10px, 33.528168px);\n    }\n    60% {\n      transform: translate(10px, 41.764084px);\n    }\n    66.666667% {\n      transform: translate(10px, 33.528168px);\n    }\n    100% {\n      transform: translate(10px, 33.528168px);\n    }\n  `,\n    translate2: keyframes`\n    0% {\n      transform: translate(30px, 33.528168px);\n    }\n    13.333333% {\n      transform: translate(30px, 33.528168px);\n    }\n    20% {\n      transform: translate(30px, 41.764084px);\n    }\n    26.666667% {\n      transform: translate(30px, 33.528168px);\n    }\n    40% {\n      transform: translate(30px, -2.651608px);\n    }\n    46.666667% {\n      transform: translate(30px, -4.471832px);\n    }\n    53.333333% {\n      transform: translate(30px, -2.651608px);\n    }\n    66.666667% {\n      transform: translate(30px, 33.528168px);\n    }\n    73.333333% {\n      transform: translate(30px, 41.764084px);\n    }\n    80% {\n      transform: translate(30px, 33.528168px);\n    }\n    100% {\n      transform: translate(30px, 33.528168px);\n    }\n  `,\n    translate3: keyframes`\n    0% {\n      transform: translate(50px, 33.528168px);\n    }\n    26.666667% {\n      transform: translate(50px, 33.528168px);\n    }\n    33.333333% {\n      transform: translate(50px, 41.764084px);\n    }\n    40% {\n      transform: translate(50px, 33.528168px);\n    }\n    53.333333% {\n      transform: translate(50px, -2.651608px);\n    }\n    60% {\n      transform: translate(50px, -4.471832px);\n    }\n    66.666667% {\n      transform: translate(50px, -2.651608px);\n    }\n    80% {\n      transform: translate(50px, 33.528168px);\n    }\n    86.666667% {\n      transform: translate(50px, 41.764084px);\n    }\n    93.333333% {\n      transform: translate(50px, 33.528168px);\n    }\n    100% {\n      transform: translate(50px, 33.528168px);\n    }\n  `,\n  };\n\n  return {\n    root: (props: { size: SpinnerSize; customSize?: number }) =>\n      css({\n        height: props.customSize ? `${props.customSize}px` : undefined,\n        verticalAlign: 'middle',\n        width: props.customSize ? `${props.customSize}px` : sizes[props.size],\n      }),\n    circle1Scale: css({\n      animation: `${animations.scale1} 1s linear infinite normal forwards;`,\n    }),\n    circle2Scale: css({\n      animation: `${animations.scale2} 1s linear infinite normal forwards;`,\n    }),\n    circle3Scale: css({\n      animation: `${animations.scale3} 1s linear infinite normal forwards;`,\n    }),\n    circle1Translate: css({\n      animation: `${animations.translate1} 1s linear infinite normal forwards;`,\n    }),\n    circle2Translate: css({\n      animation: `${animations.translate2} 1s linear infinite normal forwards;`,\n    }),\n    circle3Translate: css({\n      animation: `${animations.translate3} 1s linear infinite normal forwards;`,\n    }),\n  };\n};\n"]}