import React from 'react';
import { CommonProps } from '@contentful/f36-core';
import { TabsContentProps } from '@radix-ui/react-tabs';

interface TabsProps extends CommonProps {
    children?: React.ReactNode;
    defaultTab?: string;
    currentTab?: string;
    onTabChange?: (tab: string) => void;
}
declare const Tabs$1: React.ForwardRefExoticComponent<TabsProps & React.RefAttributes<HTMLDivElement>>;

interface TabProps extends CommonProps {
    /**
     * A unique id that associates the tab with a panel.
     */
    panelId: string;
    /**
     * When true, prevents the user from interacting with the tab.
     */
    isDisabled?: boolean;
    children: React.ReactNode;
}
declare const Tab: React.ForwardRefExoticComponent<TabProps & React.RefAttributes<HTMLDivElement>>;

interface TabPanelProps extends CommonProps, Pick<TabsContentProps, 'forceMount'> {
    id: string;
    children: React.ReactNode;
}
declare const TabPanel: React.ForwardRefExoticComponent<TabPanelProps & React.RefAttributes<HTMLDivElement>>;

interface TabListProps extends CommonProps {
    /**
     * visual variant of TabList
     */
    variant?: 'default' | 'horizontal-divider' | 'vertical-divider';
    /**
     * When true, keyboard navigation will loop from last tab to first, and vice versa.
     * @default true
     */
    loop?: boolean;
    children?: React.ReactNode;
}
declare const TabList: React.ForwardRefExoticComponent<TabListProps & React.RefAttributes<HTMLDivElement>>;

declare type CompoundTabs = typeof Tabs$1 & {
    Panel: typeof TabPanel;
    Tab: typeof Tab;
    List: typeof TabList;
};
declare const Tabs: CompoundTabs;

export { Tab, TabList, TabListProps, TabPanel, TabPanelProps, TabProps, Tabs, TabsProps };
