{"version":3,"sources":["../src/Tabs.tsx","../src/Tab.tsx","../src/Tabs.styles.ts","../src/TabPanel.tsx","../src/TabList.tsx","../src/CompoundTabs.tsx"],"names":["React","RadixTabs","Tabs","props","ref","_a","defaultTab","currentTab","onTabChange","children","testId","otherProps","__objRest","__spreadProps","__spreadValues","css","cx","tokens","styles","getTabStyles","className","isDisabled","getTabsStyles","variant","getTabPanelStyles","Tab","panelId","TabPanel","id","forceMount","TabList"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\n\nexport interface TabsProps extends CommonProps {\n  children?: React.ReactNode;\n  defaultTab?: string;\n  currentTab?: string;\n  onTabChange?: (tab: string) => void;\n}\n\nexport const Tabs = React.forwardRef<HTMLDivElement, ExpandProps<TabsProps>>(\n  (props, ref) => {\n    const {\n      defaultTab,\n      currentTab,\n      onTabChange,\n      children,\n      testId = 'cf-ui-tabs',\n      ...otherProps\n    } = props;\n    return (\n      <RadixTabs.Root\n        {...otherProps}\n        defaultValue={defaultTab}\n        value={currentTab}\n        onValueChange={onTabChange}\n        data-test-id={testId}\n        ref={ref}\n      >\n        {children}\n      </RadixTabs.Root>\n    );\n  },\n);\n\nTabs.displayName = 'Tabs';\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport { getTabStyles } from './Tabs.styles';\n\nexport interface TabProps extends CommonProps {\n  /**\n   * A unique id that associates the tab with a panel.\n   */\n  panelId: string;\n  /**\n   * When true, prevents the user from interacting with the tab.\n   */\n  isDisabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport const Tab = React.forwardRef<HTMLDivElement, ExpandProps<TabProps>>(\n  (props, ref) => {\n    const {\n      children,\n      testId = 'cf-ui-tab',\n      panelId,\n      isDisabled,\n      className,\n      ...otherProps\n    } = props;\n\n    const styles = getTabStyles({ className, isDisabled });\n    return (\n      <RadixTabs.Trigger\n        disabled={isDisabled}\n        value={panelId}\n        data-test-id={testId}\n        asChild\n      >\n        <div {...otherProps} className={styles.tab} ref={ref}>\n          <span>{children}</span>\n        </div>\n      </RadixTabs.Trigger>\n    );\n  },\n);\n\nTab.displayName = 'Tab';\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nconst styles = {\n  tabDisabled: {\n    opacity: '0.5',\n    cursor: 'not-allowed',\n  },\n  tabDividerVertical: {\n    '& > *:not(:first-child)': {\n      boxShadow: `inset 1px 0 0px 0px ${tokens.gray200}`,\n    },\n  },\n  tabDividerHorizontal: {\n    boxShadow: `inset 0 -2px 0px 0px ${tokens.gray200}`,\n  },\n};\n\nexport const getTabStyles = ({ className, isDisabled }) => ({\n  tab: cx(\n    css({\n      borderRadius: 0,\n      whiteSpace: 'nowrap',\n      color: tokens.gray500,\n      display: 'flex',\n      height: '100%',\n      minHeight: tokens.spacing2Xl,\n      position: 'relative',\n      padding: `0 ${tokens.spacingM}`,\n      fontFamily: tokens.fontStackPrimary,\n      fontWeight: tokens.fontWeightDemiBold,\n      border: 'none',\n      cursor: 'pointer',\n      outline: 'none',\n      '&:focus-visible': {\n        boxShadow: tokens.glowPrimary,\n      },\n      '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        background: tokens.blue500,\n        opacity: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        height: '2px',\n      },\n      '&:hover:before, &:hover:focus': {\n        opacity: '0.5',\n      },\n      '&[data-state=\"active\"]': {\n        color: tokens.blue500,\n        '&:before, &:hover:before, &:hover:focus': {\n          opacity: '1',\n        },\n      },\n      '> span': {\n        display: 'flex',\n        alignSelf: 'center',\n        cursor: 'inherit',\n      },\n    }),\n    className,\n    {\n      [css(styles.tabDisabled)]: isDisabled,\n    },\n  ),\n});\n\nexport const getTabsStyles = ({ className, variant }) => ({\n  tabList: cx(\n    css({\n      display: 'flex',\n    }),\n    className,\n    {\n      [css(styles.tabDividerHorizontal)]: variant === 'horizontal-divider',\n      [css(styles.tabDividerVertical)]: variant === 'vertical-divider',\n    },\n  ),\n});\n\nexport const getTabPanelStyles = ({ className }: { className: string }) => ({\n  tabPanel: cx(\n    css({\n      outline: 'none',\n      '&:focus-visible': {\n        boxShadow: tokens.glowPrimary,\n      },\n    }),\n    className,\n  ),\n});\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport type { TabsContentProps } from '@radix-ui/react-tabs';\nimport { getTabPanelStyles } from './Tabs.styles';\n\nexport interface TabPanelProps\n  extends CommonProps,\n    Pick<TabsContentProps, 'forceMount'> {\n  id: string;\n  children: React.ReactNode;\n}\n\nexport const TabPanel = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<TabPanelProps>\n>((props, ref) => {\n  const {\n    children,\n    testId = 'cf-ui-tab-panel',\n    id,\n    className,\n    forceMount,\n    ...otherProps\n  } = props;\n  const styles = getTabPanelStyles({ className });\n  return (\n    <RadixTabs.Content\n      data-test-id={testId}\n      value={id}\n      asChild\n      forceMount={forceMount}\n    >\n      <div {...otherProps} ref={ref} className={styles.tabPanel}>\n        {children}\n      </div>\n    </RadixTabs.Content>\n  );\n});\nTabPanel.displayName = 'TabPanel';\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport { getTabsStyles } from './Tabs.styles';\n\nexport interface TabListProps extends CommonProps {\n  /**\n   * visual variant of TabList\n   */\n  variant?: 'default' | 'horizontal-divider' | 'vertical-divider';\n  /**\n   * When true, keyboard navigation will loop from last tab to first, and vice versa.\n   * @default true\n   */\n  loop?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const TabList = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<TabListProps>\n>((props, ref) => {\n  const {\n    className,\n    variant,\n    children,\n    testId = 'cf-ui-tab-list',\n    ...otherProps\n  } = props;\n  const styles = getTabsStyles({\n    className,\n    variant,\n  });\n  return (\n    <RadixTabs.List\n      {...otherProps}\n      data-test-id={testId}\n      className={styles.tabList}\n      ref={ref}\n    >\n      {children}\n    </RadixTabs.List>\n  );\n});\nTabList.displayName = 'TabList';\n","import { Tabs as OriginalTabs } from './Tabs';\nimport { Tab } from './Tab';\nimport { TabPanel } from './TabPanel';\nimport { TabList } from './TabList';\n\ntype CompoundTabs = typeof OriginalTabs & {\n  Panel: typeof TabPanel;\n  Tab: typeof Tab;\n  List: typeof TabList;\n};\n\nexport const Tabs = OriginalTabs as CompoundTabs;\nTabs.Panel = TabPanel;\nTabs.Tab = Tab;\nTabs.List = TabList;\n"]}