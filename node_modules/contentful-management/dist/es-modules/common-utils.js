function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
/**
 * @private
 */
export const wrapCollection = fn => (makeRequest, data, ...rest) => {
  const collectionData = toPlainObject(copy(data));
  // @ts-expect-error
  collectionData.items = collectionData.items.map(entity => fn(makeRequest, entity, ...rest));
  // @ts-expect-error
  return collectionData;
};
export const wrapCursorPaginatedCollection = fn => (makeRequest, data, ...rest) => {
  const collectionData = toPlainObject(copy(data));
  // @ts-expect-error
  collectionData.items = collectionData.items.map(entity => fn(makeRequest, entity, ...rest));
  // @ts-expect-error
  return collectionData;
};
export function isSuccessful(statusCode) {
  return statusCode < 300;
}
export function shouldRePoll(statusCode) {
  return [404, 422, 429, 400].includes(statusCode);
}
export function waitFor() {
  return _waitFor.apply(this, arguments);
}
function _waitFor() {
  _waitFor = _asyncToGenerator(function* (ms = 1000) {
    return new Promise(resolve => setTimeout(resolve, ms));
  });
  return _waitFor.apply(this, arguments);
}