function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { wrapCollection } from '../common-utils';
import enhanceWithMethods from '../enhance-with-methods';
/**
 * @private
 */
export default function createWorkflowApi(makeRequest) {
  const getParams = Workflow => ({
    spaceId: Workflow.sys.space.sys.id,
    environmentId: Workflow.sys.environment.sys.id,
    workflowId: Workflow.sys.id
  });
  return {
    update: function update() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'Workflow',
        action: 'update',
        params: getParams(raw),
        payload: raw
      }).then(data => wrapWorkflow(makeRequest, data));
    },
    delete: function _delete() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'Workflow',
        action: 'delete',
        params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
          version: raw.sys.version
        })
      }).then(() => {
        // noop
      });
    },
    complete: function complete() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'Workflow',
        action: 'complete',
        params: _objectSpread(_objectSpread({}, getParams(raw)), {}, {
          version: raw.sys.version
        })
      }).then(() => {
        // noop
      });
    }
  };
}

/**
 * @private
 */
export function wrapWorkflow(makeRequest, data) {
  const Workflow = toPlainObject(copy(data));
  const WorkflowWithMethods = enhanceWithMethods(Workflow, createWorkflowApi(makeRequest));
  return freezeSys(WorkflowWithMethods);
}

/**
 * @private
 */
export const wrapWorkflowCollection = wrapCollection(wrapWorkflow);