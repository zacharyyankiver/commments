const _excluded = ["organizationId", "environmentTemplateId", "spaceId", "environmentId"],
  _excluded2 = ["spaceId", "environmentId", "environmentTemplateId", "installationId"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import * as raw from './raw';
const apiPath = (organizationId, ...pathSegments) => `/organizations/${organizationId}/environment_templates/` + pathSegments.join('/');
export const getMany = (http, _ref) => {
  let organizationId = _ref.organizationId,
    environmentTemplateId = _ref.environmentTemplateId,
    spaceId = _ref.spaceId,
    environmentId = _ref.environmentId,
    paginationProps = _objectWithoutProperties(_ref, _excluded);
  return raw.get(http, apiPath(organizationId, environmentTemplateId, 'template_installations'), {
    params: _objectSpread(_objectSpread(_objectSpread({}, paginationProps), environmentId && {
      'environment.sys.id': environmentId
    }), spaceId && {
      'space.sys.id': spaceId
    })
  });
};
export const getForEnvironment = (http, _ref2) => {
  let spaceId = _ref2.spaceId,
    environmentId = _ref2.environmentId,
    environmentTemplateId = _ref2.environmentTemplateId,
    installationId = _ref2.installationId,
    paginationProps = _objectWithoutProperties(_ref2, _excluded2);
  return raw.get(http, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}`, {
    params: _objectSpread(_objectSpread({}, installationId && {
      'sys.id': installationId
    }), paginationProps)
  });
};