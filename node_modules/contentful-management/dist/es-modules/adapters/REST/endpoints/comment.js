const _excluded = ["version"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import copy from 'fast-copy';
import * as raw from './raw';
import { normalizeSelect } from './utils';
const BODY_FORMAT_HEADER = 'x-contentful-comment-body-format';
const getSpaceEnvBaseUrl = params => `/spaces/${params.spaceId}/environments/${params.environmentId}`;
const getEntryBaseUrl = params => `${getSpaceEnvBaseUrl(params)}/entries/${params.entryId}/comments`;
const getEntryCommentUrl = params => `${getEntryBaseUrl(params)}/${params.commentId}`;

/**
 * Comments can be added to either an entry or a workflow. The latter one requires a version
 * to be set as part of the URL path. Workflow comments only support `create` (with
 * versionized URL) and `getMany` (without version). The API might support more methods
 * in the future with new use cases being discovered.
 */
const getEntityBaseUrl = params => {
  if ('entryId' in params) {
    return getEntryBaseUrl(params);
  }
  const parentEntityId = params.parentEntityId,
    parentEntityType = params.parentEntityType;
  // No need for mapping or switch-case as long as there are only two supported cases
  const parentPlural = parentEntityType === 'Workflow' ? 'workflows' : 'entries';
  const versionPath = 'parentEntityVersion' in params ? `/versions/${params.parentEntityVersion}` : '';
  return `${getSpaceEnvBaseUrl(params)}/${parentPlural}/${parentEntityId}${versionPath}/comments`;
};
export const get = (http, params) => raw.get(http, getEntryCommentUrl(params), {
  headers: params.bodyFormat === 'rich-text' ? {
    [BODY_FORMAT_HEADER]: params.bodyFormat
  } : {}
});
export const getMany = (http, params) => raw.get(http, getEntityBaseUrl(params), {
  params: normalizeSelect(params.query),
  headers: params.bodyFormat === 'rich-text' ? {
    [BODY_FORMAT_HEADER]: params.bodyFormat
  } : {}
});
export const create = (http, params, rawData) => {
  const data = copy(rawData);
  return raw.post(http, getEntityBaseUrl(params), data, {
    headers: typeof rawData.body !== 'string' ? {
      [BODY_FORMAT_HEADER]: 'rich-text'
    } : {}
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, getEntryCommentUrl(params), data, {
    headers: _objectSpread(_objectSpread({
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    }, typeof rawData.body !== 'string' ? {
      [BODY_FORMAT_HEADER]: 'rich-text'
    } : {}), headers)
  });
};
export const del = (http, _ref) => {
  let version = _ref.version,
    params = _objectWithoutProperties(_ref, _excluded);
  return raw.del(http, getEntryCommentUrl(params), {
    headers: {
      'X-Contentful-Version': version
    }
  });
};

// Add a deprecation notive. But `getAll` may never be removed for app compatibility reasons.
/**
 * @deprecated use `getMany` instead.
 */
export const getAll = getMany;