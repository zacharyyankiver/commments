function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import copy from 'fast-copy';
import * as raw from './raw';
function spaceMembershipDeprecationWarning() {
  console.warn('The user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user)');
}
const getBaseUrl = params => `/spaces/${params.spaceId}/space_memberships`;
const getEntityUrl = params => `${getBaseUrl(params)}/${params.spaceMembershipId}`;
export const get = (http, params) => {
  spaceMembershipDeprecationWarning();
  return raw.get(http, getEntityUrl(params));
};
export const getMany = (http, params) => {
  spaceMembershipDeprecationWarning();
  return raw.get(http, getBaseUrl(params), {
    params: params.query
  });
};
export const getForOrganization = (http, params) => {
  return raw.get(http, `/organizations/${params.organizationId}/space_memberships/${params.spaceMembershipId}`);
};
export const getManyForOrganization = (http, params) => {
  return raw.get(http, `/organizations/${params.organizationId}/space_memberships`, {
    params: params.query
  });
};
export const create = (http, params, data, headers) => {
  spaceMembershipDeprecationWarning();
  return raw.post(http, getBaseUrl(params), data, {
    headers
  });
};
export const createWithId = (http, params, data, headers) => {
  spaceMembershipDeprecationWarning();
  return raw.put(http, getEntityUrl(params), data, {
    headers
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, getEntityUrl(params), data, {
    headers: _objectSpread(_objectSpread({}, headers), {}, {
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    })
  });
};
export const del = (http, params) => {
  return raw.del(http, getEntityUrl(params));
};