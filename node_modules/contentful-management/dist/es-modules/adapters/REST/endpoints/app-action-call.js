function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import * as raw from './raw';
import { isSuccessful, shouldRePoll, waitFor } from '../../../common-utils';
export const create = (http, params, data) => {
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations/${params.appDefinitionId}/actions/${params.appActionId}/calls`, data);
};
export const getCallDetails = (http, params) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/actions/${params.appActionId}/calls/${params.callId}`);
};
const APP_ACTION_CALL_RETRY_INTERVAL = 2000;
const APP_ACTION_CALL_RETRIES = 10;
function callAppActionResult(_x, _x2, _x3) {
  return _callAppActionResult.apply(this, arguments);
}
function _callAppActionResult() {
  _callAppActionResult = _asyncToGenerator(function* (http, params, {
    callId
  }) {
    let checkCount = 1;
    const retryInterval = params.retryInterval || APP_ACTION_CALL_RETRY_INTERVAL;
    const retries = params.retries || APP_ACTION_CALL_RETRIES;
    return new Promise((resolve, reject) => {
      const poll = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* () {
          try {
            var _result$response, _result$response2;
            const result = yield getCallDetails(http, _objectSpread(_objectSpread({}, params), {}, {
              callId: callId
            }));
            // The lambda failed or returned a 404, so we shouldn't re-poll anymore
            if (result !== null && result !== void 0 && (_result$response = result.response) !== null && _result$response !== void 0 && _result$response.statusCode && !isSuccessful(result === null || result === void 0 ? void 0 : (_result$response2 = result.response) === null || _result$response2 === void 0 ? void 0 : _result$response2.statusCode)) {
              const error = new Error('App action not found or lambda fails');
              reject(error);
            } else if (isSuccessful(result.statusCode)) {
              resolve(result);
            }

            // The logs are not ready yet. Continue waiting for them
            else if (shouldRePoll(result.statusCode) && checkCount < retries) {
              checkCount++;
              yield waitFor(retryInterval);
              poll();
            }

            // If the response status code is not successful and is not a status code that should be repolled, reject with an error immediately
            else {
              const error = new Error('The app action response is taking longer than expected to process.');
              reject(error);
            }
          } catch (error) {
            checkCount++;
            if (checkCount > retries) {
              reject(new Error('The app action response is taking longer than expected to process.'));
              return;
            }
            // If `appActionCalls.getCallDetails` throws, we re-poll as it might mean that the lambda result is not available in the webhook logs yet
            yield waitFor(retryInterval);
            poll();
          }
        });
        return function poll() {
          return _ref2.apply(this, arguments);
        };
      }();
      poll();
    });
  });
  return _callAppActionResult.apply(this, arguments);
}
export const createWithResponse = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (http, params, data) {
    const createResponse = yield raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations/${params.appDefinitionId}/actions/${params.appActionId}/calls`, data);
    const callId = createResponse.sys.id;
    return callAppActionResult(http, params, {
      callId
    });
  });
  return function createWithResponse(_x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();