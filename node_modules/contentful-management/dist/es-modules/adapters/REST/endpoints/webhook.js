function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import copy from 'fast-copy';
import * as raw from './raw';
import { normalizeSelect } from './utils';
const getBaseUrl = params => `/spaces/${params.spaceId}/webhook_definitions`;
const getWebhookCallBaseUrl = params => `/spaces/${params.spaceId}/webhooks`;
const getWebhookUrl = params => `${getBaseUrl(params)}/${params.webhookDefinitionId}`;
const getWebhookCallUrl = params => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/calls`;
const getWebhookCallDetailsUrl = params => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/calls/${params.callId}`;
const getWebhookHealthUrl = params => `${getWebhookCallBaseUrl(params)}/${params.webhookDefinitionId}/health`;
export const get = (http, params) => {
  return raw.get(http, getWebhookUrl(params));
};
export const getManyCallDetails = (http, params) => {
  return raw.get(http, getWebhookCallUrl(params), {
    params: normalizeSelect(params.query)
  });
};
export const getCallDetails = (http, params) => {
  return raw.get(http, getWebhookCallDetailsUrl(params));
};
export const getHealthStatus = (http, params) => {
  return raw.get(http, getWebhookHealthUrl(params));
};
export const getMany = (http, params) => {
  return raw.get(http, getBaseUrl(params), {
    params: normalizeSelect(params.query)
  });
};
export const create = (http, params, rawData, headers) => {
  const data = copy(rawData);
  return raw.post(http, getBaseUrl(params), data, {
    headers
  });
};
export const createWithId = (http, params, rawData, headers) => {
  const data = copy(rawData);
  return raw.put(http, getWebhookUrl(params), data, {
    headers
  });
};
export const update = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (http, params, rawData, headers) {
    var _rawData$sys$version;
    const data = copy(rawData);
    delete data.sys;
    return raw.put(http, getWebhookUrl(params), data, {
      headers: _objectSpread({
        'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
      }, headers)
    });
  });
  return function update(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
export const del = (http, params) => {
  return raw.del(http, getWebhookUrl(params));
};